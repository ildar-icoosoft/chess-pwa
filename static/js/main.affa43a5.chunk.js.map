{"version":3,"sources":["components/GamePreviewsList.module.scss","utils/makeChessInstance.ts","components/GamePreviewsList.tsx","containers/OngoingGamesContainer.tsx","pages/HomePage.tsx","components/SingleGame.tsx","utils/getTurnColor.ts","containers/SingleGameContainer.tsx","pages/GamePage.tsx","components/LoginForm.tsx","components/RegistrationForm.tsx","containers/LoginTabsContainer.tsx","app/App.tsx","serviceWorker.ts","app/rootReducer.ts","app/store.ts","index.tsx","redux/schemas/gameSchema.ts","services/ioClient.ts","redux/slices/currentUserSlice.ts","redux/schemas/userSchema.ts","redux/slices/ongoingGamesSlice.ts","redux/slices/entitiesSlice.ts","redux/slices/authModalSlice.ts","redux/slices/singleGameSlice.ts"],"names":["module","exports","game","initialFen","chess","Chess","moves","split","forEach","move","sloppy","GamePreviewsList","games","className","css","grid","map","item","fen","makeChessInstance","to","id","key","cell","position","viewOnly","width","OngoingGamesContainer","dispatch","useDispatch","items","useSelector","state","denormalize","ongoingGames","gameSchema","entities","useEffect","fetchOngoingGames","HomePage","SingleGame","onMove","check","in_check","turnColor","turn","getTurnColor","PieceColor","WHITE","BLACK","validMoves","getValidMoves","allowMarkers","clickable","draggable","status","SingleGameContainer","fetchGame","makeMove","from","GamePage","useParams","Number","loginSchema","Yup","shape","email","required","password","min","LoginForm","onSubmit","initialValues","validationSchema","values","formikHelpers","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","setStatus","Form","noValidate","e","onChange","Alert","variant","Group","Label","Control","type","name","placeholder","onBlur","value","isValid","isInvalid","Feedback","Button","disabled","registrationSchema","fullName","confirmPassword","equals","RegistrationForm","LoginTabsContainer","doLogin","React","useCallback","login","catch","err","statusCode","doSignUp","register","Tabs","transition","Tab","eventKey","title","App","currentUser","userId","userSchema","isAuthModalVisible","authModal","fetchCurrentUser","watchGames","onClick","logout","showAuthModal","Modal","show","onHide","hideAuthModal","animation","Header","closeButton","Title","Body","path","Boolean","window","location","hostname","match","rootReducer","combineReducers","ongoingGamesReducer","currentUserReducer","authModalReducer","entitiesReducer","store","configureStore","reducer","require","default","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","console","message","schema","Entity","white","black","ioClient","sailsIOClient","socketIOClient","sails","url","currentUserSlice","createSlice","initialState","isLoading","reducers","getCurrentUserRequest","getCurrentUserSuccess","action","payload","result","getCurrentUserError","loginSuccess","registerSuccess","logoutSuccess","actions","Promise","resolve","reject","socket","get","body","jwr","normalizedUser","normalize","data","put","rememberMe","emailAddress","post","agreed","ongoingGamesSlice","getOngoingGamesRequest","getOngoingGamesSuccess","getOngoingGamesError","extraReducers","normalizedGames","getNormalizedDataReducer","Object","assign","users","entitiesSlice","updateGameSuccess","createGameSuccess","makeMoveRequest","makeMoveSuccess","makeMoveError","_state","_action","toString","getSingleGameSuccess","on","subscriptionData","verb","previous","normalizedGame","gameId","authModalSlice","singleGameSlice","getSingleGameRequest","getSingleGameError","itemId"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,KAAO,iC,yOCKV,WAACC,GAA+B,IACvCC,EAAeD,EAAfC,WACa,aAAfA,IACFA,EALF,4DAQA,IAAMC,EAAQ,IAAIC,QAAMF,GAUxB,OARID,EAAKI,OACPJ,EAAKI,MAAMC,MAAM,KAAKC,SAAQ,SAACC,GAC7BL,EAAMK,KAAKA,EAAM,CACfC,QAAQ,OAKPN,GCXIO,EAA8C,SAAC,GAAoB,IAAD,IAAjBC,aAAiB,MAAT,GAAS,EAC7E,OACE,yBAAKC,UAAWC,IAAIC,MACjBH,EAAMI,KAAI,SAACC,GACV,IAAMC,EAAcC,EAAkBF,GAAMC,MAE5C,OACE,kBAAC,IAAD,CAAME,GAAE,gBAAWH,EAAKI,IAAMC,IAAKL,EAAKI,IACtC,yBAAKR,UAAWC,IAAIS,MAClB,kBAAC,QAAD,CAAOC,SAAUN,EAAKO,UAAU,EAAOC,MAAO,a,gBCE7CC,EAd4B,WACzC,IAAMC,EAAWC,cAEXC,EAAQC,aAAY,SAACC,GAAD,OACxBC,YAAYD,EAAME,aAAaJ,MAAO,CAACK,KAAaH,EAAMI,aAO5D,OAJAC,qBAAU,WACRT,EAASU,iBACR,CAACV,IAEG,kBAAC,EAAD,CAAkBhB,MAAOkB,KCZnBS,EAJe,WAC5B,OAAO,kBAAC,EAAD,OCcIC,EAAkC,SAAC,GAAsB,IAApBtC,EAAmB,EAAnBA,KAAMuC,EAAa,EAAbA,OACtD,IAAKvC,EACH,OAAO,KAGT,IAAME,EAAuBe,EAAkBjB,GAEzCwC,EAAiBtC,EAAMuC,WAEvBzB,EAAcd,EAAMc,MAEpB0B,EACoB,UC3Bb,SAACxC,GACd,MAAwB,MAAjBA,EAAMyC,OAAiB,QAAU,QD0BtCC,CAAa1C,GAAqB2C,aAAWC,MAAQD,aAAWE,MAE5DC,EAAyBC,wBAAc/C,GAE7C,OACE,kBAAC,QAAD,CACEgD,cAAY,EACZV,MAAOA,EACPW,WAAS,EACTC,WAAS,EACT9B,SAAUN,EACV0B,UAAWA,EACXM,WAAYA,EACZzB,SAA0B,YAAhBvB,EAAKqD,OACfd,OAAQA,K,gBE7BDe,EAAoD,SAAC,GAAY,IAAVnC,EAAS,EAATA,GAC5DO,EAAWC,cAEX3B,EAAO6B,aAAY,SAACC,GAAD,OACvBC,YAAYZ,EAAIc,IAAYH,EAAMI,aAGpCC,qBAAU,WACRT,EAAS6B,YAAUpC,MAClB,CAACO,EAAUP,IAMd,OAAInB,EACK,kBAAC,EAAD,CAAYA,KAAMA,EAAMuC,OALlB,SAAChC,GACdmB,EAAS8B,YAASrC,EAAD,UAAQZ,EAAKkD,MAAb,OAAoBlD,EAAKW,SAMrC,MCnBMwC,EANe,WAAO,IAC3BvC,EAAOwC,cAAPxC,GAER,OAAO,kBAAC,EAAD,CAAqBA,GAAIyC,OAAOzC,M,qDCHnC0C,EAAcC,MAAaC,MAAM,CACrCC,MAAOF,MAAaE,MAAM,iBAAiBC,SAAS,YACpDC,SAAUJ,MACPK,IAAI,EAAG,gCACPF,SAAS,cAUDG,EAAgC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9C,OACE,kBAAC,IAAD,CACEC,cAAe,CAAEN,MAAO,GAAIE,SAAU,IACtCK,iBAAkBV,EAClBQ,SAAQ,iHAAE,SAACG,EAAQC,GACjB,GAAIJ,EACF,OAAOA,EAASG,EAAqBC,QAKxC,gBACCC,EADD,EACCA,OACAF,EAFD,EAECA,OACAG,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACAC,EAND,EAMCA,aACAC,EAPD,EAOCA,aACA1B,EARD,EAQCA,OACA2B,EATD,EASCA,UATD,OAYC,kBAACC,EAAA,EAAD,CACEC,YAAU,EACVb,SAAU,SAACc,GAAD,OAAOL,EAAaK,IAC9BC,SAAU,kBAAMJ,EAAU,QAEvB3B,GAAU,kBAACgC,EAAA,EAAD,CAAOC,QAAQ,UAAUjC,GACtC,kBAAC4B,EAAA,EAAKM,MAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,sBACA,kBAACP,EAAA,EAAKQ,QAAN,CACEC,KAAK,QACLC,KAAK,QACLC,YAAY,cACZC,OAAQhB,EACRiB,MAAOtB,EAAOR,MACdoB,SAAUR,EACVmB,QAASpB,EAAQX,QAAUU,EAAOV,MAClCgC,UAAWrB,EAAQX,SAAWU,EAAOV,QAEvC,kBAACiB,EAAA,EAAKQ,QAAQQ,SAAd,CAAuBP,KAAK,WACzBhB,EAAOV,QAIZ,kBAACiB,EAAA,EAAKM,MAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,iBACA,kBAACP,EAAA,EAAKQ,QAAN,CACEC,KAAK,WACLC,KAAK,WACLC,YAAY,WACZR,SAAUR,EACViB,OAAQhB,EACRiB,MAAOtB,EAAON,SACd6B,QAASpB,EAAQT,WAAaQ,EAAOR,SACrC8B,UAAWrB,EAAQT,YAAcQ,EAAOR,WAE1C,kBAACe,EAAA,EAAKQ,QAAQQ,SAAd,CAAuBP,KAAK,WACzBhB,EAAOR,WAGZ,kBAACgC,EAAA,EAAD,CAAQZ,QAAQ,UAAUI,KAAK,SAASS,SAAUpB,GAAlD,cC7EJqB,EAAqBtC,MAAaC,MAAM,CAC5CsC,SAAUvC,MAAaG,SAAS,YAChCD,MAAOF,MAAaE,MAAM,iBAAiBC,SAAS,YACpDC,SAAUJ,MACPK,IAAI,EAAG,gCACPF,SAAS,YACZqC,gBAAiBxC,MACdyC,OAAO,CAACzC,IAAQ,aAAc,8BAC9BG,SAAS,cAiBDuC,EAA8C,SAAC,GAAkB,IAAhBnC,EAAe,EAAfA,SAC5D,OACE,kBAAC,IAAD,CACEC,cAAe,CACb+B,SAAU,GACVrC,MAAO,GACPE,SAAU,GACVoC,gBAAiB,IAEnB/B,iBAAkB6B,EAClB/B,SAAQ,iHAAE,SAACG,EAAQC,GACjB,GAAIJ,EACF,OAAOA,EAASG,EAAgCC,QAKnD,gBACCC,EADD,EACCA,OACAF,EAFD,EAECA,OACAG,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACAC,EAND,EAMCA,aACAC,EAPD,EAOCA,aACA1B,EARD,EAQCA,OACA2B,EATD,EASCA,UATD,OAYC,kBAACC,EAAA,EAAD,CACEC,YAAU,EACVb,SAAU,SAACc,GAAD,OAAOL,EAAaK,IAC9BC,SAAU,kBAAMJ,EAAU,QAEvB3B,GAAU,kBAACgC,EAAA,EAAD,CAAOC,QAAQ,UAAUjC,GAEtC,kBAAC4B,EAAA,EAAKM,MAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,kBACA,kBAACP,EAAA,EAAKQ,QAAN,CACEC,KAAK,OACLC,KAAK,WACLC,YAAY,kBACZC,OAAQhB,EACRiB,MAAOtB,EAAO6B,SACdjB,SAAUR,EACVmB,QAASpB,EAAQ0B,WAAa3B,EAAO2B,SACrCL,UAAWrB,EAAQ0B,YAAc3B,EAAO2B,WAE1C,kBAACpB,EAAA,EAAKQ,QAAQQ,SAAd,CAAuBP,KAAK,WACzBhB,EAAO2B,WAIZ,kBAACpB,EAAA,EAAKM,MAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,sBACA,kBAACP,EAAA,EAAKQ,QAAN,CACEC,KAAK,QACLC,KAAK,QACLC,YAAY,cACZC,OAAQhB,EACRiB,MAAOtB,EAAOR,MACdoB,SAAUR,EACVmB,QAASpB,EAAQX,QAAUU,EAAOV,MAClCgC,UAAWrB,EAAQX,SAAWU,EAAOV,QAEvC,kBAACiB,EAAA,EAAKQ,QAAQQ,SAAd,CAAuBP,KAAK,WACzBhB,EAAOV,QAIZ,kBAACiB,EAAA,EAAKM,MAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,iBACA,kBAACP,EAAA,EAAKQ,QAAN,CACEC,KAAK,WACLC,KAAK,WACLC,YAAY,WACZR,SAAUR,EACViB,OAAQhB,EACRiB,MAAOtB,EAAON,SACd6B,QAASpB,EAAQT,WAAaQ,EAAOR,SACrC8B,UAAWrB,EAAQT,YAAcQ,EAAOR,WAE1C,kBAACe,EAAA,EAAKQ,QAAQQ,SAAd,CAAuBP,KAAK,WACzBhB,EAAOR,WAIZ,kBAACe,EAAA,EAAKM,MAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,yBACA,kBAACP,EAAA,EAAKQ,QAAN,CACEC,KAAK,WACLC,KAAK,kBACLC,YAAY,WACZR,SAAUR,EACViB,OAAQhB,EACRiB,MAAOtB,EAAO8B,gBACdP,QAASpB,EAAQ2B,kBAAoB5B,EAAO4B,gBAC5CN,UAAWrB,EAAQ2B,mBAAqB5B,EAAO4B,kBAEjD,kBAACrB,EAAA,EAAKQ,QAAQQ,SAAd,CAAuBP,KAAK,WACzBhB,EAAO4B,kBAIZ,kBAACJ,EAAA,EAAD,CAAQZ,QAAQ,UAAUI,KAAK,SAASS,SAAUpB,GAAlD,iB,QCxEK0B,EApDyB,WACtC,IAAM/E,EAAWC,cAEX+E,EAAUC,IAAMC,aACpB,SAACpC,EAAmBC,GAClB,OAAO/C,EAASmF,YAAMrC,IAASsC,OAAM,SAACC,GACb,MAAnBA,EAAIC,WACNvC,EAAcO,UAAU,+BAExBP,EAAcO,UAAU,8BAI9B,CAACtD,IAGGuF,EAAWN,IAAMC,aACrB,SACEpC,EACAC,GAEA,OAAO/C,EACLwF,YAAS,CACPb,SAAU7B,EAAO6B,SACjBrC,MAAOQ,EAAOR,MACdE,SAAUM,EAAON,YAEnB4C,OAAM,SAACC,GACgB,MAAnBA,EAAIC,WACNvC,EAAcO,UACZ,gDAGFP,EAAcO,UAAU,8BAI9B,CAACtD,IAGH,OACE,kBAACyF,EAAA,EAAD,CAAMC,YAAY,GAChB,kBAACC,EAAA,EAAD,CAAKC,SAAS,OAAOC,MAAM,SACzB,kBAAC,EAAD,CAAWlD,SAAUqC,KAEvB,kBAACW,EAAA,EAAD,CAAKC,SAAS,UAAUC,MAAM,YAC5B,kBAAC,EAAD,CAAkBlD,SAAU4C,O,gBCyBrBO,UApEC,WACd,IAAM9F,EAAWC,cAEX8F,EAA2B5F,aAAY,SAACC,GAC5C,OAAIA,EAAM2F,YAAYC,OACb3F,YAAYD,EAAM2F,YAAYC,OAAQC,IAAY7F,EAAMI,UAE1D,QAED0F,EAAuB/F,aAC7B,SAACC,GAAD,OAAsBA,EAAM+F,aADtBD,mBASR,OALAzF,qBAAU,WACRT,EAASoG,eACTpG,EAASqG,iBACR,CAACrG,IAGF,kBAAC,IAAD,KACG+F,EACC,oCACE,oCAAUA,EAAYpB,UACtB,kBAACH,EAAA,EAAD,CAAQZ,QAAQ,UAAU0C,QAAS,kBAAMtG,EAASuG,iBAAlD,WAKF,kBAAC/B,EAAA,EAAD,CAAQZ,QAAQ,UAAU0C,QAAS,kBAAMtG,EAASwG,iBAAlD,oBAKF,kBAACC,EAAA,EAAD,CACEC,KAAMR,EACNS,OAAQ,kBAAM3G,EAAS4G,gBACvBC,WAAW,GAEX,kBAACJ,EAAA,EAAMK,OAAP,CAAcC,aAAW,GACvB,kBAACN,EAAA,EAAMO,MAAP,eAGF,kBAACP,EAAA,EAAMQ,KAAP,KACE,kBAAC,EAAD,QAGJ,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMzH,GAAG,KAAT,WAKN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0H,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,Y,4FChEQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oDCDSC,EATKC,YAAgB,CAClCnH,aAAcoH,IACd3B,YAAa4B,IACbxB,UAAWyB,IACXpH,SAAUqH,MCWGC,MAfDC,YAAe,CAC3BC,QAASR,KCCI,WACb,IAAM1B,EAAMmC,EAAQ,KAAaC,QAEjCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAChC,EAAD,QAGJwC,SAASC,eAAe,SAI5BH,GHiHM,kBAAmBI,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdzD,OAAM,SAAC0D,GACNC,QAAQD,MAAMA,EAAME,a,gCI9I5B,mBAGMzI,EAAa,IAAI0I,IAAOC,OAAO,QAAS,CAC5CC,MAAOlD,IACPmD,MAAOnD,MAGM1F,O,gCCRf,+BAGM8I,EAHN,MAGiBC,GAAcC,KAE/BF,EAASG,MAAMC,IAAM,wBAENJ,O,gCCPf,+OA0BMK,EAAmBC,YAAY,CACnC1F,KAAM,cACN2F,aARqC,CACrC5D,OAAQ,KACR6D,WAAW,EACXf,MAAO,MAMPgB,SAAU,CACRC,sBADQ,SACc3J,GACpBA,EAAMyJ,WAAY,EAClBzJ,EAAM0I,MAAQ,MAEhBkB,sBALQ,SAMN5J,EACA6J,GAEA7J,EAAM4F,OAASiE,EAAOC,QAAUD,EAAOC,QAAQC,OAAS,KACxD/J,EAAMyJ,WAAY,EAClBzJ,EAAM0I,MAAQ,MAEhBsB,oBAbQ,SAaYhK,EAAO6J,GACzB7J,EAAMyJ,WAAY,EAClBzJ,EAAM0I,MAAQmB,EAAOC,SAEvBG,aAjBQ,SAiBKjK,EAAO6J,GAClB7J,EAAM4F,OAASiE,EAAOC,QAAQC,QAEhCG,gBApBQ,SAoBQlK,EAAO6J,GACrB7J,EAAM4F,OAASiE,EAAOC,QAAQC,QAEhCI,cAvBQ,SAuBMnK,GACZA,EAAM4F,OAAS,S,EAYjB0D,EAAiBc,QANnBT,E,EAAAA,sBACAC,E,EAAAA,sBACAI,E,EAAAA,oBACAC,E,EAAAA,aACAC,E,EAAAA,gBACAC,E,EAAAA,cAGab,MAAf,QAEO,IAAMtD,EAAmB,kBAAsC,SACpEpG,GAIA,OAFAA,EAAS+J,KAEF,IAAIU,SAAQ,SAACC,EAASC,GAC3BtB,IAASuB,OAAOC,IAAI,sBAAsB,SAACC,EAAeC,GACxD,GAAuB,MAAnBA,EAAIzF,WAAoB,CAC1B,IAAM0F,EAAiBC,YAAUH,EAAc7E,KAE/CjG,EAASgK,EAAsBgB,IAC/BN,EAAQI,QACoB,MAAnBC,EAAIzF,YACbtF,EAASgK,EAAsB,OAC/BU,EAAQ,QAER1K,EAASoK,EAAoBU,IAC7BH,EAAOI,YAMF5F,EAAQ,SAAC+F,GAAD,OAA8C,SACjElL,GAEA,OAAO,IAAIyK,SAAQ,SAACC,EAASC,GAC3BtB,IAASuB,OAAOO,IACd,yBACA,CACEC,YAAY,EACZC,aAAcH,EAAK5I,MACnBE,SAAU0I,EAAK1I,WAEjB,SAACsI,EAAeC,GACd,GAAuB,MAAnBA,EAAIzF,WAAoB,CAC1B,IAAM0F,EAAiBC,YAAUH,EAAc7E,KAE/CjG,EAASqK,EAAaW,IACtBN,EAAQI,QAERH,EAAOI,WAOJvF,EAAW,SAAC0F,GAAD,OAA+C,SACrElL,GAEA,OAAO,IAAIyK,SAAQ,SAACC,EAASC,GAC3BtB,IAASuB,OAAOU,KACd,0BACA,CACE3G,SAAUuG,EAAKvG,SACf0G,aAAcH,EAAK5I,MACnBE,SAAU0I,EAAK1I,SACfoC,gBAAiBsG,EAAK1I,SACtB+I,QAAQ,IAEV,SAACT,EAAeC,GACd,GAAuB,MAAnBA,EAAIzF,WAAoB,CAC1B,IAAM0F,EAAiBC,YAAUH,EAAc7E,KAE/CjG,EAASsK,EAAgBU,IACzBN,EAAQI,QAERH,EAAOI,WAOJxE,EAAS,kBAA+B,SAACvG,GACpD,OAAO,IAAIyK,SAAQ,SAACC,EAASC,GAC3BtB,IAASuB,OAAOU,KACd,yBACA,IACA,SAACR,EAAeC,GACS,MAAnBA,EAAIzF,YACNtF,EAASuK,KACTG,KAEAC,EAAOI,Y,gCC1JjB,IAEM9E,EAAa,IAFnB,KAEuBgD,EAAOC,QAAO,SAEtBjD,O,gCCJf,uGAwBMuF,EAAoB7B,YAAY,CACpC1F,KAAM,eACN2F,aARsC,CACtC1J,MAAO,GACP2J,WAAW,EACXf,MAAO,MAMPgB,SAAU,CACR2B,uBADQ,SACerL,GACrBA,EAAMyJ,WAAY,EAClBzJ,EAAM0I,MAAQ,MAEhB4C,uBALQ,SAMNtL,EACA6J,GAEA7J,EAAMF,MAAQ+J,EAAOC,QAAQC,OAC7B/J,EAAMyJ,WAAY,EAClBzJ,EAAM0I,MAAQ,MAEhB6C,qBAbQ,SAaavL,EAAO6J,GAC1B7J,EAAMyJ,WAAY,EAClBzJ,EAAM0I,MAAQmB,EAAOC,UAGzB0B,cAAe,K,EAObJ,EAAkBhB,QAHpBiB,E,EAAAA,uBACAC,E,EAAAA,uBACAC,E,EAAAA,qBAGaH,MAAf,QAEO,IAAM9K,EAAoB,kBAAiC,SAChEV,GAIA,OAFAA,EAASyL,KAEF,IAAIhB,SAAQ,SAACC,EAASC,GAC3BtB,IAASuB,OAAOC,IAAI,wBAAwB,SAACC,EAAeC,GAC1D,GAAuB,MAAnBA,EAAIzF,WAAoB,CAC1B,IAAMuG,EAAkBZ,YAAUH,EAAgB,CAACvK,MACnDP,EAAS0L,EAAuBG,IAEhCnB,EAAQI,QAER9K,EAAS2L,EAAqBb,IAC9BH,EAAOI,Y,0KC3CTe,EAA2B,SAC/B1L,EACA6J,GAIA8B,OAAOC,OAAO5L,EAAM6L,MAAOhC,EAAOC,QAAQ1J,SAASyL,OACnDF,OAAOC,OAAO5L,EAAMpB,MAAOiL,EAAOC,QAAQ1J,SAASxB,QAG/CkN,EAAgBvC,YAAY,CAChC1F,KAAM,WACN2F,aAjBkC,CAClCqC,MAAO,GACPjN,MAAO,IAgBP8K,SAAU,CACRqC,kBAAmBL,EACnBM,kBAAmBN,EACnBO,gBAHQ,aAIRC,gBAAiBR,EACjBS,cALQ,SAKMC,EAAQC,MAExBb,eAAa,mBACVF,IAAuBgB,WAAaZ,GAD1B,cAEVa,IAAqBD,WAAaZ,GAFxB,K,EAYXI,EAAc1B,QALhB2B,E,EAAAA,kBACAC,E,EAAAA,kBACAC,E,EAAAA,gBACAC,E,EAAAA,gBACAC,E,EAAAA,cAGaL,MAAf,QAEO,IAAM7F,EAAa,kBAAsB,SAACrG,GAC/CqJ,IAASuB,OAAOgC,GAAG,QAAQ,SAACC,GAC1B,GAA8B,YAA1BA,EAAiBC,KAAoB,CACvC,IAAMxO,EAAI,eACLuO,EAAiBE,SADZ,GAELF,EAAiB3B,MAGhB8B,EAAiB/B,YAAU3M,EAAMiC,KAEvCP,EAASmM,EAAkBa,SACtB,GAA8B,YAA1BH,EAAiBC,KAAoB,CAC9C,IAAME,EAAiB/B,YAAU4B,EAAiB3B,KAAM3K,KAExDP,EAASoM,EAAkBY,UAKpBlL,EAAW,SACtBmL,EACApO,GAFsB,OAGM,SAACmB,GAG7B,OAFAA,EAASqM,KAEF,IAAI5B,SAAQ,SAACC,EAASC,GAC3BtB,IAASuB,OAAOU,KAAhB,6BACwB2B,EADxB,iBACuCpO,GACrC,IACA,SAACiM,EAAeC,GACd,GAAuB,MAAnBA,EAAIzF,WAAoB,CAC1B,IAAM0H,EAAiB/B,YAAUH,EAAcvK,KAE/CP,EAASsM,EAAgBU,IACzBtC,EAAQI,QAER9K,EAASuM,EAAczB,IACvBH,EAAOI,Y,kICtFXmC,EAAiBvD,YAAY,CACjC1F,KAAM,YACN2F,aANmC,CACnC1D,oBAAoB,GAMpB4D,SAAU,CACRtD,cADQ,SACMpG,GACZA,EAAM8F,oBAAqB,GAE7BU,cAJQ,SAIMxG,GACZA,EAAM8F,oBAAqB,IAG/B0F,eAAa,mBACVvB,IAAaqC,YAAa,SAACtM,GAC1BA,EAAM8F,oBAAqB,KAFlB,cAIVoE,IAAgBoC,YAAa,SAACtM,GAC7BA,EAAM8F,oBAAqB,KALlB,K,EAUiCgH,EAAe1C,QAAhDhE,E,EAAAA,cAAeI,E,EAAAA,cAEfsG,MAAf,S,gCCrCA,uGAsBMC,EAAkBxD,YAAY,CAClC1F,KAAM,aACN2F,aAJoC,GAKpCE,SAAU,CACRsD,qBADQ,SACahN,EAAO6J,GAC1B7J,EAAM6J,EAAOC,SAAW,CACtBL,WAAW,EACXf,MAAO,OAGX6D,qBAPQ,SAOavM,EAAO6J,GAC1B7J,EAAM6J,EAAOC,QAAQC,QAAU,CAC7BN,WAAW,EACXf,MAAO,OAGXuE,mBAbQ,SAaWjN,EAAO6J,GACxB7J,EAAM6J,EAAOC,QAAQoD,QAAU,CAC7BzD,WAAW,EACXf,MAAOmB,EAAOC,QAAQpB,SAI5B8C,cAAe,K,EAObuB,EAAgB3C,QAHlB4C,E,EAAAA,qBACAT,E,EAAAA,qBACAU,E,EAAAA,mBAKWxL,GAFEsL,EAAf,QAEyB,SAAC1N,GAAD,OAAyC,SAChEO,GAIA,OAFAA,EAASoN,EAAqB3N,IAEvB,IAAIgL,SAAQ,SAACC,EAASC,GAC3BtB,IAASuB,OAAOC,IAAhB,gBAA6BpL,IAAM,SAACqL,EAAeC,GACjD,GAAuB,MAAnBA,EAAIzF,WAAoB,CAC1B,IAAM0H,EAAiB/B,YAAUH,EAAcvK,KAC/CP,EAAS2M,EAAqBK,IAC9BtC,EAAQI,QAER9K,EACEqN,EAAmB,CACjBC,OAAQ7N,EACRqJ,MAAOgC,KAGXH,EAAOI,c","file":"static/js/main.affa43a5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"GamePreviewsList_grid__2dFgV\"};","import { Chess, ChessInstance } from \"chess.js\";\nimport Game from \"../interfaces/Game\";\n\nconst startPositionFen =\n  \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n\nexport default (game: Game): ChessInstance => {\n  let { initialFen } = game;\n  if (initialFen === \"startpos\") {\n    initialFen = startPositionFen;\n  }\n\n  const chess = new Chess(initialFen);\n\n  if (game.moves) {\n    game.moves.split(\" \").forEach((move) => {\n      chess.move(move, {\n        sloppy: true,\n      });\n    });\n  }\n\n  return chess;\n};\n","import React, { FC } from \"react\";\nimport { Board } from \"ii-react-chessboard\";\nimport { Link } from \"react-router-dom\";\nimport Game from \"../interfaces/Game\";\nimport css from \"./GamePreviewsList.module.scss\";\nimport makeChessInstance from \"../utils/makeChessInstance\";\n\nexport interface GamePreviewsListProps {\n  games?: Game[];\n}\n\nexport const GamePreviewsList: FC<GamePreviewsListProps> = ({ games = [] }) => {\n  return (\n    <div className={css.grid}>\n      {games.map((item) => {\n        const fen: string = makeChessInstance(item).fen();\n\n        return (\n          <Link to={`/game/${item.id}`} key={item.id}>\n            <div className={css.cell}>\n              <Board position={fen} viewOnly={false} width={240} />\n            </div>\n          </Link>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { FC, useEffect } from \"react\";\nimport { denormalize } from \"normalizr\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GamePreviewsList } from \"../components/GamePreviewsList\";\nimport { RootState } from \"../app/rootReducer\";\nimport { fetchOngoingGames } from \"../redux/slices/ongoingGamesSlice\";\nimport gameSchema from \"../redux/schemas/gameSchema\";\n\nconst OngoingGamesContainer: FC<unknown> = () => {\n  const dispatch = useDispatch();\n\n  const items = useSelector((state: RootState) =>\n    denormalize(state.ongoingGames.items, [gameSchema], state.entities)\n  );\n\n  useEffect(() => {\n    dispatch(fetchOngoingGames());\n  }, [dispatch]);\n\n  return <GamePreviewsList games={items} />;\n};\n\nexport default OngoingGamesContainer;\n","import React, { FC } from \"react\";\nimport OngoingGamesContainer from \"../containers/OngoingGamesContainer\";\n\nconst HomePage: FC<unknown> = () => {\n  return <OngoingGamesContainer />;\n};\n\nexport default HomePage;\n","import React, { FC } from \"react\";\nimport { ChessInstance } from \"chess.js\";\nimport {\n  Board,\n  getValidMoves,\n  Move,\n  PieceColor,\n  ValidMoves,\n} from \"ii-react-chessboard\";\nimport Game from \"../interfaces/Game\";\nimport makeChessInstance from \"../utils/makeChessInstance\";\nimport getTurnColor from \"../utils/getTurnColor\";\n\nexport interface SingleGameProps {\n  game?: Game;\n  onMove?(move: Move): void;\n}\n\nexport const SingleGame: FC<SingleGameProps> = ({ game, onMove }) => {\n  if (!game) {\n    return null;\n  }\n\n  const chess: ChessInstance = makeChessInstance(game);\n\n  const check: boolean = chess.in_check();\n\n  const fen: string = chess.fen();\n\n  const turnColor: PieceColor =\n    getTurnColor(chess) === \"white\" ? PieceColor.WHITE : PieceColor.BLACK;\n\n  const validMoves: ValidMoves = getValidMoves(chess);\n\n  return (\n    <Board\n      allowMarkers\n      check={check}\n      clickable\n      draggable\n      position={fen}\n      turnColor={turnColor}\n      validMoves={validMoves}\n      viewOnly={game.status !== \"started\"}\n      onMove={onMove}\n    />\n  );\n};\n","import { ChessInstance } from \"chess.js\";\nimport { PieceColor } from \"../types/PieceColor\";\n\nexport default (chess: ChessInstance): PieceColor => {\n  return chess.turn() === \"w\" ? \"white\" : \"black\";\n};\n","import React, { FC, useEffect } from \"react\";\nimport { denormalize } from \"normalizr\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Move } from \"ii-react-chessboard\";\nimport { SingleGame } from \"../components/SingleGame\";\nimport { AppDispatch } from \"../app/store\";\nimport { RootState } from \"../app/rootReducer\";\nimport gameSchema from \"../redux/schemas/gameSchema\";\nimport { fetchGame } from \"../redux/slices/singleGameSlice\";\nimport { makeMove } from \"../redux/slices/entitiesSlice\";\n\nexport interface SingleGameContainerProps {\n  id: number;\n}\n\nexport const SingleGameContainer: FC<SingleGameContainerProps> = ({ id }) => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const game = useSelector((state: RootState) =>\n    denormalize(id, gameSchema, state.entities)\n  );\n\n  useEffect(() => {\n    dispatch(fetchGame(id));\n  }, [dispatch, id]);\n\n  const onMove = (move: Move) => {\n    dispatch(makeMove(id, `${move.from}${move.to}`));\n  };\n\n  if (game) {\n    return <SingleGame game={game} onMove={onMove} />;\n  }\n  return null;\n};\n","import React, { FC } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { SingleGameContainer } from \"../containers/SingleGameContainer\";\n\ninterface GamePageParams {\n  id: string;\n}\n\nconst GamePage: FC<unknown> = () => {\n  const { id } = useParams<GamePageParams>();\n\n  return <SingleGameContainer id={Number(id)} />;\n};\n\nexport default GamePage;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport React, { FC, FormEvent } from \"react\";\nimport { Formik, FormikHelpers } from \"formik\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\nimport * as Yup from \"yup\";\nimport LoginData from \"../interfaces/LoginData\";\n\nconst loginSchema = Yup.object().shape({\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n  password: Yup.string()\n    .min(6, \"Password length must be >= 6\")\n    .required(\"Required\"),\n});\n\nexport interface LoginFormProps {\n  onSubmit(\n    values: LoginData,\n    formikHelpers: FormikHelpers<LoginData>\n  ): void | Promise<any>;\n}\n\nexport const LoginForm: FC<LoginFormProps> = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{ email: \"\", password: \"\" }}\n      validationSchema={loginSchema}\n      onSubmit={(values, formikHelpers): Promise<any> | void => {\n        if (onSubmit) {\n          return onSubmit(values as LoginData, formikHelpers);\n        }\n        return undefined;\n      }}\n    >\n      {({\n        errors,\n        values,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        status,\n        setStatus,\n        /* and other goodies */\n      }) => (\n        <Form\n          noValidate\n          onSubmit={(e) => handleSubmit(e as FormEvent<HTMLFormElement>)}\n          onChange={() => setStatus(\"\")}\n        >\n          {!!status && <Alert variant=\"danger\">{status}</Alert>}\n          <Form.Group>\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Enter email\"\n              onBlur={handleBlur}\n              value={values.email}\n              onChange={handleChange}\n              isValid={touched.email && !errors.email}\n              isInvalid={touched.email && !!errors.email}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.email}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n              isValid={touched.password && !errors.password}\n              isInvalid={touched.password && !!errors.password}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.password}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n            Login\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport React, { FC, FormEvent } from \"react\";\nimport { Formik } from \"formik\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\nimport * as Yup from \"yup\";\nimport { FormikHelpers } from \"formik/dist/types\";\n\nconst registrationSchema = Yup.object().shape({\n  fullName: Yup.string().required(\"Required\"),\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n  password: Yup.string()\n    .min(6, \"Password length must be >= 6\")\n    .required(\"Required\"),\n  confirmPassword: Yup.string()\n    .equals([Yup.ref(\"password\")], \"Please repeat the password\")\n    .required(\"Required\"),\n});\n\nexport interface RegistrationFormData {\n  fullName: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nexport interface RegistrationFormProps {\n  onSubmit(\n    values: RegistrationFormData,\n    formikHelpers: FormikHelpers<RegistrationFormData>\n  ): void | Promise<any>;\n}\n\nexport const RegistrationForm: FC<RegistrationFormProps> = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{\n        fullName: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n      }}\n      validationSchema={registrationSchema}\n      onSubmit={(values, formikHelpers): Promise<any> | void => {\n        if (onSubmit) {\n          return onSubmit(values as RegistrationFormData, formikHelpers);\n        }\n        return undefined;\n      }}\n    >\n      {({\n        errors,\n        values,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        status,\n        setStatus,\n        /* and other goodies */\n      }) => (\n        <Form\n          noValidate\n          onSubmit={(e) => handleSubmit(e as FormEvent<HTMLFormElement>)}\n          onChange={() => setStatus(\"\")}\n        >\n          {!!status && <Alert variant=\"danger\">{status}</Alert>}\n\n          <Form.Group>\n            <Form.Label>Full name</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"fullName\"\n              placeholder=\"Enter full name\"\n              onBlur={handleBlur}\n              value={values.fullName}\n              onChange={handleChange}\n              isValid={touched.fullName && !errors.fullName}\n              isInvalid={touched.fullName && !!errors.fullName}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.fullName}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Enter email\"\n              onBlur={handleBlur}\n              value={values.email}\n              onChange={handleChange}\n              isValid={touched.email && !errors.email}\n              isInvalid={touched.email && !!errors.email}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.email}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n              isValid={touched.password && !errors.password}\n              isInvalid={touched.password && !!errors.password}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.password}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"confirmPassword\"\n              placeholder=\"Password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.confirmPassword}\n              isValid={touched.confirmPassword && !errors.confirmPassword}\n              isInvalid={touched.confirmPassword && !!errors.confirmPassword}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.confirmPassword}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n            Register\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import React, { FC } from \"react\";\nimport { Tab, Tabs } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { FormikHelpers } from \"formik\";\nimport { LoginForm } from \"../components/LoginForm\";\nimport {\n  RegistrationForm,\n  RegistrationFormData,\n} from \"../components/RegistrationForm\";\nimport LoginData from \"../interfaces/LoginData\";\nimport { login, register } from \"../redux/slices/currentUserSlice\";\nimport { AppDispatch } from \"../app/store\";\n\nconst LoginTabsContainer: FC<unknown> = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const doLogin = React.useCallback(\n    (values: LoginData, formikHelpers: FormikHelpers<LoginData>) => {\n      return dispatch(login(values)).catch((err) => {\n        if (err.statusCode === 401) {\n          formikHelpers.setStatus(\"Incorrect email or password\");\n        } else {\n          formikHelpers.setStatus(\"Internal server error\");\n        }\n      });\n    },\n    [dispatch]\n  );\n\n  const doSignUp = React.useCallback(\n    (\n      values: RegistrationFormData,\n      formikHelpers: FormikHelpers<RegistrationFormData>\n    ) => {\n      return dispatch(\n        register({\n          fullName: values.fullName,\n          email: values.email,\n          password: values.password,\n        })\n      ).catch((err) => {\n        if (err.statusCode === 409) {\n          formikHelpers.setStatus(\n            \"The provided email address is already in use\"\n          );\n        } else {\n          formikHelpers.setStatus(\"Internal server error\");\n        }\n      });\n    },\n    [dispatch]\n  );\n\n  return (\n    <Tabs transition={false}>\n      <Tab eventKey=\"home\" title=\"Login\">\n        <LoginForm onSubmit={doLogin} />\n      </Tab>\n      <Tab eventKey=\"profile\" title=\"Register\">\n        <RegistrationForm onSubmit={doSignUp} />\n      </Tab>\n    </Tabs>\n  );\n};\n\nexport default LoginTabsContainer;\n","import React, { FC, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { denormalize } from \"normalizr\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport HomePage from \"../pages/HomePage\";\nimport GamePage from \"../pages/GamePage\";\nimport LoginTabsContainer from \"../containers/LoginTabsContainer\";\nimport { RootState } from \"./rootReducer\";\nimport { fetchCurrentUser, logout } from \"../redux/slices/currentUserSlice\";\nimport { showAuthModal, hideAuthModal } from \"../redux/slices/authModalSlice\";\nimport User from \"../interfaces/User\";\nimport userSchema from \"../redux/schemas/userSchema\";\nimport { watchGames } from \"../redux/slices/entitiesSlice\";\n\nconst App: FC = () => {\n  const dispatch = useDispatch();\n\n  const currentUser: User | null = useSelector((state: RootState) => {\n    if (state.currentUser.userId) {\n      return denormalize(state.currentUser.userId, userSchema, state.entities);\n    }\n    return null;\n  });\n  const { isAuthModalVisible } = useSelector(\n    (state: RootState) => state.authModal\n  );\n\n  useEffect(() => {\n    dispatch(fetchCurrentUser());\n    dispatch(watchGames());\n  }, [dispatch]);\n\n  return (\n    <Router>\n      {currentUser ? (\n        <>\n          <div>Hi, {currentUser.fullName}</div>\n          <Button variant=\"primary\" onClick={() => dispatch(logout())}>\n            Logout\n          </Button>\n        </>\n      ) : (\n        <Button variant=\"primary\" onClick={() => dispatch(showAuthModal())}>\n          Login / Register\n        </Button>\n      )}\n\n      <Modal\n        show={isAuthModalVisible}\n        onHide={() => dispatch(hideAuthModal())}\n        animation={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Login</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <LoginTabsContainer />\n        </Modal.Body>\n      </Modal>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/game/:id\">\n            <GamePage />\n          </Route>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable import/no-cycle */\n\nimport { combineReducers } from \"@reduxjs/toolkit\";\nimport ongoingGamesReducer from \"../redux/slices/ongoingGamesSlice\";\nimport currentUserReducer from \"../redux/slices/currentUserSlice\";\nimport authModalReducer from \"../redux/slices/authModalSlice\";\nimport entitiesReducer from \"../redux/slices/entitiesSlice\";\n\nconst rootReducer = combineReducers({\n  ongoingGames: ongoingGamesReducer,\n  currentUser: currentUserReducer,\n  authModal: authModalReducer,\n  entities: entitiesReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","/* eslint-disable global-require */\n/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable import/no-cycle */\n\nimport { Action, configureStore } from \"@reduxjs/toolkit\";\nimport { ThunkAction } from \"redux-thunk\";\nimport rootReducer, { RootState } from \"./rootReducer\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nif (process.env.NODE_ENV === \"development\" && module.hot) {\n  module.hot.accept(\"./rootReducer\", () => {\n    const newRootReducer = require(\"./rootReducer\").default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppThunk<R> = ThunkAction<R, RootState, unknown, Action<string>>;\n\nexport default store;\n","/* eslint-disable global-require */\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./app/store\";\n\nconst render = () => {\n  const App = require(\"./app/App\").default;\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n};\n\nrender();\n\nif (process.env.NODE_ENV === \"development\" && module.hot) {\n  module.hot.accept(\"./app/App\", render);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { schema } from \"normalizr\";\nimport userSchema from \"./userSchema\";\n\nconst gameSchema = new schema.Entity(\"games\", {\n  white: userSchema,\n  black: userSchema,\n});\n\nexport default gameSchema;\n","import socketIOClient from \"socket.io-client\";\nimport sailsIOClient from \"sails.io.js\";\n\nconst ioClient = sailsIOClient(socketIOClient);\n\nioClient.sails.url = \"http://localhost:1337\";\n\nexport default ioClient;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { normalize } from \"normalizr\";\nimport { JWR } from \"sails.io.js\";\nimport { AppThunk } from \"../../app/store\";\nimport ioClient from \"../../services/ioClient\";\nimport User from \"../../interfaces/User\";\nimport LoginData from \"../../interfaces/LoginData\";\nimport SignUpData from \"../../interfaces/SignUpData\";\nimport userSchema from \"../schemas/userSchema\";\nimport NormalizedData from \"../interfaces/NormalizedData\";\n\ninterface CurrentUserState {\n  userId: number | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: CurrentUserState = {\n  userId: null,\n  isLoading: true,\n  error: null,\n};\n\nconst currentUserSlice = createSlice({\n  name: \"currentUser\",\n  initialState,\n  reducers: {\n    getCurrentUserRequest(state) {\n      state.isLoading = true;\n      state.error = null;\n    },\n    getCurrentUserSuccess(\n      state,\n      action: PayloadAction<NormalizedData<number> | null>\n    ) {\n      state.userId = action.payload ? action.payload.result : null;\n      state.isLoading = false;\n      state.error = null;\n    },\n    getCurrentUserError(state, action: PayloadAction<string>) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    loginSuccess(state, action: PayloadAction<NormalizedData<number>>) {\n      state.userId = action.payload.result;\n    },\n    registerSuccess(state, action: PayloadAction<NormalizedData<number>>) {\n      state.userId = action.payload.result;\n    },\n    logoutSuccess(state) {\n      state.userId = null;\n    },\n  },\n});\n\nexport const {\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n  loginSuccess,\n  registerSuccess,\n  logoutSuccess,\n} = currentUserSlice.actions;\n\nexport default currentUserSlice.reducer;\n\nexport const fetchCurrentUser = (): AppThunk<Promise<User | null>> => (\n  dispatch\n) => {\n  dispatch(getCurrentUserRequest());\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(\"/api/v1/account/me\", (body: unknown, jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        const normalizedUser = normalize(body as User, userSchema);\n\n        dispatch(getCurrentUserSuccess(normalizedUser));\n        resolve(body as User);\n      } else if (jwr.statusCode === 401) {\n        dispatch(getCurrentUserSuccess(null));\n        resolve(null);\n      } else {\n        dispatch(getCurrentUserError(body as string));\n        reject(jwr);\n      }\n    });\n  });\n};\n\nexport const login = (data: LoginData): AppThunk<Promise<User>> => (\n  dispatch\n) => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.put(\n      \"/api/v1/entrance/login\",\n      {\n        rememberMe: true,\n        emailAddress: data.email,\n        password: data.password,\n      },\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedUser = normalize(body as User, userSchema);\n\n          dispatch(loginSuccess(normalizedUser));\n          resolve(body as User);\n        } else {\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n\nexport const register = (data: SignUpData): AppThunk<Promise<User>> => (\n  dispatch\n) => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      \"/api/v1/entrance/signup\",\n      {\n        fullName: data.fullName,\n        emailAddress: data.email,\n        password: data.password,\n        confirmPassword: data.password,\n        agreed: true,\n      },\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedUser = normalize(body as User, userSchema);\n\n          dispatch(registerSuccess(normalizedUser));\n          resolve(body as User);\n        } else {\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n\nexport const logout = (): AppThunk<Promise<void>> => (dispatch) => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      \"/api/v1/account/logout\",\n      {},\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          dispatch(logoutSuccess());\n          resolve();\n        } else {\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n","import { schema } from \"normalizr\";\n\nconst userSchema = new schema.Entity(\"users\");\n\nexport default userSchema;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { JWR } from \"sails.io.js\";\nimport { normalize } from \"normalizr\";\nimport { AppThunk } from \"../../app/store\";\nimport Game from \"../../interfaces/Game\";\nimport ioClient from \"../../services/ioClient\";\nimport gameSchema from \"../schemas/gameSchema\";\nimport NormalizedData from \"../interfaces/NormalizedData\";\n\ninterface OngoingGamesState {\n  items: number[];\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: OngoingGamesState = {\n  items: [],\n  isLoading: true,\n  error: null,\n};\n\nconst ongoingGamesSlice = createSlice({\n  name: \"ongoingGames\",\n  initialState,\n  reducers: {\n    getOngoingGamesRequest(state) {\n      state.isLoading = true;\n      state.error = null;\n    },\n    getOngoingGamesSuccess(\n      state,\n      action: PayloadAction<NormalizedData<number[]>>\n    ) {\n      state.items = action.payload.result;\n      state.isLoading = false;\n      state.error = null;\n    },\n    getOngoingGamesError(state, action: PayloadAction<string>) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n  },\n  extraReducers: {},\n});\n\nexport const {\n  getOngoingGamesRequest,\n  getOngoingGamesSuccess,\n  getOngoingGamesError,\n} = ongoingGamesSlice.actions;\n\nexport default ongoingGamesSlice.reducer;\n\nexport const fetchOngoingGames = (): AppThunk<Promise<Game[]>> => (\n  dispatch\n) => {\n  dispatch(getOngoingGamesRequest());\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(\"/api/v1/game/playing\", (body: unknown, jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        const normalizedGames = normalize(body as Game[], [gameSchema]);\n        dispatch(getOngoingGamesSuccess(normalizedGames));\n\n        resolve(body as Game[]);\n      } else {\n        dispatch(getOngoingGamesError(body as string));\n        reject(jwr);\n      }\n    });\n  });\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { normalize } from \"normalizr\";\nimport { JWR } from \"sails.io.js\";\nimport Game from \"../../interfaces/Game\";\nimport gameSchema from \"../schemas/gameSchema\";\nimport { SubscriptionData } from \"../../interfaces/SubscriptionData\";\nimport { AppThunk } from \"../../app/store\";\nimport ioClient from \"../../services/ioClient\";\nimport { getOngoingGamesSuccess } from \"./ongoingGamesSlice\";\nimport { getSingleGameSuccess } from \"./singleGameSlice\";\nimport NormalizedUserEntity from \"../interfaces/NormalizedUserEntity\";\nimport NormalizedGameEntity from \"../interfaces/NormalizedGameEntity\";\n\nexport interface EntitiesState {\n  users: Record<string, NormalizedUserEntity>;\n  games: Record<string, NormalizedGameEntity>;\n}\n\nconst initialState: EntitiesState = {\n  users: {},\n  games: {},\n};\n\nconst getNormalizedDataReducer = (\n  state: EntitiesState,\n  action: PayloadAction<{\n    entities: Partial<EntitiesState>;\n  }>\n) => {\n  Object.assign(state.users, action.payload.entities.users);\n  Object.assign(state.games, action.payload.entities.games);\n};\n\nconst entitiesSlice = createSlice({\n  name: \"entities\",\n  initialState,\n  reducers: {\n    updateGameSuccess: getNormalizedDataReducer,\n    createGameSuccess: getNormalizedDataReducer,\n    makeMoveRequest() {},\n    makeMoveSuccess: getNormalizedDataReducer,\n    makeMoveError(_state, _action: PayloadAction<string>) {},\n  },\n  extraReducers: {\n    [getOngoingGamesSuccess.toString()]: getNormalizedDataReducer,\n    [getSingleGameSuccess.toString()]: getNormalizedDataReducer,\n  },\n});\n\nexport const {\n  updateGameSuccess,\n  createGameSuccess,\n  makeMoveRequest,\n  makeMoveSuccess,\n  makeMoveError,\n} = entitiesSlice.actions;\n\nexport default entitiesSlice.reducer;\n\nexport const watchGames = (): AppThunk<void> => (dispatch) => {\n  ioClient.socket.on(\"game\", (subscriptionData: SubscriptionData) => {\n    if (subscriptionData.verb === \"updated\") {\n      const game = {\n        ...subscriptionData.previous,\n        ...subscriptionData.data,\n      };\n\n      const normalizedGame = normalize(game, gameSchema);\n\n      dispatch(updateGameSuccess(normalizedGame));\n    } else if (subscriptionData.verb === \"created\") {\n      const normalizedGame = normalize(subscriptionData.data, gameSchema);\n\n      dispatch(createGameSuccess(normalizedGame));\n    }\n  });\n};\n\nexport const makeMove = (\n  gameId: number,\n  move: string\n): AppThunk<Promise<Game>> => (dispatch) => {\n  dispatch(makeMoveRequest());\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      `/api/v1/board/game/${gameId}/move/${move}`,\n      {},\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedGame = normalize(body as Game, gameSchema);\n\n          dispatch(makeMoveSuccess(normalizedGame));\n          resolve(body as Game);\n        } else {\n          dispatch(makeMoveError(body as string));\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { loginSuccess, registerSuccess } from \"./currentUserSlice\";\n\ninterface AuthModalState {\n  isAuthModalVisible: boolean;\n}\n\nconst initialState: AuthModalState = {\n  isAuthModalVisible: false,\n};\n\nconst authModalSlice = createSlice({\n  name: \"authModal\",\n  initialState,\n  reducers: {\n    showAuthModal(state) {\n      state.isAuthModalVisible = true;\n    },\n    hideAuthModal(state) {\n      state.isAuthModalVisible = false;\n    },\n  },\n  extraReducers: {\n    [loginSuccess.toString()]: (state) => {\n      state.isAuthModalVisible = false;\n    },\n    [registerSuccess.toString()]: (state) => {\n      state.isAuthModalVisible = false;\n    },\n  },\n});\n\nexport const { showAuthModal, hideAuthModal } = authModalSlice.actions;\n\nexport default authModalSlice.reducer;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { JWR } from \"sails.io.js\";\nimport { normalize } from \"normalizr\";\nimport { AppThunk } from \"../../app/store\";\nimport Game from \"../../interfaces/Game\";\nimport ioClient from \"../../services/ioClient\";\nimport gameSchema from \"../schemas/gameSchema\";\nimport ItemErrorPayload from \"../interfaces/ItemErrorPayload\";\nimport NormalizedData from \"../interfaces/NormalizedData\";\n\ninterface SingleGameState {\n  [gameId: string]: {\n    isLoading: boolean;\n    error: string | null;\n  };\n}\n\nconst initialState: SingleGameState = {};\n\nconst singleGameSlice = createSlice({\n  name: \"singleGame\",\n  initialState,\n  reducers: {\n    getSingleGameRequest(state, action: PayloadAction<number>) {\n      state[action.payload] = {\n        isLoading: true,\n        error: null,\n      };\n    },\n    getSingleGameSuccess(state, action: PayloadAction<NormalizedData<number>>) {\n      state[action.payload.result] = {\n        isLoading: false,\n        error: null,\n      };\n    },\n    getSingleGameError(state, action: PayloadAction<ItemErrorPayload>) {\n      state[action.payload.itemId] = {\n        isLoading: false,\n        error: action.payload.error,\n      };\n    },\n  },\n  extraReducers: {},\n});\n\nexport const {\n  getSingleGameRequest,\n  getSingleGameSuccess,\n  getSingleGameError,\n} = singleGameSlice.actions;\n\nexport default singleGameSlice.reducer;\n\nexport const fetchGame = (id: number): AppThunk<Promise<Game>> => (\n  dispatch\n) => {\n  dispatch(getSingleGameRequest(id));\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(`/game/${id}`, (body: unknown, jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        const normalizedGame = normalize(body as Game, gameSchema);\n        dispatch(getSingleGameSuccess(normalizedGame));\n        resolve(body as Game);\n      } else {\n        dispatch(\n          getSingleGameError({\n            itemId: id,\n            error: body as string,\n          })\n        );\n        reject(jwr);\n      }\n    });\n  });\n};\n"],"sourceRoot":""}