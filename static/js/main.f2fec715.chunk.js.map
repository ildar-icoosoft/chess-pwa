{"version":3,"sources":["utils/calculateGameFen.ts","components/GamePreviewsList.tsx","services/ioClient.ts","services/api.ts","containers/OngoingGamesContainer.reducer.ts","containers/OngoingGamesContainer.tsx","pages/HomePage.tsx","components/SingleGame.tsx","containers/SingleGameContainer.tsx","pages/GamePage.tsx","App.tsx","serviceWorker.ts","index.tsx","components/GamePreviewsList.module.scss"],"names":["game","initialFen","moves","chess","Chess","split","forEach","move","sloppy","fen","GamePreviewsList","games","className","css","grid","map","item","calculateGameFen","to","id","key","cell","position","viewOnly","width","ioClient","sailsIOClient","socketIOClient","sails","url","watchGames","cb","socket","on","msg","reducer","createReducer","GET_GAMES","state","payload","UPDATE_GAME","subscriptionData","previous","data","index","findIndex","itemIndex","CREATE_GAME","OngoingGamesContainer","useReducer","dispatch","useEffect","mounted","Promise","resolve","reject","get","body","jwr","statusCode","then","res","type","verb","HomePage","SingleGame","SingleGameContainer","useState","setGame","getGame","catch","GamePage","useParams","Number","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.f2fec715.chunk.js","sourcesContent":["import { Chess } from \"chess.js\";\nimport Game from \"../interfaces/Game\";\n\nconst startPositionFen =\n  \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n\nexport default (game: Game): string => {\n  let { initialFen } = game;\n  if (initialFen === \"startpos\") {\n    initialFen = startPositionFen;\n  }\n\n  if (!game.moves) {\n    return initialFen;\n  }\n\n  const chess = new Chess(initialFen);\n\n  game.moves.split(\" \").forEach((move) => {\n    chess.move(move, {\n      sloppy: true,\n    });\n  });\n\n  return chess.fen();\n};\n","import React, { FC } from \"react\";\nimport { Board } from \"ii-react-chessboard\";\nimport { Link } from \"react-router-dom\";\nimport Game from \"../interfaces/Game\";\nimport css from \"./GamePreviewsList.module.scss\";\nimport calculateGameFen from \"../utils/calculateGameFen\";\n\nexport interface GamePreviewsListProps {\n  games?: Game[];\n}\n\nexport const GamePreviewsList: FC<GamePreviewsListProps> = ({ games = [] }) => {\n  return (\n    <div className={css.grid}>\n      {games.map((item) => {\n        const fen: string = calculateGameFen(item);\n\n        return (\n          <Link to={`/game/${item.id}`} key={item.id}>\n            <div className={css.cell}>\n              <Board position={fen} viewOnly={false} width={240} />\n            </div>\n          </Link>\n        );\n      })}\n    </div>\n  );\n};\n","import socketIOClient from \"socket.io-client\";\nimport sailsIOClient from \"sails.io.js\";\n\nconst ioClient = sailsIOClient(socketIOClient);\n\nioClient.sails.url = \"http://localhost:1337\";\n\nexport default ioClient;\n","import { JWR } from \"sails.io.js\";\nimport Game from \"../interfaces/Game\";\nimport ioClient from \"./ioClient\";\nimport { SubscriptionData } from \"../interfaces/SubscriptionData\";\n\nexport const getOngoingGames = (): Promise<Game[]> => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(\"/api/v1/game/playing\", (body: Game[], jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        resolve(body);\n      } else {\n        reject(jwr);\n      }\n    });\n  });\n};\n\nexport const watchGames = (cb: (data: SubscriptionData) => void): void => {\n  ioClient.socket.on(\"game\", (msg: SubscriptionData) => {\n    cb(msg);\n  });\n};\n\nexport const getGame = (id: number): Promise<Game> => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(`/game/${id}`, (body: Game, jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        resolve(body);\n      } else {\n        reject(jwr);\n      }\n    });\n  });\n};\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { findIndex } from \"lodash\";\nimport Game from \"../interfaces/Game\";\nimport { SubscriptionData } from \"../interfaces/SubscriptionData\";\n\nexport interface State {\n  games: Game[];\n}\n\nexport type Action =\n  | { type: \"GET_GAMES\"; payload: Game[] }\n  | { type: \"UPDATE_GAME\"; payload: SubscriptionData }\n  | { type: \"CREATE_GAME\"; payload: SubscriptionData };\n\nconst getGames = (state: State, { payload }: Action): State => ({\n  games: payload as Game[],\n});\n\nconst updateGame = (state: State, { payload }: Action): State => {\n  const subscriptionData = payload as SubscriptionData;\n\n  const game = {\n    ...subscriptionData.previous,\n    ...subscriptionData.data,\n  };\n\n  const index: number = findIndex(state.games, {\n    id: subscriptionData.id,\n  });\n\n  if (index !== -1) {\n    return {\n      games: state.games.map((item, itemIndex) => {\n        if (itemIndex === index) {\n          return game;\n        }\n        return item;\n      }),\n    };\n  }\n\n  return {\n    games: [...state.games, game],\n  };\n};\n\nconst createGame = (state: State, { payload }: Action): State => ({\n  games: [...state.games, (payload as SubscriptionData).data],\n});\n\nexport const reducer = createReducer<State>(\n  {\n    games: [],\n  },\n  {\n    GET_GAMES: getGames,\n    UPDATE_GAME: updateGame,\n    CREATE_GAME: createGame,\n  }\n);\n","/* eslint-disable import/prefer-default-export */\n\nimport React, { FC, useEffect, useReducer } from \"react\";\nimport { GamePreviewsList } from \"../components/GamePreviewsList\";\nimport { getOngoingGames, watchGames } from \"../services/api\";\nimport { reducer } from \"./OngoingGamesContainer.reducer\";\n\nexport const OngoingGamesContainer: FC<unknown> = () => {\n  const [state, dispatch] = useReducer(reducer, {\n    games: [],\n  });\n\n  useEffect(() => {\n    let mounted = true;\n\n    getOngoingGames().then((res) => {\n      if (!mounted) {\n        return;\n      }\n\n      dispatch({ type: \"GET_GAMES\", payload: res });\n    });\n\n    watchGames((subscriptionData) => {\n      if (!mounted) {\n        return;\n      }\n\n      if (subscriptionData.verb === \"updated\") {\n        dispatch({ type: \"UPDATE_GAME\", payload: subscriptionData });\n      } else if (subscriptionData.verb === \"created\") {\n        dispatch({ type: \"CREATE_GAME\", payload: subscriptionData });\n      }\n    });\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return <GamePreviewsList games={state.games} />;\n};\n","import React, { FC } from \"react\";\nimport { OngoingGamesContainer } from \"../containers/OngoingGamesContainer\";\n\nconst HomePage: FC<unknown> = () => {\n  return <OngoingGamesContainer />;\n};\n\nexport default HomePage;\n","import React, { FC } from \"react\";\nimport { Board } from \"ii-react-chessboard\";\nimport Game from \"../interfaces/Game\";\nimport calculateGameFen from \"../utils/calculateGameFen\";\n\nexport interface SingleGameProps {\n  game?: Game;\n}\n\nexport const SingleGame: FC<SingleGameProps> = ({ game }) => {\n  if (!game) {\n    return null;\n  }\n\n  const fen: string = calculateGameFen(game);\n\n  return <Board position={fen} />;\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { getGame, watchGames } from \"../services/api\";\nimport Game from \"../interfaces/Game\";\nimport { SingleGame } from \"../components/SingleGame\";\n\nexport interface GameContainerProps {\n  id: number;\n}\n\nexport const SingleGameContainer: FC<GameContainerProps> = ({ id }) => {\n  const [game, setGame] = useState<Game | null>(null);\n\n  useEffect(() => {\n    let mounted = true;\n\n    getGame(id)\n      .then((res) => {\n        if (!mounted) {\n          return;\n        }\n\n        setGame(res);\n      })\n      .catch(() => {});\n\n    watchGames((subscriptionData) => {\n      if (!mounted) {\n        return;\n      }\n\n      if (subscriptionData.id === id) {\n        if (subscriptionData.verb === \"updated\") {\n          setGame({\n            ...subscriptionData.previous,\n            ...subscriptionData.data,\n          });\n        }\n      }\n    });\n\n    return () => {\n      mounted = false;\n    };\n  }, [id]);\n\n  if (game) {\n    return <SingleGame game={game} />;\n  }\n  return null;\n};\n","import React, { FC } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { SingleGameContainer } from \"../containers/SingleGameContainer\";\n\nconst GamePage: FC<unknown> = () => {\n  const { id } = useParams();\n\n  return <SingleGameContainer id={Number(id)} />;\n};\n\nexport default GamePage;\n","import React, { FC } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport GamePage from \"./pages/GamePage\";\n\nconst App: FC = () => {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/game/:id\">\n            <GamePage />\n          </Route>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"GamePreviewsList_grid__2dFgV\"};"],"sourceRoot":""}