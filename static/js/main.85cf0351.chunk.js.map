{"version":3,"sources":["features/game-clock/gameClockSlice.ts","features/ongoing-games/GamePreviewsList.module.scss","normalizr/schemas/gameSchema.ts","services/ioClient.ts","features/current-user/currentUserSlice.ts","features/ongoing-games/GamePreviewsList.tsx","features/ongoing-games/OngoingGamesContainer.tsx","features/challenge-ai-modal/ChallengeAiForm.tsx","features/challenge-ai-modal/ChallengeAiFormContainer.tsx","pages/HomePage.tsx","features/single-game/GameMeta.tsx","utils/getGameStatusText.ts","features/single-game/GameClock.tsx","features/single-game/GameMoves.tsx","features/single-game/GameControlPanelUserName.tsx","features/single-game/GameControlPanelTopToolbar.tsx","features/single-game/GameControlPanelBottomToolbar.tsx","features/single-game/GameControlPanel.tsx","features/single-game/SingleGame.tsx","features/single-game/SingleGameContainer.tsx","pages/GamePage.tsx","features/auth-modal/LoginForm.tsx","features/auth-modal/RegistrationForm.tsx","features/auth-modal/LoginTabsContainer.tsx","app/App.tsx","serviceWorker.ts","features/entities/entitiesSlice.ts","app/rootReducer.ts","app/store.ts","index.tsx","normalizr/schemas/userSchema.ts","features/challenge-ai-modal/ChallengeAiForm.module.scss","features/challenge/challengeSlice.ts","utils/makeChessInstance.ts","features/data-subscription/dataSubscriptionSlice.ts","features/ongoing-games/ongoingGamesSlice.ts","features/single-game/singleGameSlice.ts","features/auth-modal/authModalSlice.ts","features/challenge-ai-modal/challengeAiModalSlice.ts","features/move/moveSlice.ts"],"names":["gameClockSlice","createSlice","name","initialState","reducers","oneSecondPassed","extraReducers","actions","startGameClock","dispatch","setInterval","module","exports","gameSchema","schema","Entity","white","userSchema","black","ioClient","sailsIOClient","socketIOClient","sails","url","currentUserSlice","userId","isLoading","error","getCurrentUserRequest","state","getCurrentUserSuccess","action","payload","result","getCurrentUserError","loginSuccess","registerSuccess","logoutSuccess","fetchCurrentUser","Promise","resolve","reject","socket","get","body","jwr","statusCode","normalizedUser","normalize","login","data","put","rememberMe","emailAddress","email","password","register","post","fullName","confirmPassword","agreed","logout","GamePreviewsList","games","className","css","grid","map","item","fen","makeChessInstance","to","id","key","cell","position","viewOnly","width","OngoingGamesContainer","useDispatch","items","useSelector","denormalize","ongoingGames","entities","useEffect","fetchOngoingGames","ChallengeAiForm","onSubmit","initialValues","level","color","clockLimit","clockIncrement","values","formikHelpers","handleChange","handleBlur","handleSubmit","isSubmitting","status","setStatus","setFieldValue","Form","noValidate","e","onChange","Alert","variant","Group","Label","Control","type","onBlur","value","min","max","step","Row","ButtonGroup","cx","levelButtonGroup","Button","onClick","colorSubmits","disabled","title","colorSubmitsButton","blackButton","randomButton","whiteButton","ChallengeAiFormContainer","history","useHistory","challengeAiAndOpenGamePage","useCallback","challengeAi","then","game","push","catch","err","HomePage","isChallengeAiModalVisible","challengeAiModal","Modal","show","onHide","hideChallengeAiModal","animation","Header","closeButton","Title","Body","showChallengeAiModal","GameMeta","winner","getGameStatusText","data-testid","aiLevel","GameClock","time","formattedTime","moment","startOf","milliseconds","format","formatMove","move","from","GameMoves","onRewindToMove","movesHistory","verbose","movesPairs","_chunk","makeRewindToMoveHandler","moveIndex","pair","index","role","GameControlPanelUserName","GameControlPanelTopToolbar","onFlipBoard","onRewindToPrevMove","onRewindToNextMove","onRewindToFirstMove","onRewindToLastMove","handleFlipBoard","handleRewindToPrevMove","handleRewindToNextMove","handleRewindToFirstMove","handleRewindToLastMove","GameControlPanelBottomToolbar","onAbortGame","onOfferDraw","onResignGame","handleAbortGame","handleOfferDraw","handleResignGame","GameControlPanel","orientation","btime","wtime","SingleGame","currentUser","onMove","movableColor","chess","check","in_check","turnColor","turn","PieceColor","WHITE","BLACK","validMoves","getValidMoves","lastMoveSquares","length","lastMove","allowMarkers","clickable","draggable","SingleGameContainer","fetchGame","makeMove","GamePage","useParams","Number","loginSchema","Yup","shape","required","LoginForm","validationSchema","errors","touched","placeholder","isValid","isInvalid","Feedback","registrationSchema","equals","RegistrationForm","LoginTabsContainer","doLogin","React","doSignUp","Tabs","transition","Tab","eventKey","App","isAuthModalVisible","authModal","watchGames","showAuthModal","hideAuthModal","path","Boolean","window","location","hostname","match","getNormalizedDataReducer","Object","assign","users","entitiesSlice","getOngoingGamesSuccess","getSingleGameSuccess","challengeAiSuccess","updateGameBySubscription","createGameBySubscription","makeMoveRequest","gameId","moves","trim","makeMoveSuccess","keys","forEach","timePropName","rootReducer","combineReducers","authModalReducer","challengeAiModalReducer","currentUserReducer","ongoingGamesReducer","entitiesReducer","singleGame","singleGameReducer","store","configureStore","reducer","require","default","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message","challengeSlice","challengeAiRequest","_state","_action","challengeAiError","normalizedGame","initialFen","Chess","split","sloppy","Error","dataSubscriptionSlice","on","subscriptionData","verb","previous","ongoingGamesSlice","getOngoingGamesRequest","getOngoingGamesError","includes","unshift","normalizedGames","singleGameSlice","getSingleGameRequest","getSingleGameError","itemId","authModalSlice","challengeAiModalSlice","moveSlice","makeMoveError"],"mappings":"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","file":"static/js/main.85cf0351.chunk.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { AppThunk } from \"../../app/store\";\n\ninterface GameClockState {}\n\nconst initialState: GameClockState = {};\n\nconst gameClockSlice = createSlice({\n  name: \"gameClock\",\n  initialState,\n  reducers: {\n    oneSecondPassed() {},\n  },\n  extraReducers: {},\n});\n\nexport const { oneSecondPassed } = gameClockSlice.actions;\n\nexport default gameClockSlice.reducer;\n\nexport const startGameClock = (): AppThunk<void> => (dispatch) => {\n  setInterval(() => {\n    dispatch(oneSecondPassed());\n  }, 1000);\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"GamePreviewsList_grid__3uPGL\"};","import { schema } from \"normalizr\";\nimport userSchema from \"./userSchema\";\n\nconst gameSchema = new schema.Entity(\"games\", {\n  white: userSchema,\n  black: userSchema,\n});\n\nexport default gameSchema;\n","import socketIOClient from \"socket.io-client\";\nimport sailsIOClient from \"sails.io.js\";\n\nconst ioClient = sailsIOClient(socketIOClient);\n\nioClient.sails.url = \"http://localhost:1337\";\n\nexport default ioClient;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { normalize } from \"normalizr\";\nimport { JWR } from \"sails.io.js\";\nimport { AppThunk } from \"../../app/store\";\nimport ioClient from \"../../services/ioClient\";\nimport User from \"../../interfaces/User\";\nimport LoginData from \"../../interfaces/LoginData\";\nimport SignUpData from \"../../interfaces/SignUpData\";\nimport userSchema from \"../../normalizr/schemas/userSchema\";\nimport NormalizedData from \"../../normalizr/interfaces/NormalizedData\";\n\ninterface CurrentUserState {\n  userId: number | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: CurrentUserState = {\n  userId: null,\n  isLoading: true,\n  error: null,\n};\n\nconst currentUserSlice = createSlice({\n  name: \"currentUser\",\n  initialState,\n  reducers: {\n    getCurrentUserRequest(state) {\n      state.isLoading = true;\n      state.error = null;\n    },\n    getCurrentUserSuccess(\n      state,\n      action: PayloadAction<NormalizedData<number> | null>\n    ) {\n      state.userId = action.payload ? action.payload.result : null;\n      state.isLoading = false;\n      state.error = null;\n    },\n    getCurrentUserError(state, action: PayloadAction<string>) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    loginSuccess(state, action: PayloadAction<NormalizedData<number>>) {\n      state.userId = action.payload.result;\n    },\n    registerSuccess(state, action: PayloadAction<NormalizedData<number>>) {\n      state.userId = action.payload.result;\n    },\n    logoutSuccess(state) {\n      state.userId = null;\n    },\n  },\n});\n\nexport const {\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n  loginSuccess,\n  registerSuccess,\n  logoutSuccess,\n} = currentUserSlice.actions;\n\nexport default currentUserSlice.reducer;\n\nexport const fetchCurrentUser = (): AppThunk<Promise<User | null>> => (\n  dispatch\n) => {\n  dispatch(getCurrentUserRequest());\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(\"/api/v1/account/me\", (body: unknown, jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        const normalizedUser = normalize(body as User, userSchema);\n\n        dispatch(getCurrentUserSuccess(normalizedUser));\n        resolve(body as User);\n      } else if (jwr.statusCode === 401) {\n        dispatch(getCurrentUserSuccess(null));\n        resolve(null);\n      } else {\n        dispatch(getCurrentUserError(body as string));\n        reject(jwr);\n      }\n    });\n  });\n};\n\nexport const login = (data: LoginData): AppThunk<Promise<User>> => (\n  dispatch\n) => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.put(\n      \"/api/v1/entrance/login\",\n      {\n        rememberMe: true,\n        emailAddress: data.email,\n        password: data.password,\n      },\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedUser = normalize(body as User, userSchema);\n\n          dispatch(loginSuccess(normalizedUser));\n          resolve(body as User);\n        } else {\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n\nexport const register = (data: SignUpData): AppThunk<Promise<User>> => (\n  dispatch\n) => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      \"/api/v1/entrance/signup\",\n      {\n        fullName: data.fullName,\n        emailAddress: data.email,\n        password: data.password,\n        confirmPassword: data.password,\n        agreed: true,\n      },\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedUser = normalize(body as User, userSchema);\n\n          dispatch(registerSuccess(normalizedUser));\n          resolve(body as User);\n        } else {\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n\nexport const logout = (): AppThunk<Promise<void>> => (dispatch) => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      \"/api/v1/account/logout\",\n      {},\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          dispatch(logoutSuccess());\n          resolve();\n        } else {\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n","import React, { FC } from \"react\";\nimport { Board } from \"ii-react-chessboard\";\nimport { Link } from \"react-router-dom\";\nimport Game from \"../../interfaces/Game\";\nimport css from \"./GamePreviewsList.module.scss\";\nimport makeChessInstance from \"../../utils/makeChessInstance\";\n\nexport interface GamePreviewsListProps {\n  games?: Game[];\n}\n\nexport const GamePreviewsList: FC<GamePreviewsListProps> = ({ games = [] }) => {\n  return (\n    <div className={css.grid}>\n      {games.map((item) => {\n        const fen: string = makeChessInstance(item).fen();\n\n        return (\n          <Link to={`/game/${item.id}`} key={item.id}>\n            <div className={css.cell}>\n              <Board position={fen} viewOnly={false} width={240} />\n            </div>\n          </Link>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { FC, useEffect } from \"react\";\nimport { denormalize } from \"normalizr\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GamePreviewsList } from \"./GamePreviewsList\";\nimport { RootState } from \"../../app/rootReducer\";\nimport { fetchOngoingGames } from \"./ongoingGamesSlice\";\nimport gameSchema from \"../../normalizr/schemas/gameSchema\";\n\nconst OngoingGamesContainer: FC<unknown> = () => {\n  const dispatch = useDispatch();\n\n  const items = useSelector((state: RootState) =>\n    denormalize(state.ongoingGames.items, [gameSchema], state.entities)\n  );\n\n  useEffect(() => {\n    dispatch(fetchOngoingGames());\n  }, [dispatch]);\n\n  return <GamePreviewsList games={items} />;\n};\n\nexport default OngoingGamesContainer;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Formik, FormikHelpers } from \"formik\";\nimport React, { FC, FormEvent } from \"react\";\nimport cx from \"classnames\";\nimport { Alert, Button, ButtonGroup, Form, Row } from \"react-bootstrap\";\nimport { ChallengeAiData } from \"../../interfaces/ChallengeAiData\";\nimport css from \"./ChallengeAiForm.module.scss\";\n\nexport interface ChallengeAiFormProps {\n  onSubmit?(\n    values: ChallengeAiData,\n    formikHelpers: FormikHelpers<ChallengeAiData>\n  ): void | Promise<any>;\n}\n\nexport const ChallengeAiForm: FC<ChallengeAiFormProps> = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{\n        level: 3,\n        color: \"\",\n        clockLimit: 300,\n        clockIncrement: 3,\n      }}\n      onSubmit={(values, formikHelpers): Promise<any> | void => {\n        if (onSubmit) {\n          return onSubmit(\n            values as ChallengeAiData,\n            formikHelpers as FormikHelpers<ChallengeAiData>\n          );\n        }\n        return undefined;\n      }}\n    >\n      {({\n        values,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        status,\n        setStatus,\n        setFieldValue,\n        /* and other goodies */\n      }) => (\n        <Form\n          noValidate\n          onSubmit={(e) => handleSubmit(e as FormEvent<HTMLFormElement>)}\n          onChange={() => setStatus(\"\")}\n        >\n          {!!status && <Alert variant=\"danger\">{status}</Alert>}\n          <fieldset>\n            <Form.Group>\n              <Form.Label>\n                Minutes per side: {values.clockLimit / 60}\n              </Form.Label>\n              <Form.Control\n                type=\"range\"\n                name=\"clockLimit\"\n                onBlur={handleBlur}\n                value={values.clockLimit}\n                onChange={handleChange}\n                min=\"60\"\n                max=\"1800\"\n                step=\"60\"\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>\n                Increment in seconds: {values.clockIncrement}\n              </Form.Label>\n              <Form.Control\n                type=\"range\"\n                name=\"clockIncrement\"\n                onBlur={handleBlur}\n                value={values.clockIncrement}\n                onChange={handleChange}\n                min=\"0\"\n                max=\"60\"\n              />\n            </Form.Group>\n          </fieldset>\n\n          <div className=\"text-center\">Level</div>\n\n          <Row>\n            <ButtonGroup className={cx(\"mx-auto\", css.levelButtonGroup)}>\n              {[1, 2, 3, 4].map((level) => (\n                <Button\n                  key={level}\n                  type=\"button\"\n                  variant={level === values.level ? \"dark\" : \"light\"}\n                  onClick={() => setFieldValue(\"level\", level)}\n                >\n                  {level}\n                </Button>\n              ))}\n            </ButtonGroup>\n          </Row>\n\n          <div className=\"text-center\">A.I. Level: {values.level}</div>\n\n          <div className={css.colorSubmits}>\n            <button\n              disabled={isSubmitting}\n              type=\"submit\"\n              title=\"Black\"\n              className={cx(css.colorSubmitsButton, css.blackButton)}\n              onClick={() => setFieldValue(\"color\", \"black\")}\n            >\n              <i />\n            </button>\n            <button\n              disabled={isSubmitting}\n              type=\"submit\"\n              title=\"Random side\"\n              className={cx(css.colorSubmitsButton, css.randomButton)}\n              onClick={() => setFieldValue(\"color\", \"random\")}\n            >\n              <i />\n            </button>\n            <button\n              disabled={isSubmitting}\n              type=\"submit\"\n              title=\"White\"\n              className={cx(css.colorSubmitsButton, css.whiteButton)}\n              onClick={() => setFieldValue(\"color\", \"white\")}\n            >\n              <i />\n            </button>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import React, { FC, useCallback } from \"react\";\nimport { FormikHelpers } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { ChallengeAiForm } from \"./ChallengeAiForm\";\nimport { AppDispatch } from \"../../app/store\";\nimport { challengeAi } from \"../challenge/challengeSlice\";\nimport { ChallengeAiData } from \"../../interfaces/ChallengeAiData\";\nimport Game from \"../../interfaces/Game\";\n\nconst ChallengeAiFormContainer: FC<unknown> = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const history = useHistory();\n\n  const challengeAiAndOpenGamePage = useCallback(\n    (\n      values: ChallengeAiData,\n      formikHelpers: FormikHelpers<ChallengeAiData>\n    ) => {\n      return dispatch(challengeAi(values))\n        .then((game: Game) => {\n          history.push(`/game/${game.id}`);\n        })\n        .catch((err) => {\n          if (err.statusCode === 401) {\n            formikHelpers.setStatus(\"You must log in to play with computer\");\n          } else {\n            formikHelpers.setStatus(\"Internal server error\");\n          }\n        });\n    },\n    [dispatch, history]\n  );\n\n  return <ChallengeAiForm onSubmit={challengeAiAndOpenGamePage} />;\n};\n\nexport default ChallengeAiFormContainer;\n","import React, { FC } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport OngoingGamesContainer from \"../features/ongoing-games/OngoingGamesContainer\";\nimport ChallengeAiFormContainer from \"../features/challenge-ai-modal/ChallengeAiFormContainer\";\n\nimport { RootState } from \"../app/rootReducer\";\nimport {\n  hideChallengeAiModal,\n  showChallengeAiModal,\n} from \"../features/challenge-ai-modal/challengeAiModalSlice\";\nimport { AppDispatch } from \"../app/store\";\n\nconst HomePage: FC<unknown> = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const { isChallengeAiModalVisible } = useSelector(\n    (state: RootState) => state.challengeAiModal\n  );\n\n  return (\n    <>\n      <Modal\n        show={isChallengeAiModalVisible}\n        onHide={() => dispatch(hideChallengeAiModal())}\n        animation={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Play with the computer</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <ChallengeAiFormContainer />\n        </Modal.Body>\n      </Modal>\n      <Button\n        variant=\"primary\"\n        onClick={() => dispatch(showChallengeAiModal())}\n      >\n        Play with the computer\n      </Button>\n      <OngoingGamesContainer />\n    </>\n  );\n};\n\nexport default HomePage;\n","import React, { FC } from \"react\";\nimport Game from \"../../interfaces/Game\";\nimport getGameStatusText from \"../../utils/getGameStatusText\";\n\nexport interface GameMetaProps {\n  game?: Game;\n}\n\nexport const GameMeta: FC<GameMetaProps> = ({ game }) => {\n  if (!game) {\n    return null;\n  }\n\n  return (\n    <>\n      <div>{getGameStatusText(game)}</div>\n      <div>\n        {game.clockLimit / 60} + {game.clockIncrement}\n      </div>\n      <div data-testid=\"white-user\">\n        White: {game.white ? game.white.fullName : `AI level ${game.aiLevel}`}\n      </div>\n      <div data-testid=\"black-user\">\n        Black: {game.black ? game.black.fullName : `AI level ${game.aiLevel}`}\n      </div>\n    </>\n  );\n};\n","import Game from \"../interfaces/Game\";\n\nexport default (game: Game): string => {\n  if (game.status === \"outoftime\") {\n    if (game.winner === \"white\") {\n      return \"Time out • White is victorious\";\n    }\n    if (game.winner === \"black\") {\n      return \"Time out • Black is victorious\";\n    }\n  }\n\n  if (game.status === \"resign\") {\n    if (game.winner === \"black\") {\n      return \"White resigned • Black is victorious\";\n    }\n    if (game.winner === \"white\") {\n      return \"Black resigned • White is victorious\";\n    }\n  }\n\n  if (game.status === \"aborted\") {\n    return \"Game aborted\";\n  }\n\n  if (game.status === \"mate\") {\n    if (game.winner === \"white\") {\n      return \"Checkmate • White is victorious\";\n    }\n    if (game.winner === \"black\") {\n      return \"Checkmate • Black is victorious\";\n    }\n  }\n\n  if (game.status === \"draw\") {\n    return \"Draw\";\n  }\n\n  if (game.status === \"stalemate\") {\n    return \"Stalemate\";\n  }\n\n  return \"Playing right now\";\n};\n","import React, { FC } from \"react\";\nimport moment from \"moment\";\n\nexport interface GameClockProps {\n  time?: number; // in msec\n}\n\nexport const GameClock: FC<GameClockProps> = ({ time = 0 }) => {\n  const formattedTime = moment()\n    .startOf(\"day\")\n    .milliseconds(time)\n    .format(\"mm : ss\");\n\n  return <div data-testid=\"time\">{formattedTime}</div>;\n};\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable jsx-a11y/click-events-have-key-events */ // @todo\n/* eslint-disable jsx-a11y/interactive-supports-focus */ // @todo\n\nimport React, { FC } from \"react\";\nimport { chunk as _chunk } from \"lodash\";\nimport { Move } from \"chess.js\";\nimport Game from \"../../interfaces/Game\";\nimport makeChessInstance from \"../../utils/makeChessInstance\";\n\nexport interface GameMovesProps {\n  game?: Game;\n  onRewindToMove?(moveIndex: number): void;\n}\n\nconst formatMove = (move: Move): string => {\n  return `${move.from}${move.to}`;\n};\n\nexport const GameMoves: FC<GameMovesProps> = ({ game, onRewindToMove }) => {\n  if (!game) {\n    return null;\n  }\n\n  const chess = makeChessInstance(game);\n\n  const movesHistory = chess.history({ verbose: true });\n\n  const movesPairs = _chunk(movesHistory, 2);\n\n  const makeRewindToMoveHandler = (moveIndex: number) => {\n    return () => {\n      if (onRewindToMove) {\n        onRewindToMove(moveIndex);\n      }\n    };\n  };\n\n  return (\n    <table>\n      <tbody>\n        {movesPairs.map((pair, index) => (\n          <tr key={`move-${index}`}>\n            <td>{index + 1}</td>\n            <td>\n              <div\n                data-testid={`move-${index * 2}`}\n                onClick={makeRewindToMoveHandler(index * 2)}\n                role=\"button\"\n              >\n                {formatMove(pair[0])}\n              </div>\n            </td>\n            <td>\n              {pair[1] && (\n                <div\n                  data-testid={`move-${index * 2 + 1}`}\n                  onClick={makeRewindToMoveHandler(index * 2 + 1)}\n                  role=\"button\"\n                >\n                  {formatMove(pair[1])}\n                </div>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\n\nimport React, { FC } from \"react\";\nimport Game from \"../../interfaces/Game\";\nimport { PieceColor } from \"../../types/PieceColor\";\n\nexport interface GameControlPanelUserNameProps {\n  game?: Game;\n  color?: PieceColor;\n}\n\nexport const GameControlPanelUserName: FC<GameControlPanelUserNameProps> = ({\n  game,\n  color = \"white\",\n}) => {\n  if (!game) {\n    return null;\n  }\n\n  return (\n    <div>\n      {game[color] ? game[color]!.fullName : `AI level ${game.aiLevel}`}\n    </div>\n  );\n};\n","import React, { FC, useCallback } from \"react\";\n\nexport interface GameControlPanelTopToolbarProps {\n  onFlipBoard?(): void;\n  onRewindToPrevMove?(): void;\n  onRewindToNextMove?(): void;\n  onRewindToFirstMove?(): void;\n  onRewindToLastMove?(): void;\n}\n\nexport const GameControlPanelTopToolbar: FC<GameControlPanelTopToolbarProps> = ({\n  onFlipBoard,\n  onRewindToPrevMove,\n  onRewindToNextMove,\n  onRewindToFirstMove,\n  onRewindToLastMove,\n}) => {\n  const handleFlipBoard = useCallback(() => {\n    if (onFlipBoard) {\n      onFlipBoard();\n    }\n  }, [onFlipBoard]);\n  const handleRewindToPrevMove = useCallback(() => {\n    if (onRewindToPrevMove) {\n      onRewindToPrevMove();\n    }\n  }, [onRewindToPrevMove]);\n  const handleRewindToNextMove = useCallback(() => {\n    if (onRewindToNextMove) {\n      onRewindToNextMove();\n    }\n  }, [onRewindToNextMove]);\n  const handleRewindToFirstMove = useCallback(() => {\n    if (onRewindToFirstMove) {\n      onRewindToFirstMove();\n    }\n  }, [onRewindToFirstMove]);\n  const handleRewindToLastMove = useCallback(() => {\n    if (onRewindToLastMove) {\n      onRewindToLastMove();\n    }\n  }, [onRewindToLastMove]);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        data-testid=\"flip-board-btn\"\n        onClick={handleFlipBoard}\n      >\n        Flip board\n      </button>\n      <button\n        type=\"button\"\n        data-testid=\"rewind-to-prev-move-btn\"\n        onClick={handleRewindToPrevMove}\n      >\n        Rewind to prev move\n      </button>\n      <button\n        type=\"button\"\n        data-testid=\"rewind-to-first-move-btn\"\n        onClick={handleRewindToFirstMove}\n      >\n        Rewind to first move\n      </button>\n      <button\n        type=\"button\"\n        data-testid=\"rewind-to-last-move-btn\"\n        onClick={handleRewindToLastMove}\n      >\n        Rewind to last move\n      </button>\n      <button\n        type=\"button\"\n        data-testid=\"rewind-to-next-move-btn\"\n        onClick={handleRewindToNextMove}\n      >\n        Rewind to next move\n      </button>\n    </>\n  );\n};\n","import React, { FC, useCallback } from \"react\";\n\nexport interface GameControlPanelBottomToolbarProps {\n  onAbortGame?(): void;\n  onOfferDraw?(): void;\n  onResignGame?(): void;\n}\n\nexport const GameControlPanelBottomToolbar: FC<GameControlPanelBottomToolbarProps> = ({\n  onAbortGame,\n  onOfferDraw,\n  onResignGame,\n}) => {\n  const handleAbortGame = useCallback(() => {\n    if (onAbortGame) {\n      onAbortGame();\n    }\n  }, [onAbortGame]);\n  const handleOfferDraw = useCallback(() => {\n    if (onOfferDraw) {\n      onOfferDraw();\n    }\n  }, [onOfferDraw]);\n  const handleResignGame = useCallback(() => {\n    if (onResignGame) {\n      onResignGame();\n    }\n  }, [onResignGame]);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        data-testid=\"abort-game-btn\"\n        onClick={handleAbortGame}\n      >\n        Abort\n      </button>\n      <button\n        type=\"button\"\n        data-testid=\"offer-draw-btn\"\n        onClick={handleOfferDraw}\n      >\n        Offer a draw\n      </button>\n      <button\n        type=\"button\"\n        data-testid=\"resign-game-btn\"\n        onClick={handleResignGame}\n      >\n        Resign\n      </button>\n    </>\n  );\n};\n","import React, { FC } from \"react\";\nimport Game from \"../../interfaces/Game\";\nimport { PieceColor } from \"../../types/PieceColor\";\nimport { GameClock } from \"./GameClock\";\nimport { GameMoves } from \"./GameMoves\";\nimport { GameControlPanelUserName } from \"./GameControlPanelUserName\";\nimport { GameControlPanelTopToolbar } from \"./GameControlPanelTopToolbar\";\nimport { GameControlPanelBottomToolbar } from \"./GameControlPanelBottomToolbar\";\n\nexport interface GameControlPanelProps {\n  game?: Game;\n  orientation?: PieceColor;\n  onRewindToMove?(moveIndex: number): void;\n  onFlipBoard?(): void;\n  onRewindToPrevMove?(): void;\n  onRewindToNextMove?(): void;\n  onRewindToFirstMove?(): void;\n  onRewindToLastMove?(): void;\n  onAbortGame?(): void;\n  onOfferDraw?(): void;\n  onResignGame?(): void;\n}\n\nexport const GameControlPanel: FC<GameControlPanelProps> = ({\n  game,\n  orientation = \"white\",\n  onRewindToMove,\n  onFlipBoard,\n  onRewindToPrevMove,\n  onRewindToNextMove,\n  onRewindToFirstMove,\n  onRewindToLastMove,\n  onAbortGame,\n  onOfferDraw,\n  onResignGame,\n}) => {\n  if (!game) {\n    return null;\n  }\n\n  return (\n    <div>\n      <GameClock time={orientation === \"white\" ? game.btime : game.wtime} />\n      <GameControlPanelUserName\n        game={game}\n        color={orientation === \"white\" ? \"black\" : \"white\"}\n      />\n      <GameControlPanelTopToolbar\n        onFlipBoard={onFlipBoard}\n        onRewindToPrevMove={onRewindToPrevMove}\n        onRewindToNextMove={onRewindToNextMove}\n        onRewindToFirstMove={onRewindToFirstMove}\n        onRewindToLastMove={onRewindToLastMove}\n      />\n      <GameMoves game={game} onRewindToMove={onRewindToMove} />\n      <GameControlPanelBottomToolbar\n        onAbortGame={onAbortGame}\n        onOfferDraw={onOfferDraw}\n        onResignGame={onResignGame}\n      />\n      <GameControlPanelUserName\n        game={game}\n        color={orientation === \"white\" ? \"white\" : \"black\"}\n      />\n      <GameClock time={orientation === \"white\" ? game.wtime : game.btime} />\n    </div>\n  );\n};\n","import React, { FC } from \"react\";\nimport { ChessInstance } from \"chess.js\";\nimport {\n  Board,\n  getValidMoves,\n  Move,\n  PieceColor,\n  ValidMoves,\n} from \"ii-react-chessboard\";\nimport Game from \"../../interfaces/Game\";\nimport makeChessInstance from \"../../utils/makeChessInstance\";\nimport User from \"../../interfaces/User\";\nimport { GameMeta } from \"./GameMeta\";\nimport { GameControlPanel } from \"./GameControlPanel\";\n\nexport interface SingleGameProps {\n  game?: Game;\n  currentUser?: User;\n  onMove?(move: Move): void;\n}\n\nexport const SingleGame: FC<SingleGameProps> = ({\n  game,\n  currentUser,\n  onMove,\n}) => {\n  if (!game) {\n    return null;\n  }\n\n  const chess: ChessInstance = makeChessInstance(game);\n\n  const check: boolean = chess.in_check();\n\n  const fen: string = chess.fen();\n\n  const turnColor: PieceColor =\n    game.turn === \"white\" ? PieceColor.WHITE : PieceColor.BLACK;\n\n  const validMoves: ValidMoves = getValidMoves(chess);\n\n  let viewOnly = true;\n  if (\n    currentUser &&\n    (currentUser.id === game.white?.id || currentUser.id === game.black?.id) &&\n    game.status === \"started\"\n  ) {\n    viewOnly = false;\n  }\n\n  let movableColor: PieceColor | undefined;\n  if (currentUser && currentUser.id === game.white?.id) {\n    movableColor = PieceColor.WHITE;\n  }\n  if (currentUser && currentUser.id === game.black?.id) {\n    movableColor = PieceColor.BLACK;\n  }\n\n  let orientation = PieceColor.WHITE;\n  if (currentUser && currentUser.id === game.black?.id) {\n    orientation = PieceColor.BLACK;\n  }\n\n  const movesHistory = chess.history({ verbose: true });\n\n  let lastMoveSquares: string[] | undefined;\n  if (movesHistory.length) {\n    const lastMove = movesHistory[movesHistory.length - 1];\n    lastMoveSquares = [lastMove.from, lastMove.to];\n  }\n\n  return (\n    <>\n      <GameMeta game={game} />\n      <GameControlPanel game={game} orientation={orientation} />\n      <Board\n        allowMarkers\n        check={check}\n        clickable\n        draggable\n        orientation={orientation}\n        position={fen}\n        turnColor={turnColor}\n        lastMoveSquares={lastMoveSquares}\n        movableColor={movableColor}\n        validMoves={validMoves}\n        viewOnly={viewOnly}\n        onMove={onMove}\n      />\n    </>\n  );\n};\n","import React, { FC, useEffect } from \"react\";\nimport { denormalize } from \"normalizr\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Move } from \"ii-react-chessboard\";\nimport { SingleGame } from \"./SingleGame\";\nimport { AppDispatch } from \"../../app/store\";\nimport { RootState } from \"../../app/rootReducer\";\nimport gameSchema from \"../../normalizr/schemas/gameSchema\";\nimport { fetchGame } from \"./singleGameSlice\";\nimport { makeMove } from \"../move/moveSlice\";\nimport User from \"../../interfaces/User\";\nimport userSchema from \"../../normalizr/schemas/userSchema\";\n\nexport interface SingleGameContainerProps {\n  id: number;\n}\n\nexport const SingleGameContainer: FC<SingleGameContainerProps> = ({ id }) => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const game = useSelector((state: RootState) =>\n    denormalize(id, gameSchema, state.entities)\n  );\n\n  const currentUser: User | undefined = useSelector((state: RootState) => {\n    if (state.currentUser.userId) {\n      return denormalize(state.currentUser.userId, userSchema, state.entities);\n    }\n    return undefined;\n  });\n\n  useEffect(() => {\n    dispatch(fetchGame(id));\n  }, [dispatch, id]);\n\n  const onMove = (move: Move) => {\n    dispatch(makeMove(id, `${move.from}${move.to}`));\n  };\n\n  if (game) {\n    return <SingleGame game={game} currentUser={currentUser} onMove={onMove} />;\n  }\n  return null;\n};\n","import React, { FC } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { SingleGameContainer } from \"../features/single-game/SingleGameContainer\";\n\ninterface GamePageParams {\n  id: string;\n}\n\nconst GamePage: FC<unknown> = () => {\n  const { id } = useParams<GamePageParams>();\n\n  return <SingleGameContainer id={Number(id)} />;\n};\n\nexport default GamePage;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport React, { FC, FormEvent } from \"react\";\nimport { Formik, FormikHelpers } from \"formik\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\nimport * as Yup from \"yup\";\nimport LoginData from \"../../interfaces/LoginData\";\n\nconst loginSchema = Yup.object().shape({\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n  password: Yup.string()\n    .min(6, \"Password length must be >= 6\")\n    .required(\"Required\"),\n});\n\nexport interface LoginFormProps {\n  onSubmit?(\n    values: LoginData,\n    formikHelpers: FormikHelpers<LoginData>\n  ): void | Promise<any>;\n}\n\nexport const LoginForm: FC<LoginFormProps> = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{ email: \"\", password: \"\" }}\n      validationSchema={loginSchema}\n      onSubmit={(values, formikHelpers): Promise<any> | void => {\n        if (onSubmit) {\n          return onSubmit(values as LoginData, formikHelpers);\n        }\n        return undefined;\n      }}\n    >\n      {({\n        errors,\n        values,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        status,\n        setStatus,\n        /* and other goodies */\n      }) => (\n        <Form\n          noValidate\n          onSubmit={(e) => handleSubmit(e as FormEvent<HTMLFormElement>)}\n          onChange={() => setStatus(\"\")}\n        >\n          {!!status && <Alert variant=\"danger\">{status}</Alert>}\n          <Form.Group>\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Enter email\"\n              onBlur={handleBlur}\n              value={values.email}\n              onChange={handleChange}\n              isValid={touched.email && !errors.email}\n              isInvalid={touched.email && !!errors.email}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.email}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n              isValid={touched.password && !errors.password}\n              isInvalid={touched.password && !!errors.password}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.password}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n            Login\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport React, { FC, FormEvent } from \"react\";\nimport { Formik } from \"formik\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\nimport * as Yup from \"yup\";\nimport { FormikHelpers } from \"formik/dist/types\";\n\nconst registrationSchema = Yup.object().shape({\n  fullName: Yup.string().required(\"Required\"),\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n  password: Yup.string()\n    .min(6, \"Password length must be >= 6\")\n    .required(\"Required\"),\n  confirmPassword: Yup.string()\n    .equals([Yup.ref(\"password\")], \"Please repeat the password\")\n    .required(\"Required\"),\n});\n\nexport interface RegistrationFormData {\n  fullName: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nexport interface RegistrationFormProps {\n  onSubmit?(\n    values: RegistrationFormData,\n    formikHelpers: FormikHelpers<RegistrationFormData>\n  ): void | Promise<any>;\n}\n\nexport const RegistrationForm: FC<RegistrationFormProps> = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{\n        fullName: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n      }}\n      validationSchema={registrationSchema}\n      onSubmit={(values, formikHelpers): Promise<any> | void => {\n        if (onSubmit) {\n          return onSubmit(values as RegistrationFormData, formikHelpers);\n        }\n        return undefined;\n      }}\n    >\n      {({\n        errors,\n        values,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        status,\n        setStatus,\n        /* and other goodies */\n      }) => (\n        <Form\n          noValidate\n          onSubmit={(e) => handleSubmit(e as FormEvent<HTMLFormElement>)}\n          onChange={() => setStatus(\"\")}\n        >\n          {!!status && <Alert variant=\"danger\">{status}</Alert>}\n\n          <Form.Group>\n            <Form.Label>Full name</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"fullName\"\n              placeholder=\"Enter full name\"\n              onBlur={handleBlur}\n              value={values.fullName}\n              onChange={handleChange}\n              isValid={touched.fullName && !errors.fullName}\n              isInvalid={touched.fullName && !!errors.fullName}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.fullName}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Enter email\"\n              onBlur={handleBlur}\n              value={values.email}\n              onChange={handleChange}\n              isValid={touched.email && !errors.email}\n              isInvalid={touched.email && !!errors.email}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.email}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n              isValid={touched.password && !errors.password}\n              isInvalid={touched.password && !!errors.password}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.password}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"confirmPassword\"\n              placeholder=\"Password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.confirmPassword}\n              isValid={touched.confirmPassword && !errors.confirmPassword}\n              isInvalid={touched.confirmPassword && !!errors.confirmPassword}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.confirmPassword}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n            Register\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import React, { FC } from \"react\";\nimport { Tab, Tabs } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { FormikHelpers } from \"formik\";\nimport { LoginForm } from \"./LoginForm\";\nimport { RegistrationForm, RegistrationFormData } from \"./RegistrationForm\";\nimport LoginData from \"../../interfaces/LoginData\";\nimport { login, register } from \"../current-user/currentUserSlice\";\nimport { AppDispatch } from \"../../app/store\";\n\nconst LoginTabsContainer: FC<unknown> = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const doLogin = React.useCallback(\n    (values: LoginData, formikHelpers: FormikHelpers<LoginData>) => {\n      return dispatch(login(values)).catch((err) => {\n        if (err.statusCode === 401) {\n          formikHelpers.setStatus(\"Incorrect email or password\");\n        } else {\n          formikHelpers.setStatus(\"Internal server error\");\n        }\n      });\n    },\n    [dispatch]\n  );\n\n  const doSignUp = React.useCallback(\n    (\n      values: RegistrationFormData,\n      formikHelpers: FormikHelpers<RegistrationFormData>\n    ) => {\n      return dispatch(\n        register({\n          fullName: values.fullName,\n          email: values.email,\n          password: values.password,\n        })\n      ).catch((err) => {\n        if (err.statusCode === 409) {\n          formikHelpers.setStatus(\n            \"The provided email address is already in use\"\n          );\n        } else {\n          formikHelpers.setStatus(\"Internal server error\");\n        }\n      });\n    },\n    [dispatch]\n  );\n\n  return (\n    <Tabs transition={false}>\n      <Tab eventKey=\"home\" title=\"Login\">\n        <LoginForm onSubmit={doLogin} />\n      </Tab>\n      <Tab eventKey=\"profile\" title=\"Register\">\n        <RegistrationForm onSubmit={doSignUp} />\n      </Tab>\n    </Tabs>\n  );\n};\n\nexport default LoginTabsContainer;\n","import React, { FC, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { denormalize } from \"normalizr\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport HomePage from \"../pages/HomePage\";\nimport GamePage from \"../pages/GamePage\";\nimport LoginTabsContainer from \"../features/auth-modal/LoginTabsContainer\";\nimport { RootState } from \"./rootReducer\";\nimport {\n  fetchCurrentUser,\n  logout,\n} from \"../features/current-user/currentUserSlice\";\nimport {\n  showAuthModal,\n  hideAuthModal,\n} from \"../features/auth-modal/authModalSlice\";\nimport User from \"../interfaces/User\";\nimport userSchema from \"../normalizr/schemas/userSchema\";\nimport { watchGames } from \"../features/data-subscription/dataSubscriptionSlice\";\nimport { startGameClock } from \"../features/game-clock/gameClockSlice\";\n\nconst App: FC = () => {\n  const dispatch = useDispatch();\n\n  const currentUser: User | null = useSelector((state: RootState) => {\n    if (state.currentUser.userId) {\n      return denormalize(state.currentUser.userId, userSchema, state.entities);\n    }\n    return null;\n  });\n  const { isAuthModalVisible } = useSelector(\n    (state: RootState) => state.authModal\n  );\n\n  useEffect(() => {\n    dispatch(fetchCurrentUser());\n    dispatch(watchGames());\n    dispatch(startGameClock());\n  }, [dispatch]);\n\n  return (\n    <Router>\n      {currentUser ? (\n        <>\n          <div>Hi, {currentUser.fullName}</div>\n          <Button variant=\"primary\" onClick={() => dispatch(logout())}>\n            Logout\n          </Button>\n        </>\n      ) : (\n        <Button variant=\"primary\" onClick={() => dispatch(showAuthModal())}>\n          Login / Register\n        </Button>\n      )}\n\n      <Modal\n        show={isAuthModalVisible}\n        onHide={() => dispatch(hideAuthModal())}\n        animation={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Login</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <LoginTabsContainer />\n        </Modal.Body>\n      </Modal>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/game/:id\">\n            <GamePage />\n          </Route>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable no-param-reassign */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  getCurrentUserSuccess,\n  loginSuccess,\n  registerSuccess,\n} from \"../current-user/currentUserSlice\";\nimport { getOngoingGamesSuccess } from \"../ongoing-games/ongoingGamesSlice\";\nimport { getSingleGameSuccess } from \"../single-game/singleGameSlice\";\nimport { challengeAiSuccess } from \"../challenge/challengeSlice\";\nimport { oneSecondPassed } from \"../game-clock/gameClockSlice\";\nimport {\n  updateGameBySubscription,\n  createGameBySubscription,\n} from \"../data-subscription/dataSubscriptionSlice\";\nimport {\n  makeMoveRequest,\n  makeMoveSuccess,\n  MoveRequestPayload,\n} from \"../move/moveSlice\";\nimport NormalizedUserEntity from \"../../normalizr/interfaces/NormalizedUserEntity\";\nimport NormalizedGameEntity from \"../../normalizr/interfaces/NormalizedGameEntity\";\nimport makeChessInstance from \"../../utils/makeChessInstance\";\n\nexport interface EntitiesState {\n  users: Record<string, NormalizedUserEntity>;\n  games: Record<string, NormalizedGameEntity>;\n}\n\nconst initialState: EntitiesState = {\n  users: {},\n  games: {},\n};\n\nconst getNormalizedDataReducer = (\n  state: EntitiesState,\n  action: PayloadAction<{\n    entities: Partial<EntitiesState>;\n  }>\n) => {\n  Object.assign(state.users, action.payload.entities.users);\n  Object.assign(state.games, action.payload.entities.games);\n};\n\nconst entitiesSlice = createSlice({\n  name: \"entities\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [getCurrentUserSuccess.type]: (\n      state: EntitiesState,\n      action: PayloadAction<null | {\n        entities: Partial<EntitiesState>;\n      }>\n    ) => {\n      if (action.payload) {\n        getNormalizedDataReducer(state, {\n          type: action.type,\n          payload: action.payload,\n        });\n      }\n    },\n    [loginSuccess.type]: getNormalizedDataReducer,\n    [registerSuccess.type]: getNormalizedDataReducer,\n    [getOngoingGamesSuccess.type]: getNormalizedDataReducer,\n    [getSingleGameSuccess.type]: getNormalizedDataReducer,\n    [challengeAiSuccess.type]: getNormalizedDataReducer,\n    [updateGameBySubscription.type]: getNormalizedDataReducer,\n    [createGameBySubscription.type]: getNormalizedDataReducer,\n    [makeMoveRequest.type]: (\n      state: EntitiesState,\n      action: PayloadAction<MoveRequestPayload>\n    ) => {\n      state.games[action.payload.gameId].turn =\n        state.games[action.payload.gameId].turn === \"white\" ? \"black\" : \"white\";\n      state.games[action.payload.gameId].moves = `${\n        state.games[action.payload.gameId].moves\n      } ${action.payload.move}`.trim();\n    },\n    [makeMoveSuccess.type]: getNormalizedDataReducer,\n    [oneSecondPassed.type]: (state: EntitiesState) => {\n      const gameIds = Object.keys(state.games);\n\n      gameIds.forEach((gameId) => {\n        const game = state.games[gameId];\n\n        if (game.status === \"started\") {\n          const chess = makeChessInstance(game);\n\n          if (chess.history().length > 1) {\n            const timePropName = game.turn === \"white\" ? \"wtime\" : \"btime\";\n\n            game[timePropName] -= 1000;\n            if (game[timePropName] < 0) {\n              game[timePropName] = 0;\n            }\n\n            if (game[timePropName] === 0) {\n              game.status = \"outoftime\";\n              game.winner = game.turn === \"white\" ? \"black\" : \"white\";\n            }\n          }\n        }\n      });\n    },\n  },\n});\n\nexport default entitiesSlice.reducer;\n","/* eslint-disable import/no-cycle */\n\nimport { combineReducers } from \"@reduxjs/toolkit\";\nimport ongoingGamesReducer from \"../features/ongoing-games/ongoingGamesSlice\";\nimport currentUserReducer from \"../features/current-user/currentUserSlice\";\nimport authModalReducer from \"../features/auth-modal/authModalSlice\";\nimport challengeAiModalReducer from \"../features/challenge-ai-modal/challengeAiModalSlice\";\nimport entitiesReducer from \"../features/entities/entitiesSlice\";\nimport singleGameReducer from \"../features/single-game/singleGameSlice\";\n// import dataSubscriptionReducer from \"../redux/slices/dataSubscriptionSlice\";\n\nconst rootReducer = combineReducers({\n  authModal: authModalReducer,\n  challengeAiModal: challengeAiModalReducer,\n  // challenge: challengeReducer,\n  currentUser: currentUserReducer,\n  ongoingGames: ongoingGamesReducer,\n  entities: entitiesReducer,\n  // dataSubscription: dataSubscriptionReducer,\n  singleGame: singleGameReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","/* eslint-disable global-require */\n/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable import/no-cycle */\n\nimport { Action, configureStore } from \"@reduxjs/toolkit\";\nimport { ThunkAction } from \"redux-thunk\";\nimport rootReducer, { RootState } from \"./rootReducer\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nif (process.env.NODE_ENV === \"development\" && module.hot) {\n  module.hot.accept(\"./rootReducer\", () => {\n    const newRootReducer = require(\"./rootReducer\").default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppThunk<R> = ThunkAction<R, RootState, unknown, Action<string>>;\n\nexport default store;\n","/* eslint-disable global-require */\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./app/store\";\n\nconst render = () => {\n  const App = require(\"./app/App\").default;\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n};\n\nrender();\n\nif (process.env.NODE_ENV === \"development\" && module.hot) {\n  module.hot.accept(\"./app/App\", render);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { schema } from \"normalizr\";\n\nconst userSchema = new schema.Entity(\"users\");\n\nexport default userSchema;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"levelButtonGroup\":\"ChallengeAiForm_levelButtonGroup__1lnm_\",\"colorSubmits\":\"ChallengeAiForm_colorSubmits__1pM28\",\"colorSubmitsButton\":\"ChallengeAiForm_colorSubmitsButton__2P6Lx\",\"whiteButton\":\"ChallengeAiForm_whiteButton__2nTjs\",\"blackButton\":\"ChallengeAiForm_blackButton__1LVeL\",\"randomButton\":\"ChallengeAiForm_randomButton__1S07l\"};","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { JWR } from \"sails.io.js\";\nimport { normalize } from \"normalizr\";\nimport NormalizedData from \"../../normalizr/interfaces/NormalizedData\";\nimport { ChallengeAiData } from \"../../interfaces/ChallengeAiData\";\nimport { AppThunk } from \"../../app/store\";\nimport Game from \"../../interfaces/Game\";\nimport ioClient from \"../../services/ioClient\";\nimport gameSchema from \"../../normalizr/schemas/gameSchema\";\n\ninterface ChallengeState {}\n\nconst initialState: ChallengeState = {};\n\nconst challengeSlice = createSlice({\n  name: \"challenge\",\n  initialState,\n  reducers: {\n    challengeAiRequest() {},\n    challengeAiSuccess(\n      _state,\n      _action: PayloadAction<NormalizedData<number>>\n    ) {},\n    challengeAiError(_state, _action: PayloadAction<string>) {},\n  },\n  extraReducers: {},\n});\n\nexport const {\n  challengeAiRequest,\n  challengeAiSuccess,\n  challengeAiError,\n} = challengeSlice.actions;\n\nexport default challengeSlice.reducer;\n\nexport const challengeAi = (data: ChallengeAiData): AppThunk<Promise<Game>> => (\n  dispatch\n) => {\n  dispatch(challengeAiRequest());\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      `/api/v1/challenge/ai`,\n      data,\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedGame = normalize(body as Game, gameSchema);\n\n          dispatch(challengeAiSuccess(normalizedGame));\n          resolve(body as Game);\n        } else {\n          dispatch(challengeAiError(body as string));\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n","import { Chess, ChessInstance } from \"chess.js\";\nimport Game from \"../interfaces/Game\";\n\nconst startPositionFen =\n  \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n\nexport default (game: Pick<Game, \"initialFen\" | \"moves\">): ChessInstance => {\n  let { initialFen } = game;\n  if (initialFen === \"startpos\") {\n    initialFen = startPositionFen;\n  }\n\n  const chess = new Chess(initialFen);\n\n  if (game.moves) {\n    game.moves.split(\" \").forEach((move) => {\n      const result = chess.move(move, {\n        sloppy: true,\n      });\n\n      if (!result) {\n        throw Error(`incorrect move: ${move}`);\n      }\n    });\n  }\n\n  return chess;\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { normalize } from \"normalizr\";\nimport NormalizedData from \"../../normalizr/interfaces/NormalizedData\";\nimport { AppThunk } from \"../../app/store\";\nimport ioClient from \"../../services/ioClient\";\nimport { SubscriptionData } from \"../../interfaces/SubscriptionData\";\nimport gameSchema from \"../../normalizr/schemas/gameSchema\";\n\ninterface DataSubscriptionState {}\n\nconst initialState: DataSubscriptionState = {};\n\nconst dataSubscriptionSlice = createSlice({\n  name: \"dataSubscription\",\n  initialState,\n  reducers: {\n    updateGameBySubscription(\n      _state,\n      _action: PayloadAction<NormalizedData<number>>\n    ) {},\n    createGameBySubscription(\n      _state,\n      _action: PayloadAction<NormalizedData<number>>\n    ) {},\n  },\n  extraReducers: {},\n});\n\nexport const {\n  updateGameBySubscription,\n  createGameBySubscription,\n} = dataSubscriptionSlice.actions;\n\nexport default dataSubscriptionSlice.reducer;\n\nexport const watchGames = (): AppThunk<void> => (dispatch) => {\n  ioClient.socket.on(\"game\", (subscriptionData: SubscriptionData) => {\n    if (subscriptionData.verb === \"updated\") {\n      const game = {\n        ...subscriptionData.previous,\n        ...subscriptionData.data,\n      };\n\n      const normalizedGame = normalize(game, gameSchema);\n\n      dispatch(updateGameBySubscription(normalizedGame));\n    } else if (subscriptionData.verb === \"created\") {\n      const normalizedGame = normalize(subscriptionData.data, gameSchema);\n\n      dispatch(createGameBySubscription(normalizedGame));\n    }\n  });\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { JWR } from \"sails.io.js\";\nimport { normalize } from \"normalizr\";\nimport { AppThunk } from \"../../app/store\";\nimport Game from \"../../interfaces/Game\";\nimport ioClient from \"../../services/ioClient\";\nimport gameSchema from \"../../normalizr/schemas/gameSchema\";\nimport NormalizedData from \"../../normalizr/interfaces/NormalizedData\";\nimport { challengeAiSuccess } from \"../challenge/challengeSlice\";\nimport {\n  createGameBySubscription,\n  updateGameBySubscription,\n} from \"../data-subscription/dataSubscriptionSlice\";\n\ninterface OngoingGamesState {\n  items: number[];\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: OngoingGamesState = {\n  items: [],\n  isLoading: true,\n  error: null,\n};\n\nconst ongoingGamesSlice = createSlice({\n  name: \"ongoingGames\",\n  initialState,\n  reducers: {\n    getOngoingGamesRequest(state) {\n      state.isLoading = true;\n      state.error = null;\n    },\n    getOngoingGamesSuccess(\n      state,\n      action: PayloadAction<NormalizedData<number[]>>\n    ) {\n      state.items = action.payload.result;\n      state.isLoading = false;\n      state.error = null;\n    },\n    getOngoingGamesError(state, action: PayloadAction<string>) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n  },\n  extraReducers: {\n    [challengeAiSuccess.type]: (\n      state,\n      action: PayloadAction<NormalizedData<number>>\n    ) => {\n      if (!state.items.includes(action.payload.result)) {\n        state.items.unshift(action.payload.result);\n      }\n    },\n    [createGameBySubscription.type]: (\n      state,\n      action: PayloadAction<NormalizedData<number>>\n    ) => {\n      if (!state.items.includes(action.payload.result)) {\n        state.items.unshift(action.payload.result);\n      }\n    },\n    [updateGameBySubscription.type]: (\n      state,\n      action: PayloadAction<NormalizedData<number>>\n    ) => {\n      if (!state.items.includes(action.payload.result)) {\n        state.items.unshift(action.payload.result);\n      }\n    },\n  },\n});\n\nexport const {\n  getOngoingGamesRequest,\n  getOngoingGamesSuccess,\n  getOngoingGamesError,\n} = ongoingGamesSlice.actions;\n\nexport default ongoingGamesSlice.reducer;\n\nexport const fetchOngoingGames = (): AppThunk<Promise<Game[]>> => (\n  dispatch\n) => {\n  dispatch(getOngoingGamesRequest());\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(\"/api/v1/game/playing\", (body: unknown, jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        const normalizedGames = normalize(body as Game[], [gameSchema]);\n        dispatch(getOngoingGamesSuccess(normalizedGames));\n\n        resolve(body as Game[]);\n      } else {\n        dispatch(getOngoingGamesError(body as string));\n        reject(jwr);\n      }\n    });\n  });\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { JWR } from \"sails.io.js\";\nimport { normalize } from \"normalizr\";\nimport { AppThunk } from \"../../app/store\";\nimport Game from \"../../interfaces/Game\";\nimport ioClient from \"../../services/ioClient\";\nimport gameSchema from \"../../normalizr/schemas/gameSchema\";\nimport ItemErrorPayload from \"../../interfaces/ItemErrorPayload\";\nimport NormalizedData from \"../../normalizr/interfaces/NormalizedData\";\n\ninterface SingleGameState {\n  [gameId: string]: {\n    isLoading: boolean;\n    error: string | null;\n  };\n}\n\nconst initialState: SingleGameState = {};\n\nconst singleGameSlice = createSlice({\n  name: \"singleGame\",\n  initialState,\n  reducers: {\n    getSingleGameRequest(state, action: PayloadAction<number>) {\n      state[action.payload] = {\n        isLoading: true,\n        error: null,\n      };\n    },\n    getSingleGameSuccess(state, action: PayloadAction<NormalizedData<number>>) {\n      state[action.payload.result] = {\n        isLoading: false,\n        error: null,\n      };\n    },\n    getSingleGameError(state, action: PayloadAction<ItemErrorPayload>) {\n      state[action.payload.itemId] = {\n        isLoading: false,\n        error: action.payload.error,\n      };\n    },\n  },\n  extraReducers: {},\n});\n\nexport const {\n  getSingleGameRequest,\n  getSingleGameSuccess,\n  getSingleGameError,\n} = singleGameSlice.actions;\n\nexport default singleGameSlice.reducer;\n\nexport const fetchGame = (id: number): AppThunk<Promise<Game>> => (\n  dispatch\n) => {\n  dispatch(getSingleGameRequest(id));\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(`/game/${id}`, (body: unknown, jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        const normalizedGame = normalize(body as Game, gameSchema);\n        dispatch(getSingleGameSuccess(normalizedGame));\n        resolve(body as Game);\n      } else {\n        dispatch(\n          getSingleGameError({\n            itemId: id,\n            error: body as string,\n          })\n        );\n        reject(jwr);\n      }\n    });\n  });\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport {\n  loginSuccess,\n  registerSuccess,\n} from \"../current-user/currentUserSlice\";\n\ninterface AuthModalState {\n  isAuthModalVisible: boolean;\n}\n\nconst initialState: AuthModalState = {\n  isAuthModalVisible: false,\n};\n\nconst authModalSlice = createSlice({\n  name: \"authModal\",\n  initialState,\n  reducers: {\n    showAuthModal(state) {\n      state.isAuthModalVisible = true;\n    },\n    hideAuthModal(state) {\n      state.isAuthModalVisible = false;\n    },\n  },\n  extraReducers: {\n    [loginSuccess.type]: (state) => {\n      state.isAuthModalVisible = false;\n    },\n    [registerSuccess.type]: (state) => {\n      state.isAuthModalVisible = false;\n    },\n  },\n});\n\nexport const { showAuthModal, hideAuthModal } = authModalSlice.actions;\n\nexport default authModalSlice.reducer;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { challengeAiSuccess } from \"../challenge/challengeSlice\";\n\ninterface ChallengeAiModalState {\n  isChallengeAiModalVisible: boolean;\n}\n\nconst initialState: ChallengeAiModalState = {\n  isChallengeAiModalVisible: false,\n};\n\nconst challengeAiModalSlice = createSlice({\n  name: \"challengeAiModal\",\n  initialState,\n  reducers: {\n    showChallengeAiModal(state) {\n      state.isChallengeAiModalVisible = true;\n    },\n    hideChallengeAiModal(state) {\n      state.isChallengeAiModalVisible = false;\n    },\n  },\n  extraReducers: {\n    [challengeAiSuccess.type]: (state) => {\n      state.isChallengeAiModalVisible = false;\n    },\n  },\n});\n\nexport const {\n  showChallengeAiModal,\n  hideChallengeAiModal,\n} = challengeAiModalSlice.actions;\n\nexport default challengeAiModalSlice.reducer;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { JWR } from \"sails.io.js\";\nimport { normalize } from \"normalizr\";\nimport NormalizedData from \"../../normalizr/interfaces/NormalizedData\";\nimport { AppThunk } from \"../../app/store\";\nimport Game from \"../../interfaces/Game\";\nimport ioClient from \"../../services/ioClient\";\nimport gameSchema from \"../../normalizr/schemas/gameSchema\";\n\ninterface MoveState {}\n\nconst initialState: MoveState = {};\n\nconst moveSlice = createSlice({\n  name: \"move\",\n  initialState,\n  reducers: {\n    makeMoveRequest(_state, _action: PayloadAction<MoveRequestPayload>) {},\n    makeMoveSuccess(_state, _action: PayloadAction<NormalizedData<number>>) {},\n    makeMoveError(_state, _action: PayloadAction<string>) {},\n  },\n  extraReducers: {},\n});\n\nexport const {\n  makeMoveRequest,\n  makeMoveSuccess,\n  makeMoveError,\n} = moveSlice.actions;\n\nexport default moveSlice.reducer;\n\nexport interface MoveRequestPayload {\n  gameId: number;\n  move: string;\n}\n\nexport const makeMove = (\n  gameId: number,\n  move: string\n): AppThunk<Promise<Game>> => (dispatch) => {\n  dispatch(\n    makeMoveRequest({\n      gameId,\n      move,\n    })\n  );\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      `/api/v1/board/game/${gameId}/move/${move}`,\n      {},\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedGame = normalize(body as Game, gameSchema);\n\n          dispatch(makeMoveSuccess(normalizedGame));\n          resolve(body as Game);\n        } else {\n          dispatch(makeMoveError(body as string));\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n"],"sourceRoot":""}