{"version":3,"sources":["components/GamePreviewsList.module.scss","redux/schemas/gameSchema.ts","services/ioClient.ts","utils/makeChessInstance.ts","components/GamePreviewsList.tsx","containers/OngoingGamesContainer.tsx","components/ChallengeAiForm.tsx","containers/ChallengeAiFormContainer.tsx","pages/HomePage.tsx","components/SingleGame.tsx","utils/getTurnColor.ts","containers/SingleGameContainer.tsx","pages/GamePage.tsx","components/LoginForm.tsx","components/RegistrationForm.tsx","containers/LoginTabsContainer.tsx","app/App.tsx","serviceWorker.ts","redux/slices/entitiesSlice.ts","app/rootReducer.ts","app/store.ts","index.tsx","redux/slices/currentUserSlice.ts","redux/schemas/userSchema.ts","components/ChallengeAiForm.module.scss","redux/slices/challengeSlice.ts","redux/slices/dataSubscriptionSlice.ts","redux/slices/ongoingGamesSlice.ts","redux/slices/singleGameSlice.ts","redux/slices/authModalSlice.ts","redux/slices/challengeAiModalSlice.ts","redux/slices/moveSlice.ts"],"names":["module","exports","gameSchema","schema","Entity","white","userSchema","black","ioClient","sailsIOClient","socketIOClient","sails","url","game","initialFen","chess","Chess","moves","split","forEach","move","sloppy","GamePreviewsList","games","className","css","grid","map","item","fen","makeChessInstance","to","id","key","cell","position","viewOnly","width","OngoingGamesContainer","dispatch","useDispatch","items","useSelector","state","denormalize","ongoingGames","entities","useEffect","fetchOngoingGames","ChallengeAiForm","onSubmit","initialValues","level","color","clockLimit","clockIncrement","values","formikHelpers","handleChange","handleBlur","handleSubmit","isSubmitting","status","setStatus","setFieldValue","Form","noValidate","e","onChange","Alert","variant","Group","Label","Control","type","name","onBlur","value","min","max","Row","ButtonGroup","cx","levelButtonGroup","Button","onClick","colorSubmits","disabled","title","colorSubmitsButton","blackButton","randomButton","whiteButton","ChallengeAiFormContainer","history","useHistory","challengeAiAndOpenGamePage","useCallback","challengeAi","then","push","catch","err","statusCode","HomePage","isChallengeAiModalVisible","challengeAiModal","Modal","show","onHide","hideChallengeAiModal","animation","Header","closeButton","Title","Body","showChallengeAiModal","SingleGame","onMove","check","in_check","turnColor","turn","getTurnColor","PieceColor","WHITE","BLACK","validMoves","getValidMoves","allowMarkers","clickable","draggable","SingleGameContainer","fetchGame","makeMove","from","GamePage","useParams","Number","loginSchema","Yup","shape","email","required","password","LoginForm","validationSchema","errors","touched","placeholder","isValid","isInvalid","Feedback","registrationSchema","fullName","confirmPassword","equals","RegistrationForm","LoginTabsContainer","doLogin","React","login","doSignUp","register","Tabs","transition","Tab","eventKey","App","currentUser","userId","isAuthModalVisible","authModal","fetchCurrentUser","watchGames","logout","showAuthModal","hideAuthModal","path","Boolean","window","location","hostname","match","getNormalizedDataReducer","action","Object","assign","users","payload","entitiesSlice","createSlice","initialState","reducers","extraReducers","getOngoingGamesSuccess","getSingleGameSuccess","challengeAiSuccess","updateGameBySubscription","createGameBySubscription","makeMoveSuccess","rootReducer","combineReducers","authModalReducer","challengeAiModalReducer","currentUserReducer","ongoingGamesReducer","entitiesReducer","singleGame","singleGameReducer","store","configureStore","reducer","require","default","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message","currentUserSlice","isLoading","getCurrentUserRequest","getCurrentUserSuccess","result","getCurrentUserError","loginSuccess","registerSuccess","logoutSuccess","actions","Promise","resolve","reject","socket","get","body","jwr","normalizedUser","normalize","data","put","rememberMe","emailAddress","post","agreed","challengeSlice","challengeAiRequest","_state","_action","challengeAiError","normalizedGame","dataSubscriptionSlice","on","subscriptionData","verb","previous","ongoingGamesSlice","getOngoingGamesRequest","getOngoingGamesError","includes","unshift","normalizedGames","singleGameSlice","getSingleGameRequest","getSingleGameError","itemId","authModalSlice","challengeAiModalSlice","moveSlice","makeMoveRequest","makeMoveError","gameId"],"mappings":"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","file":"static/js/main.761089bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"GamePreviewsList_grid__2dFgV\"};","import { schema } from \"normalizr\";\nimport userSchema from \"./userSchema\";\n\nconst gameSchema = new schema.Entity(\"games\", {\n  white: userSchema,\n  black: userSchema,\n});\n\nexport default gameSchema;\n","import socketIOClient from \"socket.io-client\";\nimport sailsIOClient from \"sails.io.js\";\n\nconst ioClient = sailsIOClient(socketIOClient);\n\nioClient.sails.url = \"http://localhost:1337\";\n\nexport default ioClient;\n","import { Chess, ChessInstance } from \"chess.js\";\nimport Game from \"../interfaces/Game\";\n\nconst startPositionFen =\n  \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n\nexport default (game: Game): ChessInstance => {\n  let { initialFen } = game;\n  if (initialFen === \"startpos\") {\n    initialFen = startPositionFen;\n  }\n\n  const chess = new Chess(initialFen);\n\n  if (game.moves) {\n    game.moves.split(\" \").forEach((move) => {\n      chess.move(move, {\n        sloppy: true,\n      });\n    });\n  }\n\n  return chess;\n};\n","import React, { FC } from \"react\";\nimport { Board } from \"ii-react-chessboard\";\nimport { Link } from \"react-router-dom\";\nimport Game from \"../interfaces/Game\";\nimport css from \"./GamePreviewsList.module.scss\";\nimport makeChessInstance from \"../utils/makeChessInstance\";\n\nexport interface GamePreviewsListProps {\n  games?: Game[];\n}\n\nexport const GamePreviewsList: FC<GamePreviewsListProps> = ({ games = [] }) => {\n  return (\n    <div className={css.grid}>\n      {games.map((item) => {\n        const fen: string = makeChessInstance(item).fen();\n\n        return (\n          <Link to={`/game/${item.id}`} key={item.id}>\n            <div className={css.cell}>\n              <Board position={fen} viewOnly={false} width={240} />\n            </div>\n          </Link>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { FC, useEffect } from \"react\";\nimport { denormalize } from \"normalizr\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GamePreviewsList } from \"../components/GamePreviewsList\";\nimport { RootState } from \"../app/rootReducer\";\nimport { fetchOngoingGames } from \"../redux/slices/ongoingGamesSlice\";\nimport gameSchema from \"../redux/schemas/gameSchema\";\n\nconst OngoingGamesContainer: FC<unknown> = () => {\n  const dispatch = useDispatch();\n\n  const items = useSelector((state: RootState) =>\n    denormalize(state.ongoingGames.items, [gameSchema], state.entities)\n  );\n\n  useEffect(() => {\n    dispatch(fetchOngoingGames());\n  }, [dispatch]);\n\n  return <GamePreviewsList games={items} />;\n};\n\nexport default OngoingGamesContainer;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Formik, FormikHelpers } from \"formik\";\nimport React, { FC, FormEvent } from \"react\";\nimport cx from \"classnames\";\nimport { Alert, Button, ButtonGroup, Form, Row } from \"react-bootstrap\";\nimport { ChallengeAiData } from \"../interfaces/ChallengeAiData\";\nimport css from \"./ChallengeAiForm.module.scss\";\n\nexport interface ChallengeAiFormProps {\n  onSubmit?(\n    values: ChallengeAiData,\n    formikHelpers: FormikHelpers<ChallengeAiData>\n  ): void | Promise<any>;\n}\n\nexport const ChallengeAiForm: FC<ChallengeAiFormProps> = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{ level: 3, color: \"\", clockLimit: 5, clockIncrement: 3 }}\n      onSubmit={(values, formikHelpers): Promise<any> | void => {\n        if (onSubmit) {\n          return onSubmit(\n            values as ChallengeAiData,\n            formikHelpers as FormikHelpers<ChallengeAiData>\n          );\n        }\n        return undefined;\n      }}\n    >\n      {({\n        values,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        status,\n        setStatus,\n        setFieldValue,\n        /* and other goodies */\n      }) => (\n        <Form\n          noValidate\n          onSubmit={(e) => handleSubmit(e as FormEvent<HTMLFormElement>)}\n          onChange={() => setStatus(\"\")}\n        >\n          {!!status && <Alert variant=\"danger\">{status}</Alert>}\n          <fieldset>\n            <Form.Group>\n              <Form.Label>Minutes per side: {values.clockLimit}</Form.Label>\n              <Form.Control\n                type=\"range\"\n                name=\"clockLimit\"\n                onBlur={handleBlur}\n                value={values.clockLimit}\n                onChange={handleChange}\n                min=\"1\"\n                max=\"30\"\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>\n                Increment in seconds: {values.clockIncrement}\n              </Form.Label>\n              <Form.Control\n                type=\"range\"\n                name=\"clockIncrement\"\n                onBlur={handleBlur}\n                value={values.clockIncrement}\n                onChange={handleChange}\n                min=\"0\"\n                max=\"60\"\n              />\n            </Form.Group>\n          </fieldset>\n\n          <div className=\"text-center\">Level</div>\n\n          <Row>\n            <ButtonGroup className={cx(\"mx-auto\", css.levelButtonGroup)}>\n              {[1, 2, 3, 4, 5, 6, 7, 8].map((level) => (\n                <Button\n                  key={level}\n                  type=\"button\"\n                  variant={level === values.level ? \"dark\" : \"light\"}\n                  onClick={() => setFieldValue(\"level\", level)}\n                >\n                  {level}\n                </Button>\n              ))}\n            </ButtonGroup>\n          </Row>\n\n          <div className=\"text-center\">A.I. Level: {values.level}</div>\n\n          <div className={css.colorSubmits}>\n            <button\n              disabled={isSubmitting}\n              type=\"submit\"\n              title=\"Black\"\n              className={cx(css.colorSubmitsButton, css.blackButton)}\n              onClick={() => setFieldValue(\"color\", \"black\")}\n            >\n              <i />\n            </button>\n            <button\n              disabled={isSubmitting}\n              type=\"submit\"\n              title=\"Random side\"\n              className={cx(css.colorSubmitsButton, css.randomButton)}\n              onClick={() => setFieldValue(\"color\", \"random\")}\n            >\n              <i />\n            </button>\n            <button\n              disabled={isSubmitting}\n              type=\"submit\"\n              title=\"White\"\n              className={cx(css.colorSubmitsButton, css.whiteButton)}\n              onClick={() => setFieldValue(\"color\", \"white\")}\n            >\n              <i />\n            </button>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import React, { FC, useCallback } from \"react\";\nimport { FormikHelpers } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { ChallengeAiForm } from \"../components/ChallengeAiForm\";\nimport { AppDispatch } from \"../app/store\";\nimport { challengeAi } from \"../redux/slices/challengeSlice\";\nimport { ChallengeAiData } from \"../interfaces/ChallengeAiData\";\nimport Game from \"../interfaces/Game\";\n\nconst ChallengeAiFormContainer: FC<unknown> = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const history = useHistory();\n\n  const challengeAiAndOpenGamePage = useCallback(\n    (\n      values: ChallengeAiData,\n      formikHelpers: FormikHelpers<ChallengeAiData>\n    ) => {\n      return dispatch(challengeAi(values))\n        .then((game: Game) => {\n          history.push(`/game/${game.id}`);\n        })\n        .catch((err) => {\n          if (err.statusCode === 401) {\n            formikHelpers.setStatus(\"You must log in to play with computer\");\n          } else {\n            formikHelpers.setStatus(\"Internal server error\");\n          }\n        });\n    },\n    [dispatch, history]\n  );\n\n  return <ChallengeAiForm onSubmit={challengeAiAndOpenGamePage} />;\n};\n\nexport default ChallengeAiFormContainer;\n","import React, { FC } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport OngoingGamesContainer from \"../containers/OngoingGamesContainer\";\nimport ChallengeAiFormContainer from \"../containers/ChallengeAiFormContainer\";\n\nimport { RootState } from \"../app/rootReducer\";\nimport {\n  hideChallengeAiModal,\n  showChallengeAiModal,\n} from \"../redux/slices/challengeAiModalSlice\";\nimport { AppDispatch } from \"../app/store\";\n\nconst HomePage: FC<unknown> = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const { isChallengeAiModalVisible } = useSelector(\n    (state: RootState) => state.challengeAiModal\n  );\n\n  return (\n    <>\n      <Modal\n        show={isChallengeAiModalVisible}\n        onHide={() => dispatch(hideChallengeAiModal())}\n        animation={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Play with the computer</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <ChallengeAiFormContainer />\n        </Modal.Body>\n      </Modal>\n      <Button\n        variant=\"primary\"\n        onClick={() => dispatch(showChallengeAiModal())}\n      >\n        Play with the computer\n      </Button>\n      <OngoingGamesContainer />\n    </>\n  );\n};\n\nexport default HomePage;\n","import React, { FC } from \"react\";\nimport { ChessInstance } from \"chess.js\";\nimport {\n  Board,\n  getValidMoves,\n  Move,\n  PieceColor,\n  ValidMoves,\n} from \"ii-react-chessboard\";\nimport Game from \"../interfaces/Game\";\nimport makeChessInstance from \"../utils/makeChessInstance\";\nimport getTurnColor from \"../utils/getTurnColor\";\n\nexport interface SingleGameProps {\n  game?: Game;\n  onMove?(move: Move): void;\n}\n\nexport const SingleGame: FC<SingleGameProps> = ({ game, onMove }) => {\n  if (!game) {\n    return null;\n  }\n\n  const chess: ChessInstance = makeChessInstance(game);\n\n  const check: boolean = chess.in_check();\n\n  const fen: string = chess.fen();\n\n  const turnColor: PieceColor =\n    getTurnColor(chess) === \"white\" ? PieceColor.WHITE : PieceColor.BLACK;\n\n  const validMoves: ValidMoves = getValidMoves(chess);\n\n  return (\n    <Board\n      allowMarkers\n      check={check}\n      clickable\n      draggable\n      position={fen}\n      turnColor={turnColor}\n      validMoves={validMoves}\n      viewOnly={game.status !== \"started\"}\n      onMove={onMove}\n    />\n  );\n};\n","import { ChessInstance } from \"chess.js\";\nimport { PieceColor } from \"../types/PieceColor\";\n\nexport default (chess: ChessInstance): PieceColor => {\n  return chess.turn() === \"w\" ? \"white\" : \"black\";\n};\n","import React, { FC, useEffect } from \"react\";\nimport { denormalize } from \"normalizr\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Move } from \"ii-react-chessboard\";\nimport { SingleGame } from \"../components/SingleGame\";\nimport { AppDispatch } from \"../app/store\";\nimport { RootState } from \"../app/rootReducer\";\nimport gameSchema from \"../redux/schemas/gameSchema\";\nimport { fetchGame } from \"../redux/slices/singleGameSlice\";\nimport { makeMove } from \"../redux/slices/moveSlice\";\n\nexport interface SingleGameContainerProps {\n  id: number;\n}\n\nexport const SingleGameContainer: FC<SingleGameContainerProps> = ({ id }) => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const game = useSelector((state: RootState) =>\n    denormalize(id, gameSchema, state.entities)\n  );\n\n  useEffect(() => {\n    dispatch(fetchGame(id));\n  }, [dispatch, id]);\n\n  const onMove = (move: Move) => {\n    dispatch(makeMove(id, `${move.from}${move.to}`));\n  };\n\n  if (game) {\n    return <SingleGame game={game} onMove={onMove} />;\n  }\n  return null;\n};\n","import React, { FC } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { SingleGameContainer } from \"../containers/SingleGameContainer\";\n\ninterface GamePageParams {\n  id: string;\n}\n\nconst GamePage: FC<unknown> = () => {\n  const { id } = useParams<GamePageParams>();\n\n  return <SingleGameContainer id={Number(id)} />;\n};\n\nexport default GamePage;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport React, { FC, FormEvent } from \"react\";\nimport { Formik, FormikHelpers } from \"formik\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\nimport * as Yup from \"yup\";\nimport LoginData from \"../interfaces/LoginData\";\n\nconst loginSchema = Yup.object().shape({\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n  password: Yup.string()\n    .min(6, \"Password length must be >= 6\")\n    .required(\"Required\"),\n});\n\nexport interface LoginFormProps {\n  onSubmit?(\n    values: LoginData,\n    formikHelpers: FormikHelpers<LoginData>\n  ): void | Promise<any>;\n}\n\nexport const LoginForm: FC<LoginFormProps> = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{ email: \"\", password: \"\" }}\n      validationSchema={loginSchema}\n      onSubmit={(values, formikHelpers): Promise<any> | void => {\n        if (onSubmit) {\n          return onSubmit(values as LoginData, formikHelpers);\n        }\n        return undefined;\n      }}\n    >\n      {({\n        errors,\n        values,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        status,\n        setStatus,\n        /* and other goodies */\n      }) => (\n        <Form\n          noValidate\n          onSubmit={(e) => handleSubmit(e as FormEvent<HTMLFormElement>)}\n          onChange={() => setStatus(\"\")}\n        >\n          {!!status && <Alert variant=\"danger\">{status}</Alert>}\n          <Form.Group>\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Enter email\"\n              onBlur={handleBlur}\n              value={values.email}\n              onChange={handleChange}\n              isValid={touched.email && !errors.email}\n              isInvalid={touched.email && !!errors.email}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.email}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n              isValid={touched.password && !errors.password}\n              isInvalid={touched.password && !!errors.password}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.password}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n            Login\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport React, { FC, FormEvent } from \"react\";\nimport { Formik } from \"formik\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\nimport * as Yup from \"yup\";\nimport { FormikHelpers } from \"formik/dist/types\";\n\nconst registrationSchema = Yup.object().shape({\n  fullName: Yup.string().required(\"Required\"),\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n  password: Yup.string()\n    .min(6, \"Password length must be >= 6\")\n    .required(\"Required\"),\n  confirmPassword: Yup.string()\n    .equals([Yup.ref(\"password\")], \"Please repeat the password\")\n    .required(\"Required\"),\n});\n\nexport interface RegistrationFormData {\n  fullName: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nexport interface RegistrationFormProps {\n  onSubmit?(\n    values: RegistrationFormData,\n    formikHelpers: FormikHelpers<RegistrationFormData>\n  ): void | Promise<any>;\n}\n\nexport const RegistrationForm: FC<RegistrationFormProps> = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{\n        fullName: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n      }}\n      validationSchema={registrationSchema}\n      onSubmit={(values, formikHelpers): Promise<any> | void => {\n        if (onSubmit) {\n          return onSubmit(values as RegistrationFormData, formikHelpers);\n        }\n        return undefined;\n      }}\n    >\n      {({\n        errors,\n        values,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        status,\n        setStatus,\n        /* and other goodies */\n      }) => (\n        <Form\n          noValidate\n          onSubmit={(e) => handleSubmit(e as FormEvent<HTMLFormElement>)}\n          onChange={() => setStatus(\"\")}\n        >\n          {!!status && <Alert variant=\"danger\">{status}</Alert>}\n\n          <Form.Group>\n            <Form.Label>Full name</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"fullName\"\n              placeholder=\"Enter full name\"\n              onBlur={handleBlur}\n              value={values.fullName}\n              onChange={handleChange}\n              isValid={touched.fullName && !errors.fullName}\n              isInvalid={touched.fullName && !!errors.fullName}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.fullName}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Enter email\"\n              onBlur={handleBlur}\n              value={values.email}\n              onChange={handleChange}\n              isValid={touched.email && !errors.email}\n              isInvalid={touched.email && !!errors.email}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.email}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n              isValid={touched.password && !errors.password}\n              isInvalid={touched.password && !!errors.password}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.password}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"confirmPassword\"\n              placeholder=\"Password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.confirmPassword}\n              isValid={touched.confirmPassword && !errors.confirmPassword}\n              isInvalid={touched.confirmPassword && !!errors.confirmPassword}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.confirmPassword}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n            Register\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import React, { FC } from \"react\";\nimport { Tab, Tabs } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { FormikHelpers } from \"formik\";\nimport { LoginForm } from \"../components/LoginForm\";\nimport {\n  RegistrationForm,\n  RegistrationFormData,\n} from \"../components/RegistrationForm\";\nimport LoginData from \"../interfaces/LoginData\";\nimport { login, register } from \"../redux/slices/currentUserSlice\";\nimport { AppDispatch } from \"../app/store\";\n\nconst LoginTabsContainer: FC<unknown> = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const doLogin = React.useCallback(\n    (values: LoginData, formikHelpers: FormikHelpers<LoginData>) => {\n      return dispatch(login(values)).catch((err) => {\n        if (err.statusCode === 401) {\n          formikHelpers.setStatus(\"Incorrect email or password\");\n        } else {\n          formikHelpers.setStatus(\"Internal server error\");\n        }\n      });\n    },\n    [dispatch]\n  );\n\n  const doSignUp = React.useCallback(\n    (\n      values: RegistrationFormData,\n      formikHelpers: FormikHelpers<RegistrationFormData>\n    ) => {\n      return dispatch(\n        register({\n          fullName: values.fullName,\n          email: values.email,\n          password: values.password,\n        })\n      ).catch((err) => {\n        if (err.statusCode === 409) {\n          formikHelpers.setStatus(\n            \"The provided email address is already in use\"\n          );\n        } else {\n          formikHelpers.setStatus(\"Internal server error\");\n        }\n      });\n    },\n    [dispatch]\n  );\n\n  return (\n    <Tabs transition={false}>\n      <Tab eventKey=\"home\" title=\"Login\">\n        <LoginForm onSubmit={doLogin} />\n      </Tab>\n      <Tab eventKey=\"profile\" title=\"Register\">\n        <RegistrationForm onSubmit={doSignUp} />\n      </Tab>\n    </Tabs>\n  );\n};\n\nexport default LoginTabsContainer;\n","import React, { FC, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { denormalize } from \"normalizr\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport HomePage from \"../pages/HomePage\";\nimport GamePage from \"../pages/GamePage\";\nimport LoginTabsContainer from \"../containers/LoginTabsContainer\";\nimport { RootState } from \"./rootReducer\";\nimport { fetchCurrentUser, logout } from \"../redux/slices/currentUserSlice\";\nimport { showAuthModal, hideAuthModal } from \"../redux/slices/authModalSlice\";\nimport User from \"../interfaces/User\";\nimport userSchema from \"../redux/schemas/userSchema\";\nimport { watchGames } from \"../redux/slices/dataSubscriptionSlice\";\n\nconst App: FC = () => {\n  const dispatch = useDispatch();\n\n  const currentUser: User | null = useSelector((state: RootState) => {\n    if (state.currentUser.userId) {\n      return denormalize(state.currentUser.userId, userSchema, state.entities);\n    }\n    return null;\n  });\n  const { isAuthModalVisible } = useSelector(\n    (state: RootState) => state.authModal\n  );\n\n  useEffect(() => {\n    dispatch(fetchCurrentUser());\n    dispatch(watchGames());\n  }, [dispatch]);\n\n  return (\n    <Router>\n      {currentUser ? (\n        <>\n          <div>Hi, {currentUser.fullName}</div>\n          <Button variant=\"primary\" onClick={() => dispatch(logout())}>\n            Logout\n          </Button>\n        </>\n      ) : (\n        <Button variant=\"primary\" onClick={() => dispatch(showAuthModal())}>\n          Login / Register\n        </Button>\n      )}\n\n      <Modal\n        show={isAuthModalVisible}\n        onHide={() => dispatch(hideAuthModal())}\n        animation={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Login</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <LoginTabsContainer />\n        </Modal.Body>\n      </Modal>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/game/:id\">\n            <GamePage />\n          </Route>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable no-param-reassign */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { getOngoingGamesSuccess } from \"./ongoingGamesSlice\";\nimport { getSingleGameSuccess } from \"./singleGameSlice\";\nimport { challengeAiSuccess } from \"./challengeSlice\";\nimport {\n  updateGameBySubscription,\n  createGameBySubscription,\n} from \"./dataSubscriptionSlice\";\nimport { makeMoveSuccess } from \"./moveSlice\";\nimport NormalizedUserEntity from \"../interfaces/NormalizedUserEntity\";\nimport NormalizedGameEntity from \"../interfaces/NormalizedGameEntity\";\n\nexport interface EntitiesState {\n  users: Record<string, NormalizedUserEntity>;\n  games: Record<string, NormalizedGameEntity>;\n}\n\nconst initialState: EntitiesState = {\n  users: {},\n  games: {},\n};\n\nconst getNormalizedDataReducer = (\n  state: EntitiesState,\n  action: PayloadAction<{\n    entities: Partial<EntitiesState>;\n  }>\n) => {\n  Object.assign(state.users, action.payload.entities.users);\n  Object.assign(state.games, action.payload.entities.games);\n};\n\nconst entitiesSlice = createSlice({\n  name: \"entities\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [getOngoingGamesSuccess.type]: getNormalizedDataReducer,\n    [getSingleGameSuccess.type]: getNormalizedDataReducer,\n    [challengeAiSuccess.type]: getNormalizedDataReducer,\n    [updateGameBySubscription.type]: getNormalizedDataReducer,\n    [createGameBySubscription.type]: getNormalizedDataReducer,\n    [makeMoveSuccess.type]: getNormalizedDataReducer,\n  },\n});\n\nexport default entitiesSlice.reducer;\n","/* eslint-disable import/no-cycle */\n\nimport { combineReducers } from \"@reduxjs/toolkit\";\nimport ongoingGamesReducer from \"../redux/slices/ongoingGamesSlice\";\nimport currentUserReducer from \"../redux/slices/currentUserSlice\";\nimport authModalReducer from \"../redux/slices/authModalSlice\";\nimport challengeAiModalReducer from \"../redux/slices/challengeAiModalSlice\";\nimport entitiesReducer from \"../redux/slices/entitiesSlice\";\nimport singleGameReducer from \"../redux/slices/singleGameSlice\";\n// import dataSubscriptionReducer from \"../redux/slices/dataSubscriptionSlice\";\n\nconst rootReducer = combineReducers({\n  authModal: authModalReducer,\n  challengeAiModal: challengeAiModalReducer,\n  // challenge: challengeReducer,\n  currentUser: currentUserReducer,\n  ongoingGames: ongoingGamesReducer,\n  entities: entitiesReducer,\n  // dataSubscription: dataSubscriptionReducer,\n  singleGame: singleGameReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","/* eslint-disable global-require */\n/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable import/no-cycle */\n\nimport { Action, configureStore } from \"@reduxjs/toolkit\";\nimport { ThunkAction } from \"redux-thunk\";\nimport rootReducer, { RootState } from \"./rootReducer\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nif (process.env.NODE_ENV === \"development\" && module.hot) {\n  module.hot.accept(\"./rootReducer\", () => {\n    const newRootReducer = require(\"./rootReducer\").default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppThunk<R> = ThunkAction<R, RootState, unknown, Action<string>>;\n\nexport default store;\n","/* eslint-disable global-require */\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./app/store\";\n\nconst render = () => {\n  const App = require(\"./app/App\").default;\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n};\n\nrender();\n\nif (process.env.NODE_ENV === \"development\" && module.hot) {\n  module.hot.accept(\"./app/App\", render);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { normalize } from \"normalizr\";\nimport { JWR } from \"sails.io.js\";\nimport { AppThunk } from \"../../app/store\";\nimport ioClient from \"../../services/ioClient\";\nimport User from \"../../interfaces/User\";\nimport LoginData from \"../../interfaces/LoginData\";\nimport SignUpData from \"../../interfaces/SignUpData\";\nimport userSchema from \"../schemas/userSchema\";\nimport NormalizedData from \"../interfaces/NormalizedData\";\n\ninterface CurrentUserState {\n  userId: number | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: CurrentUserState = {\n  userId: null,\n  isLoading: true,\n  error: null,\n};\n\nconst currentUserSlice = createSlice({\n  name: \"currentUser\",\n  initialState,\n  reducers: {\n    getCurrentUserRequest(state) {\n      state.isLoading = true;\n      state.error = null;\n    },\n    getCurrentUserSuccess(\n      state,\n      action: PayloadAction<NormalizedData<number> | null>\n    ) {\n      state.userId = action.payload ? action.payload.result : null;\n      state.isLoading = false;\n      state.error = null;\n    },\n    getCurrentUserError(state, action: PayloadAction<string>) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    loginSuccess(state, action: PayloadAction<NormalizedData<number>>) {\n      state.userId = action.payload.result;\n    },\n    registerSuccess(state, action: PayloadAction<NormalizedData<number>>) {\n      state.userId = action.payload.result;\n    },\n    logoutSuccess(state) {\n      state.userId = null;\n    },\n  },\n});\n\nexport const {\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n  loginSuccess,\n  registerSuccess,\n  logoutSuccess,\n} = currentUserSlice.actions;\n\nexport default currentUserSlice.reducer;\n\nexport const fetchCurrentUser = (): AppThunk<Promise<User | null>> => (\n  dispatch\n) => {\n  dispatch(getCurrentUserRequest());\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(\"/api/v1/account/me\", (body: unknown, jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        const normalizedUser = normalize(body as User, userSchema);\n\n        dispatch(getCurrentUserSuccess(normalizedUser));\n        resolve(body as User);\n      } else if (jwr.statusCode === 401) {\n        dispatch(getCurrentUserSuccess(null));\n        resolve(null);\n      } else {\n        dispatch(getCurrentUserError(body as string));\n        reject(jwr);\n      }\n    });\n  });\n};\n\nexport const login = (data: LoginData): AppThunk<Promise<User>> => (\n  dispatch\n) => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.put(\n      \"/api/v1/entrance/login\",\n      {\n        rememberMe: true,\n        emailAddress: data.email,\n        password: data.password,\n      },\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedUser = normalize(body as User, userSchema);\n\n          dispatch(loginSuccess(normalizedUser));\n          resolve(body as User);\n        } else {\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n\nexport const register = (data: SignUpData): AppThunk<Promise<User>> => (\n  dispatch\n) => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      \"/api/v1/entrance/signup\",\n      {\n        fullName: data.fullName,\n        emailAddress: data.email,\n        password: data.password,\n        confirmPassword: data.password,\n        agreed: true,\n      },\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedUser = normalize(body as User, userSchema);\n\n          dispatch(registerSuccess(normalizedUser));\n          resolve(body as User);\n        } else {\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n\nexport const logout = (): AppThunk<Promise<void>> => (dispatch) => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      \"/api/v1/account/logout\",\n      {},\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          dispatch(logoutSuccess());\n          resolve();\n        } else {\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n","import { schema } from \"normalizr\";\n\nconst userSchema = new schema.Entity(\"users\");\n\nexport default userSchema;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"levelButtonGroup\":\"ChallengeAiForm_levelButtonGroup__2Bko9\",\"colorSubmits\":\"ChallengeAiForm_colorSubmits__1E4Ki\",\"colorSubmitsButton\":\"ChallengeAiForm_colorSubmitsButton__-PrWv\",\"whiteButton\":\"ChallengeAiForm_whiteButton__359Rn\",\"blackButton\":\"ChallengeAiForm_blackButton__33lZk\",\"randomButton\":\"ChallengeAiForm_randomButton__2NsHo\"};","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { JWR } from \"sails.io.js\";\nimport { normalize } from \"normalizr\";\nimport NormalizedData from \"../interfaces/NormalizedData\";\nimport { ChallengeAiData } from \"../../interfaces/ChallengeAiData\";\nimport { AppThunk } from \"../../app/store\";\nimport Game from \"../../interfaces/Game\";\nimport ioClient from \"../../services/ioClient\";\nimport gameSchema from \"../schemas/gameSchema\";\n\ninterface ChallengeState {}\n\nconst initialState: ChallengeState = {};\n\nconst challengeSlice = createSlice({\n  name: \"challenge\",\n  initialState,\n  reducers: {\n    challengeAiRequest() {},\n    challengeAiSuccess(\n      _state,\n      _action: PayloadAction<NormalizedData<number>>\n    ) {},\n    challengeAiError(_state, _action: PayloadAction<string>) {},\n  },\n  extraReducers: {},\n});\n\nexport const {\n  challengeAiRequest,\n  challengeAiSuccess,\n  challengeAiError,\n} = challengeSlice.actions;\n\nexport default challengeSlice.reducer;\n\nexport const challengeAi = (data: ChallengeAiData): AppThunk<Promise<Game>> => (\n  dispatch\n) => {\n  dispatch(challengeAiRequest());\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      `/api/v1/challenge/ai`,\n      data,\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedGame = normalize(body as Game, gameSchema);\n\n          dispatch(challengeAiSuccess(normalizedGame));\n          resolve(body as Game);\n        } else {\n          dispatch(challengeAiError(body as string));\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { normalize } from \"normalizr\";\nimport NormalizedData from \"../interfaces/NormalizedData\";\nimport { AppThunk } from \"../../app/store\";\nimport ioClient from \"../../services/ioClient\";\nimport { SubscriptionData } from \"../../interfaces/SubscriptionData\";\nimport gameSchema from \"../schemas/gameSchema\";\n\ninterface DataSubscriptionState {}\n\nconst initialState: DataSubscriptionState = {};\n\nconst dataSubscriptionSlice = createSlice({\n  name: \"dataSubscription\",\n  initialState,\n  reducers: {\n    updateGameBySubscription(\n      _state,\n      _action: PayloadAction<NormalizedData<number>>\n    ) {},\n    createGameBySubscription(\n      _state,\n      _action: PayloadAction<NormalizedData<number>>\n    ) {},\n  },\n  extraReducers: {},\n});\n\nexport const {\n  updateGameBySubscription,\n  createGameBySubscription,\n} = dataSubscriptionSlice.actions;\n\nexport default dataSubscriptionSlice.reducer;\n\nexport const watchGames = (): AppThunk<void> => (dispatch) => {\n  ioClient.socket.on(\"game\", (subscriptionData: SubscriptionData) => {\n    if (subscriptionData.verb === \"updated\") {\n      const game = {\n        ...subscriptionData.previous,\n        ...subscriptionData.data,\n      };\n\n      const normalizedGame = normalize(game, gameSchema);\n\n      dispatch(updateGameBySubscription(normalizedGame));\n    } else if (subscriptionData.verb === \"created\") {\n      const normalizedGame = normalize(subscriptionData.data, gameSchema);\n\n      dispatch(createGameBySubscription(normalizedGame));\n    }\n  });\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { JWR } from \"sails.io.js\";\nimport { normalize } from \"normalizr\";\nimport { AppThunk } from \"../../app/store\";\nimport Game from \"../../interfaces/Game\";\nimport ioClient from \"../../services/ioClient\";\nimport gameSchema from \"../schemas/gameSchema\";\nimport NormalizedData from \"../interfaces/NormalizedData\";\nimport { challengeAiSuccess } from \"./challengeSlice\";\nimport {\n  createGameBySubscription,\n  updateGameBySubscription,\n} from \"./dataSubscriptionSlice\";\n\ninterface OngoingGamesState {\n  items: number[];\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: OngoingGamesState = {\n  items: [],\n  isLoading: true,\n  error: null,\n};\n\nconst ongoingGamesSlice = createSlice({\n  name: \"ongoingGames\",\n  initialState,\n  reducers: {\n    getOngoingGamesRequest(state) {\n      state.isLoading = true;\n      state.error = null;\n    },\n    getOngoingGamesSuccess(\n      state,\n      action: PayloadAction<NormalizedData<number[]>>\n    ) {\n      state.items = action.payload.result;\n      state.isLoading = false;\n      state.error = null;\n    },\n    getOngoingGamesError(state, action: PayloadAction<string>) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n  },\n  extraReducers: {\n    [challengeAiSuccess.type]: (\n      state,\n      action: PayloadAction<NormalizedData<number>>\n    ) => {\n      if (!state.items.includes(action.payload.result)) {\n        state.items.unshift(action.payload.result);\n      }\n    },\n    [createGameBySubscription.type]: (\n      state,\n      action: PayloadAction<NormalizedData<number>>\n    ) => {\n      if (!state.items.includes(action.payload.result)) {\n        state.items.unshift(action.payload.result);\n      }\n    },\n    [updateGameBySubscription.type]: (\n      state,\n      action: PayloadAction<NormalizedData<number>>\n    ) => {\n      if (!state.items.includes(action.payload.result)) {\n        state.items.unshift(action.payload.result);\n      }\n    },\n  },\n});\n\nexport const {\n  getOngoingGamesRequest,\n  getOngoingGamesSuccess,\n  getOngoingGamesError,\n} = ongoingGamesSlice.actions;\n\nexport default ongoingGamesSlice.reducer;\n\nexport const fetchOngoingGames = (): AppThunk<Promise<Game[]>> => (\n  dispatch\n) => {\n  dispatch(getOngoingGamesRequest());\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(\"/api/v1/game/playing\", (body: unknown, jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        const normalizedGames = normalize(body as Game[], [gameSchema]);\n        dispatch(getOngoingGamesSuccess(normalizedGames));\n\n        resolve(body as Game[]);\n      } else {\n        dispatch(getOngoingGamesError(body as string));\n        reject(jwr);\n      }\n    });\n  });\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { JWR } from \"sails.io.js\";\nimport { normalize } from \"normalizr\";\nimport { AppThunk } from \"../../app/store\";\nimport Game from \"../../interfaces/Game\";\nimport ioClient from \"../../services/ioClient\";\nimport gameSchema from \"../schemas/gameSchema\";\nimport ItemErrorPayload from \"../interfaces/ItemErrorPayload\";\nimport NormalizedData from \"../interfaces/NormalizedData\";\n\ninterface SingleGameState {\n  [gameId: string]: {\n    isLoading: boolean;\n    error: string | null;\n  };\n}\n\nconst initialState: SingleGameState = {};\n\nconst singleGameSlice = createSlice({\n  name: \"singleGame\",\n  initialState,\n  reducers: {\n    getSingleGameRequest(state, action: PayloadAction<number>) {\n      state[action.payload] = {\n        isLoading: true,\n        error: null,\n      };\n    },\n    getSingleGameSuccess(state, action: PayloadAction<NormalizedData<number>>) {\n      state[action.payload.result] = {\n        isLoading: false,\n        error: null,\n      };\n    },\n    getSingleGameError(state, action: PayloadAction<ItemErrorPayload>) {\n      state[action.payload.itemId] = {\n        isLoading: false,\n        error: action.payload.error,\n      };\n    },\n  },\n  extraReducers: {},\n});\n\nexport const {\n  getSingleGameRequest,\n  getSingleGameSuccess,\n  getSingleGameError,\n} = singleGameSlice.actions;\n\nexport default singleGameSlice.reducer;\n\nexport const fetchGame = (id: number): AppThunk<Promise<Game>> => (\n  dispatch\n) => {\n  dispatch(getSingleGameRequest(id));\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(`/game/${id}`, (body: unknown, jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        const normalizedGame = normalize(body as Game, gameSchema);\n        dispatch(getSingleGameSuccess(normalizedGame));\n        resolve(body as Game);\n      } else {\n        dispatch(\n          getSingleGameError({\n            itemId: id,\n            error: body as string,\n          })\n        );\n        reject(jwr);\n      }\n    });\n  });\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { loginSuccess, registerSuccess } from \"./currentUserSlice\";\n\ninterface AuthModalState {\n  isAuthModalVisible: boolean;\n}\n\nconst initialState: AuthModalState = {\n  isAuthModalVisible: false,\n};\n\nconst authModalSlice = createSlice({\n  name: \"authModal\",\n  initialState,\n  reducers: {\n    showAuthModal(state) {\n      state.isAuthModalVisible = true;\n    },\n    hideAuthModal(state) {\n      state.isAuthModalVisible = false;\n    },\n  },\n  extraReducers: {\n    [loginSuccess.type]: (state) => {\n      state.isAuthModalVisible = false;\n    },\n    [registerSuccess.type]: (state) => {\n      state.isAuthModalVisible = false;\n    },\n  },\n});\n\nexport const { showAuthModal, hideAuthModal } = authModalSlice.actions;\n\nexport default authModalSlice.reducer;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { challengeAiSuccess } from \"./challengeSlice\";\n\ninterface ChallengeAiModalState {\n  isChallengeAiModalVisible: boolean;\n}\n\nconst initialState: ChallengeAiModalState = {\n  isChallengeAiModalVisible: false,\n};\n\nconst challengeAiModalSlice = createSlice({\n  name: \"challengeAiModal\",\n  initialState,\n  reducers: {\n    showChallengeAiModal(state) {\n      state.isChallengeAiModalVisible = true;\n    },\n    hideChallengeAiModal(state) {\n      state.isChallengeAiModalVisible = false;\n    },\n  },\n  extraReducers: {\n    [challengeAiSuccess.type]: (state) => {\n      state.isChallengeAiModalVisible = false;\n    },\n  },\n});\n\nexport const {\n  showChallengeAiModal,\n  hideChallengeAiModal,\n} = challengeAiModalSlice.actions;\n\nexport default challengeAiModalSlice.reducer;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { JWR } from \"sails.io.js\";\nimport { normalize } from \"normalizr\";\nimport NormalizedData from \"../interfaces/NormalizedData\";\nimport { AppThunk } from \"../../app/store\";\nimport Game from \"../../interfaces/Game\";\nimport ioClient from \"../../services/ioClient\";\nimport gameSchema from \"../schemas/gameSchema\";\n\ninterface MoveState {}\n\nconst initialState: MoveState = {};\n\nconst moveSlice = createSlice({\n  name: \"move\",\n  initialState,\n  reducers: {\n    makeMoveRequest() {},\n    makeMoveSuccess(_state, _action: PayloadAction<NormalizedData<number>>) {},\n    makeMoveError(_state, _action: PayloadAction<string>) {},\n  },\n  extraReducers: {},\n});\n\nexport const {\n  makeMoveRequest,\n  makeMoveSuccess,\n  makeMoveError,\n} = moveSlice.actions;\n\nexport default moveSlice.reducer;\n\nexport const makeMove = (\n  gameId: number,\n  move: string\n): AppThunk<Promise<Game>> => (dispatch) => {\n  dispatch(makeMoveRequest());\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      `/api/v1/board/game/${gameId}/move/${move}`,\n      {},\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedGame = normalize(body as Game, gameSchema);\n\n          dispatch(makeMoveSuccess(normalizedGame));\n          resolve(body as Game);\n        } else {\n          dispatch(makeMoveError(body as string));\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n"],"sourceRoot":""}