{"version":3,"sources":["utils/makeChessInstance.ts","components/GamePreviewsList.tsx","services/ioClient.ts","services/api.ts","containers/OngoingGamesContainer.reducer.ts","containers/OngoingGamesContainer.tsx","pages/HomePage.tsx","components/SingleGame.tsx","utils/getTurnColor.ts","containers/SingleGameContainer.tsx","pages/GamePage.tsx","App.tsx","serviceWorker.ts","index.tsx","components/GamePreviewsList.module.scss"],"names":["game","initialFen","chess","Chess","moves","split","forEach","move","sloppy","GamePreviewsList","games","className","css","grid","map","item","fen","makeChessInstance","to","id","key","cell","position","viewOnly","width","ioClient","sailsIOClient","socketIOClient","sails","url","watchGames","cb","socket","on","msg","reducer","createReducer","GET_GAMES","state","payload","UPDATE_GAME","subscriptionData","previous","data","index","findIndex","itemIndex","CREATE_GAME","OngoingGamesContainer","useReducer","dispatch","useEffect","mounted","Promise","resolve","reject","get","body","jwr","statusCode","then","res","type","verb","HomePage","SingleGame","onMove","check","in_check","turnColor","turn","getTurnColor","PieceColor","WHITE","BLACK","validMoves","getValidMoves","allowMarkers","clickable","draggable","status","SingleGameContainer","useState","setGame","getGame","from","trim","gameId","post","makeMove","updatedGame","GamePage","useParams","Number","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.005e5d4a.chunk.js","sourcesContent":["import { Chess, ChessInstance } from \"chess.js\";\nimport Game from \"../interfaces/Game\";\n\nconst startPositionFen =\n  \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n\nexport default (game: Game): ChessInstance => {\n  let { initialFen } = game;\n  if (initialFen === \"startpos\") {\n    initialFen = startPositionFen;\n  }\n\n  const chess = new Chess(initialFen);\n\n  if (game.moves) {\n    game.moves.split(\" \").forEach((move) => {\n      chess.move(move, {\n        sloppy: true,\n      });\n    });\n  }\n\n  return chess;\n};\n","import React, { FC } from \"react\";\nimport { Board } from \"ii-react-chessboard\";\nimport { Link } from \"react-router-dom\";\nimport Game from \"../interfaces/Game\";\nimport css from \"./GamePreviewsList.module.scss\";\nimport makeChessInstance from \"../utils/makeChessInstance\";\n\nexport interface GamePreviewsListProps {\n  games?: Game[];\n}\n\nexport const GamePreviewsList: FC<GamePreviewsListProps> = ({ games = [] }) => {\n  return (\n    <div className={css.grid}>\n      {games.map((item) => {\n        const fen: string = makeChessInstance(item).fen();\n\n        return (\n          <Link to={`/game/${item.id}`} key={item.id}>\n            <div className={css.cell}>\n              <Board position={fen} viewOnly={false} width={240} />\n            </div>\n          </Link>\n        );\n      })}\n    </div>\n  );\n};\n","import socketIOClient from \"socket.io-client\";\nimport sailsIOClient from \"sails.io.js\";\n\nconst ioClient = sailsIOClient(socketIOClient);\n\nioClient.sails.url = \"http://localhost:1337\";\n\nexport default ioClient;\n","import { JWR } from \"sails.io.js\";\nimport Game from \"../interfaces/Game\";\nimport ioClient from \"./ioClient\";\nimport { SubscriptionData } from \"../interfaces/SubscriptionData\";\n\nexport const getOngoingGames = (): Promise<Game[]> => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(\"/api/v1/game/playing\", (body: Game[], jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        resolve(body);\n      } else {\n        reject(jwr);\n      }\n    });\n  });\n};\n\nexport const watchGames = (cb: (data: SubscriptionData) => void): void => {\n  ioClient.socket.on(\"game\", (msg: SubscriptionData) => {\n    cb(msg);\n  });\n};\n\nexport const getGame = (id: number): Promise<Game> => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(`/game/${id}`, (body: Game, jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        resolve(body);\n      } else {\n        reject(jwr);\n      }\n    });\n  });\n};\n\nexport const makeMove = (gameId: number, move: string): Promise<Game> => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      `/api/v1/board/game/${gameId}/move/${move}`,\n      {},\n      (body: Game, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          resolve(body);\n        } else {\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { findIndex } from \"lodash\";\nimport Game from \"../interfaces/Game\";\nimport { SubscriptionData } from \"../interfaces/SubscriptionData\";\n\nexport interface State {\n  games: Game[];\n}\n\nexport type Action =\n  | { type: \"GET_GAMES\"; payload: Game[] }\n  | { type: \"UPDATE_GAME\"; payload: SubscriptionData }\n  | { type: \"CREATE_GAME\"; payload: SubscriptionData };\n\nconst getGames = (state: State, { payload }: Action): State => ({\n  games: payload as Game[],\n});\n\nconst updateGame = (state: State, { payload }: Action): State => {\n  const subscriptionData = payload as SubscriptionData;\n\n  const game = {\n    ...subscriptionData.previous,\n    ...subscriptionData.data,\n  };\n\n  const index: number = findIndex(state.games, {\n    id: subscriptionData.id,\n  });\n\n  if (index !== -1) {\n    return {\n      games: state.games.map((item, itemIndex) => {\n        if (itemIndex === index) {\n          return game;\n        }\n        return item;\n      }),\n    };\n  }\n\n  return {\n    games: [...state.games, game],\n  };\n};\n\nconst createGame = (state: State, { payload }: Action): State => ({\n  games: [...state.games, (payload as SubscriptionData).data],\n});\n\nexport const reducer = createReducer<State>(\n  {\n    games: [],\n  },\n  {\n    GET_GAMES: getGames,\n    UPDATE_GAME: updateGame,\n    CREATE_GAME: createGame,\n  }\n);\n","/* eslint-disable import/prefer-default-export */\n\nimport React, { FC, useEffect, useReducer } from \"react\";\nimport { GamePreviewsList } from \"../components/GamePreviewsList\";\nimport { getOngoingGames, watchGames } from \"../services/api\";\nimport { reducer } from \"./OngoingGamesContainer.reducer\";\n\nexport const OngoingGamesContainer: FC<unknown> = () => {\n  const [state, dispatch] = useReducer(reducer, {\n    games: [],\n  });\n\n  useEffect(() => {\n    let mounted = true;\n\n    getOngoingGames().then((res) => {\n      if (!mounted) {\n        return;\n      }\n\n      dispatch({ type: \"GET_GAMES\", payload: res });\n    });\n\n    watchGames((subscriptionData) => {\n      if (!mounted) {\n        return;\n      }\n\n      if (subscriptionData.verb === \"updated\") {\n        dispatch({ type: \"UPDATE_GAME\", payload: subscriptionData });\n      } else if (subscriptionData.verb === \"created\") {\n        dispatch({ type: \"CREATE_GAME\", payload: subscriptionData });\n      }\n    });\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return <GamePreviewsList games={state.games} />;\n};\n","import React, { FC } from \"react\";\nimport { OngoingGamesContainer } from \"../containers/OngoingGamesContainer\";\n\nconst HomePage: FC<unknown> = () => {\n  return <OngoingGamesContainer />;\n};\n\nexport default HomePage;\n","import React, { FC } from \"react\";\nimport { ChessInstance } from \"chess.js\";\nimport {\n  Board,\n  getValidMoves,\n  Move,\n  PieceColor,\n  ValidMoves,\n} from \"ii-react-chessboard\";\nimport Game from \"../interfaces/Game\";\nimport makeChessInstance from \"../utils/makeChessInstance\";\nimport getTurnColor from \"../utils/getTurnColor\";\n\nexport interface SingleGameProps {\n  game?: Game;\n  onMove?(move: Move): void;\n}\n\nexport const SingleGame: FC<SingleGameProps> = ({ game, onMove }) => {\n  if (!game) {\n    return null;\n  }\n\n  const chess: ChessInstance = makeChessInstance(game);\n\n  const check: boolean = chess.in_check();\n\n  const fen: string = chess.fen();\n\n  const turnColor: PieceColor =\n    getTurnColor(chess) === \"white\" ? PieceColor.WHITE : PieceColor.BLACK;\n\n  const validMoves: ValidMoves = getValidMoves(chess);\n\n  return (\n    <Board\n      allowMarkers\n      check={check}\n      clickable\n      draggable\n      position={fen}\n      turnColor={turnColor}\n      validMoves={validMoves}\n      viewOnly={game.status !== \"started\"}\n      onMove={onMove}\n    />\n  );\n};\n","import { ChessInstance } from \"chess.js\";\nimport { PieceColor } from \"../types/PieceColor\";\n\nexport default (chess: ChessInstance): PieceColor => {\n  return chess.turn() === \"w\" ? \"white\" : \"black\";\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\n\nimport React, { FC, useEffect, useState } from \"react\";\nimport { Move } from \"ii-react-chessboard\";\nimport { getGame, makeMove, watchGames } from \"../services/api\";\nimport Game from \"../interfaces/Game\";\nimport { SingleGame } from \"../components/SingleGame\";\n\nexport interface SingleGameContainerProps {\n  id: number;\n}\n\nexport const SingleGameContainer: FC<SingleGameContainerProps> = ({ id }) => {\n  const [game, setGame] = useState<Game | null>(null);\n\n  useEffect(() => {\n    let mounted = true;\n\n    getGame(id).then((res) => {\n      if (!mounted) {\n        return;\n      }\n\n      setGame(res);\n    });\n\n    watchGames((subscriptionData) => {\n      if (!mounted) {\n        return;\n      }\n\n      if (subscriptionData.id === id) {\n        if (subscriptionData.verb === \"updated\") {\n          setGame({\n            ...subscriptionData.previous,\n            ...subscriptionData.data,\n          });\n        }\n      }\n    });\n\n    return () => {\n      mounted = false;\n    };\n  }, [id]);\n\n  const onMove = (move: Move) => {\n    setGame({\n      ...(game as Game),\n      moves: `${game!.moves} ${move.from}${move.to}`.trim(),\n    });\n\n    makeMove(id, `${move.from}${move.to}`).then((updatedGame) => {\n      setGame(updatedGame);\n    });\n  };\n\n  if (game) {\n    return <SingleGame game={game} onMove={onMove} />;\n  }\n  return null;\n};\n","import React, { FC } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { SingleGameContainer } from \"../containers/SingleGameContainer\";\n\nconst GamePage: FC<unknown> = () => {\n  const { id } = useParams();\n\n  return <SingleGameContainer id={Number(id)} />;\n};\n\nexport default GamePage;\n","import React, { FC } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport GamePage from \"./pages/GamePage\";\n\nconst App: FC = () => {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/game/:id\">\n            <GamePage />\n          </Route>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"GamePreviewsList_grid__2dFgV\"};"],"sourceRoot":""}