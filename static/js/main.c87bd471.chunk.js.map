{"version":3,"sources":["features/game-clock/gameClockSlice.ts","features/ongoing-games/GamePreviewsList.module.scss","features/single-game/GameMoves.module.scss","normalizr/schemas/gameSchema.ts","services/ioClient.ts","features/current-user/currentUserSlice.ts","features/ongoing-games/GamePreviewsList.tsx","features/ongoing-games/OngoingGamesContainer.tsx","features/challenge-ai-modal/ChallengeAiForm.tsx","features/challenge-ai-modal/ChallengeAiFormContainer.tsx","pages/HomePage.tsx","features/single-game/GameMeta.tsx","utils/getGameStatusText.ts","features/single-game/GameClock.tsx","features/single-game/GameMoves.tsx","features/single-game/GameControlPanelUserName.tsx","features/single-game/GameControlPanelTopToolbar.tsx","features/single-game/GameControlPanelBottomToolbar.tsx","features/single-game/GameControlPanel.tsx","features/single-game/SingleGame.tsx","features/single-game/SingleGameContainer.tsx","pages/GamePage.tsx","features/auth-modal/LoginForm.tsx","features/auth-modal/RegistrationForm.tsx","features/auth-modal/LoginTabsContainer.tsx","app/App.tsx","serviceWorker.ts","features/entities/entitiesSlice.ts","app/rootReducer.ts","app/store.ts","index.tsx","utils/makeChessInstance.ts","normalizr/schemas/userSchema.ts","features/single-game/singleGameSlice.ts","features/challenge-ai-modal/ChallengeAiForm.module.scss","features/challenge/challengeSlice.ts","features/data-subscription/dataSubscriptionSlice.ts","features/ongoing-games/ongoingGamesSlice.ts","features/auth-modal/authModalSlice.ts","features/challenge-ai-modal/challengeAiModalSlice.ts","features/move/moveSlice.ts"],"names":["gameClockSlice","createSlice","name","initialState","reducers","oneSecondPassed","extraReducers","actions","startGameClock","dispatch","setInterval","module","exports","gameSchema","schema","Entity","white","userSchema","black","ioClient","sailsIOClient","socketIOClient","sails","url","currentUserSlice","userId","isLoading","error","getCurrentUserRequest","state","getCurrentUserSuccess","action","payload","result","getCurrentUserError","loginSuccess","registerSuccess","logoutSuccess","fetchCurrentUser","Promise","resolve","reject","socket","get","body","jwr","statusCode","normalizedUser","normalize","login","data","put","emailAddress","email","password","register","post","fullName","confirmPassword","agreed","logout","GamePreviewsList","games","className","css","grid","map","item","fen","makeChessInstance","to","id","key","cell","position","viewOnly","width","OngoingGamesContainer","useDispatch","items","useSelector","denormalize","ongoingGames","entities","useEffect","fetchOngoingGames","ChallengeAiForm","onSubmit","initialValues","level","color","clockLimit","clockIncrement","values","formikHelpers","handleChange","handleBlur","handleSubmit","isSubmitting","status","setStatus","setFieldValue","Form","noValidate","e","onChange","Alert","variant","Group","Label","Control","type","onBlur","value","min","max","step","Row","ButtonGroup","cx","levelButtonGroup","Button","onClick","colorSubmits","disabled","title","colorSubmitsButton","blackButton","randomButton","whiteButton","ChallengeAiFormContainer","history","useHistory","challengeAiAndOpenGamePage","useCallback","challengeAi","then","game","push","catch","err","HomePage","isChallengeAiModalVisible","challengeAiModal","Modal","show","onHide","hideChallengeAiModal","animation","Header","closeButton","Title","Body","showChallengeAiModal","GameMeta","winner","getGameStatusText","data-testid","aiLevel","GameClock","time","formattedTime","moment","startOf","milliseconds","format","formatMove","move","from","GameMoves","rewindToMoveIndex","onRewindToMove","movesHistory","verbose","movesPairs","_chunk","makeRewindToMoveHandler","moveIndex","pair","index","role","selected","GameControlPanelUserName","GameControlPanelTopToolbar","isFirstMove","isLastMove","hasPrevMove","hasNextMove","onFlipBoard","onRewindToPrevMove","onRewindToNextMove","onRewindToFirstMove","onRewindToLastMove","handleFlipBoard","handleRewindToPrevMove","handleRewindToNextMove","handleRewindToFirstMove","handleRewindToLastMove","GameControlPanelBottomToolbar","canAbortGame","onAbortGame","onOfferDraw","onResignGame","handleAbortGame","handleOfferDraw","handleResignGame","GameControlPanel","orientation","length","btime","wtime","SingleGame","currentUser","isFlipped","onMove","movableColor","chessWithAllMoves","chess","check","in_check","turnColor","turn","PieceColor","WHITE","BLACK","validMoves","getValidMoves","lastMoveSquares","lastMove","allowMarkers","clickable","draggable","SingleGameContainer","singleGameItemState","singleGame","defaultSingleGameItemState","fetchGame","abortGame","handleMove","makeMove","flipBoard","handleRewindToMove","rewindToMove","gameId","GamePage","useParams","Number","loginSchema","Yup","shape","required","LoginForm","validationSchema","errors","touched","placeholder","isValid","isInvalid","Feedback","registrationSchema","equals","RegistrationForm","LoginTabsContainer","doLogin","React","doSignUp","Tabs","transition","Tab","eventKey","App","isAuthModalVisible","authModal","watchGames","showAuthModal","hideAuthModal","path","Boolean","window","location","hostname","match","getNormalizedDataReducer","Object","assign","users","entitiesSlice","getOngoingGamesSuccess","getSingleGameSuccess","abortGameSuccess","challengeAiSuccess","updateGameBySubscription","createGameBySubscription","makeMoveRequest","moves","trim","makeMoveSuccess","keys","forEach","timePropName","rootReducer","combineReducers","authModalReducer","challengeAiModalReducer","currentUserReducer","ongoingGamesReducer","entitiesReducer","singleGameReducer","store","configureStore","reducer","require","default","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message","startPositionFen","initialFen","Chess","split","sloppy","Error","singleGameSlice","getSingleGameRequest","getSingleGameError","itemId","abortGameRequest","_state","_action","abortGameError","normalizedGame","challengeSlice","challengeAiRequest","challengeAiError","dataSubscriptionSlice","on","subscriptionData","verb","previous","ongoingGamesSlice","getOngoingGamesRequest","getOngoingGamesError","includes","unshift","normalizedGames","authModalSlice","challengeAiModalSlice","moveSlice","makeMoveError"],"mappings":"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","file":"static/js/main.c87bd471.chunk.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { AppThunk } from \"../../app/store\";\n\ninterface GameClockState {}\n\nconst initialState: GameClockState = {};\n\nconst gameClockSlice = createSlice({\n  name: \"gameClock\",\n  initialState,\n  reducers: {\n    oneSecondPassed() {},\n  },\n  extraReducers: {},\n});\n\nexport const { oneSecondPassed } = gameClockSlice.actions;\n\nexport default gameClockSlice.reducer;\n\nexport const startGameClock = (): AppThunk<void> => (dispatch) => {\n  setInterval(() => {\n    dispatch(oneSecondPassed());\n  }, 1000);\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"GamePreviewsList_grid__3uPGL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected\":\"GameMoves_selected__2FXRO\"};","import { schema } from \"normalizr\";\nimport userSchema from \"./userSchema\";\n\nconst gameSchema = new schema.Entity(\"games\", {\n  white: userSchema,\n  black: userSchema,\n});\n\nexport default gameSchema;\n","import socketIOClient from \"socket.io-client\";\nimport sailsIOClient from \"sails.io.js\";\n\nconst ioClient = sailsIOClient(socketIOClient);\n\nioClient.sails.url = \"http://localhost:1337\";\n\nexport default ioClient;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { normalize } from \"normalizr\";\nimport { JWR } from \"sails.io.js\";\nimport { AppThunk } from \"../../app/store\";\nimport ioClient from \"../../services/ioClient\";\nimport User from \"../../interfaces/User\";\nimport LoginData from \"../../interfaces/LoginData\";\nimport SignUpData from \"../../interfaces/SignUpData\";\nimport userSchema from \"../../normalizr/schemas/userSchema\";\nimport NormalizedData from \"../../normalizr/interfaces/NormalizedData\";\n\ninterface CurrentUserState {\n  userId: number | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: CurrentUserState = {\n  userId: null,\n  isLoading: true,\n  error: null,\n};\n\nconst currentUserSlice = createSlice({\n  name: \"currentUser\",\n  initialState,\n  reducers: {\n    getCurrentUserRequest(state) {\n      state.isLoading = true;\n      state.error = null;\n    },\n    getCurrentUserSuccess(\n      state,\n      action: PayloadAction<NormalizedData<number> | null>\n    ) {\n      state.userId = action.payload ? action.payload.result : null;\n      state.isLoading = false;\n      state.error = null;\n    },\n    getCurrentUserError(state, action: PayloadAction<string>) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    loginSuccess(state, action: PayloadAction<NormalizedData<number>>) {\n      state.userId = action.payload.result;\n    },\n    registerSuccess(state, action: PayloadAction<NormalizedData<number>>) {\n      state.userId = action.payload.result;\n    },\n    logoutSuccess(state) {\n      state.userId = null;\n    },\n  },\n});\n\nexport const {\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n  loginSuccess,\n  registerSuccess,\n  logoutSuccess,\n} = currentUserSlice.actions;\n\nexport default currentUserSlice.reducer;\n\nexport const fetchCurrentUser = (): AppThunk<Promise<User | null>> => (\n  dispatch\n) => {\n  dispatch(getCurrentUserRequest());\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(\"/api/v1/account/me\", (body: unknown, jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        const normalizedUser = normalize(body as User, userSchema);\n\n        dispatch(getCurrentUserSuccess(normalizedUser));\n        resolve(body as User);\n      } else if (jwr.statusCode === 401) {\n        dispatch(getCurrentUserSuccess(null));\n        resolve(null);\n      } else {\n        dispatch(getCurrentUserError(body as string));\n        reject(jwr);\n      }\n    });\n  });\n};\n\nexport const login = (data: LoginData): AppThunk<Promise<User>> => (\n  dispatch\n) => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.put(\n      \"/api/v1/entrance/login\",\n      {\n        // rememberMe: true, // because of warning in backend @see https://tracker.yandex.ru/CHESSPWA-47\n        emailAddress: data.email,\n        password: data.password,\n      },\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedUser = normalize(body as User, userSchema);\n\n          dispatch(loginSuccess(normalizedUser));\n          resolve(body as User);\n        } else {\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n\nexport const register = (data: SignUpData): AppThunk<Promise<User>> => (\n  dispatch\n) => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      \"/api/v1/entrance/signup\",\n      {\n        fullName: data.fullName,\n        emailAddress: data.email,\n        password: data.password,\n        confirmPassword: data.password,\n        agreed: true,\n      },\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedUser = normalize(body as User, userSchema);\n\n          dispatch(registerSuccess(normalizedUser));\n          resolve(body as User);\n        } else {\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n\nexport const logout = (): AppThunk<Promise<void>> => (dispatch) => {\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      \"/api/v1/account/logout\",\n      {},\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          dispatch(logoutSuccess());\n          resolve();\n        } else {\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n","import React, { FC } from \"react\";\nimport { Board } from \"ii-react-chessboard\";\nimport { Link } from \"react-router-dom\";\nimport Game from \"../../interfaces/Game\";\nimport css from \"./GamePreviewsList.module.scss\";\nimport makeChessInstance from \"../../utils/makeChessInstance\";\n\nexport interface GamePreviewsListProps {\n  games?: Game[];\n}\n\nexport const GamePreviewsList: FC<GamePreviewsListProps> = ({ games = [] }) => {\n  return (\n    <div className={css.grid}>\n      {games.map((item) => {\n        const fen: string = makeChessInstance(item).fen();\n\n        return (\n          <Link to={`/game/${item.id}`} key={item.id}>\n            <div className={css.cell}>\n              <Board position={fen} viewOnly={false} width={240} />\n            </div>\n          </Link>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { FC, useEffect } from \"react\";\nimport { denormalize } from \"normalizr\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GamePreviewsList } from \"./GamePreviewsList\";\nimport { RootState } from \"../../app/rootReducer\";\nimport { fetchOngoingGames } from \"./ongoingGamesSlice\";\nimport gameSchema from \"../../normalizr/schemas/gameSchema\";\n\nconst OngoingGamesContainer: FC<unknown> = () => {\n  const dispatch = useDispatch();\n\n  const items = useSelector((state: RootState) =>\n    denormalize(state.ongoingGames.items, [gameSchema], state.entities)\n  );\n\n  useEffect(() => {\n    dispatch(fetchOngoingGames());\n  }, [dispatch]);\n\n  return <GamePreviewsList games={items} />;\n};\n\nexport default OngoingGamesContainer;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Formik, FormikHelpers } from \"formik\";\nimport React, { FC, FormEvent } from \"react\";\nimport cx from \"classnames\";\nimport { Alert, Button, ButtonGroup, Form, Row } from \"react-bootstrap\";\nimport { ChallengeAiData } from \"../../interfaces/ChallengeAiData\";\nimport css from \"./ChallengeAiForm.module.scss\";\n\nexport interface ChallengeAiFormProps {\n  onSubmit?(\n    values: ChallengeAiData,\n    formikHelpers: FormikHelpers<ChallengeAiData>\n  ): void | Promise<any>;\n}\n\nexport const ChallengeAiForm: FC<ChallengeAiFormProps> = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{\n        level: 3,\n        color: \"\",\n        clockLimit: 300,\n        clockIncrement: 3,\n      }}\n      onSubmit={(values, formikHelpers): Promise<any> | void => {\n        if (onSubmit) {\n          return onSubmit(\n            values as ChallengeAiData,\n            formikHelpers as FormikHelpers<ChallengeAiData>\n          );\n        }\n        return undefined;\n      }}\n    >\n      {({\n        values,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        status,\n        setStatus,\n        setFieldValue,\n        /* and other goodies */\n      }) => (\n        <Form\n          noValidate\n          onSubmit={(e) => handleSubmit(e as FormEvent<HTMLFormElement>)}\n          onChange={() => setStatus(\"\")}\n        >\n          {!!status && <Alert variant=\"danger\">{status}</Alert>}\n          <fieldset>\n            <Form.Group>\n              <Form.Label>\n                Minutes per side: {values.clockLimit / 60}\n              </Form.Label>\n              <Form.Control\n                type=\"range\"\n                name=\"clockLimit\"\n                onBlur={handleBlur}\n                value={values.clockLimit}\n                onChange={handleChange}\n                min=\"60\"\n                max=\"1800\"\n                step=\"60\"\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>\n                Increment in seconds: {values.clockIncrement}\n              </Form.Label>\n              <Form.Control\n                type=\"range\"\n                name=\"clockIncrement\"\n                onBlur={handleBlur}\n                value={values.clockIncrement}\n                onChange={handleChange}\n                min=\"0\"\n                max=\"60\"\n              />\n            </Form.Group>\n          </fieldset>\n\n          <div className=\"text-center\">Level</div>\n\n          <Row>\n            <ButtonGroup className={cx(\"mx-auto\", css.levelButtonGroup)}>\n              {[1, 2, 3, 4].map((level) => (\n                <Button\n                  key={level}\n                  type=\"button\"\n                  variant={level === values.level ? \"dark\" : \"light\"}\n                  onClick={() => setFieldValue(\"level\", level)}\n                >\n                  {level}\n                </Button>\n              ))}\n            </ButtonGroup>\n          </Row>\n\n          <div className=\"text-center\">A.I. Level: {values.level}</div>\n\n          <div className={css.colorSubmits}>\n            <button\n              disabled={isSubmitting}\n              type=\"submit\"\n              title=\"Black\"\n              className={cx(css.colorSubmitsButton, css.blackButton)}\n              onClick={() => setFieldValue(\"color\", \"black\")}\n            >\n              <i />\n            </button>\n            <button\n              disabled={isSubmitting}\n              type=\"submit\"\n              title=\"Random side\"\n              className={cx(css.colorSubmitsButton, css.randomButton)}\n              onClick={() => setFieldValue(\"color\", \"random\")}\n            >\n              <i />\n            </button>\n            <button\n              disabled={isSubmitting}\n              type=\"submit\"\n              title=\"White\"\n              className={cx(css.colorSubmitsButton, css.whiteButton)}\n              onClick={() => setFieldValue(\"color\", \"white\")}\n            >\n              <i />\n            </button>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import React, { FC, useCallback } from \"react\";\nimport { FormikHelpers } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { ChallengeAiForm } from \"./ChallengeAiForm\";\nimport { AppDispatch } from \"../../app/store\";\nimport { challengeAi } from \"../challenge/challengeSlice\";\nimport { ChallengeAiData } from \"../../interfaces/ChallengeAiData\";\nimport Game from \"../../interfaces/Game\";\n\nconst ChallengeAiFormContainer: FC<unknown> = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const history = useHistory();\n\n  const challengeAiAndOpenGamePage = useCallback(\n    (\n      values: ChallengeAiData,\n      formikHelpers: FormikHelpers<ChallengeAiData>\n    ) => {\n      return dispatch(challengeAi(values))\n        .then((game: Game) => {\n          history.push(`/game/${game.id}`);\n        })\n        .catch((err) => {\n          if (err.statusCode === 401) {\n            formikHelpers.setStatus(\"You must log in to play with computer\");\n          } else {\n            formikHelpers.setStatus(\"Internal server error\");\n          }\n        });\n    },\n    [dispatch, history]\n  );\n\n  return <ChallengeAiForm onSubmit={challengeAiAndOpenGamePage} />;\n};\n\nexport default ChallengeAiFormContainer;\n","import React, { FC } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport OngoingGamesContainer from \"../features/ongoing-games/OngoingGamesContainer\";\nimport ChallengeAiFormContainer from \"../features/challenge-ai-modal/ChallengeAiFormContainer\";\n\nimport { RootState } from \"../app/rootReducer\";\nimport {\n  hideChallengeAiModal,\n  showChallengeAiModal,\n} from \"../features/challenge-ai-modal/challengeAiModalSlice\";\nimport { AppDispatch } from \"../app/store\";\n\nconst HomePage: FC<unknown> = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const { isChallengeAiModalVisible } = useSelector(\n    (state: RootState) => state.challengeAiModal\n  );\n\n  return (\n    <>\n      <Modal\n        show={isChallengeAiModalVisible}\n        onHide={() => dispatch(hideChallengeAiModal())}\n        animation={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Play with the computer</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <ChallengeAiFormContainer />\n        </Modal.Body>\n      </Modal>\n      <Button\n        variant=\"primary\"\n        onClick={() => dispatch(showChallengeAiModal())}\n      >\n        Play with the computer\n      </Button>\n      <OngoingGamesContainer />\n    </>\n  );\n};\n\nexport default HomePage;\n","import React, { FC } from \"react\";\nimport Game from \"../../interfaces/Game\";\nimport getGameStatusText from \"../../utils/getGameStatusText\";\n\nexport interface GameMetaProps {\n  game?: Game;\n}\n\nexport const GameMeta: FC<GameMetaProps> = ({ game }) => {\n  if (!game) {\n    return null;\n  }\n\n  return (\n    <>\n      <div>{getGameStatusText(game)}</div>\n      <div>\n        {game.clockLimit / 60} + {game.clockIncrement}\n      </div>\n      <div data-testid=\"white-user\">\n        White: {game.white ? game.white.fullName : `AI level ${game.aiLevel}`}\n      </div>\n      <div data-testid=\"black-user\">\n        Black: {game.black ? game.black.fullName : `AI level ${game.aiLevel}`}\n      </div>\n    </>\n  );\n};\n","import Game from \"../interfaces/Game\";\n\nexport default (game: Game): string => {\n  if (game.status === \"outoftime\") {\n    if (game.winner === \"white\") {\n      return \"Time out • White is victorious\";\n    }\n    if (game.winner === \"black\") {\n      return \"Time out • Black is victorious\";\n    }\n  }\n\n  if (game.status === \"resign\") {\n    if (game.winner === \"black\") {\n      return \"White resigned • Black is victorious\";\n    }\n    if (game.winner === \"white\") {\n      return \"Black resigned • White is victorious\";\n    }\n  }\n\n  if (game.status === \"aborted\") {\n    return \"Game aborted\";\n  }\n\n  if (game.status === \"mate\") {\n    if (game.winner === \"white\") {\n      return \"Checkmate • White is victorious\";\n    }\n    if (game.winner === \"black\") {\n      return \"Checkmate • Black is victorious\";\n    }\n  }\n\n  if (game.status === \"draw\") {\n    return \"Draw\";\n  }\n\n  if (game.status === \"stalemate\") {\n    return \"Stalemate\";\n  }\n\n  return \"Playing right now\";\n};\n","import React, { FC } from \"react\";\nimport moment from \"moment\";\n\nexport interface GameClockProps {\n  time?: number; // in msec\n}\n\nexport const GameClock: FC<GameClockProps> = ({ time = 0 }) => {\n  const formattedTime = moment()\n    .startOf(\"day\")\n    .milliseconds(time)\n    .format(\"mm : ss\");\n\n  return <div data-testid=\"time\">{formattedTime}</div>;\n};\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable jsx-a11y/click-events-have-key-events */ // @todo\n/* eslint-disable jsx-a11y/interactive-supports-focus */ // @todo\n\nimport React, { FC } from \"react\";\nimport { chunk as _chunk } from \"lodash\";\nimport { Move } from \"chess.js\";\nimport cx from \"classnames\";\nimport Game from \"../../interfaces/Game\";\nimport makeChessInstance from \"../../utils/makeChessInstance\";\nimport css from \"./GameMoves.module.scss\";\n\nexport interface GameMovesProps {\n  game?: Game;\n  rewindToMoveIndex?: number | null;\n  onRewindToMove?(moveIndex: number): void;\n}\n\nconst formatMove = (move: Move): string => {\n  return `${move.from}${move.to}`;\n};\n\nexport const GameMoves: FC<GameMovesProps> = ({\n  game,\n  rewindToMoveIndex = null,\n  onRewindToMove,\n}) => {\n  if (!game) {\n    return null;\n  }\n\n  const chess = makeChessInstance(game);\n\n  const movesHistory = chess.history({ verbose: true });\n\n  const movesPairs = _chunk(movesHistory, 2);\n\n  const makeRewindToMoveHandler = (moveIndex: number) => {\n    return () => {\n      if (onRewindToMove) {\n        onRewindToMove(moveIndex);\n      }\n    };\n  };\n\n  return (\n    <table>\n      <tbody>\n        {movesPairs.map((pair, index) => (\n          <tr key={`move-${index}`}>\n            <td>{index + 1}</td>\n            <td>\n              <div\n                data-testid={`move-${index * 2}`}\n                onClick={makeRewindToMoveHandler(index * 2)}\n                role=\"button\"\n                className={cx({\n                  [css.selected]: rewindToMoveIndex === index * 2,\n                })}\n              >\n                {formatMove(pair[0])}\n              </div>\n            </td>\n            <td>\n              {pair[1] && (\n                <div\n                  data-testid={`move-${index * 2 + 1}`}\n                  onClick={makeRewindToMoveHandler(index * 2 + 1)}\n                  role=\"button\"\n                  className={cx({\n                    [css.selected]: rewindToMoveIndex === index * 2 + 1,\n                  })}\n                >\n                  {formatMove(pair[1])}\n                </div>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\n\nimport React, { FC } from \"react\";\nimport Game from \"../../interfaces/Game\";\nimport { PieceColor } from \"../../types/PieceColor\";\n\nexport interface GameControlPanelUserNameProps {\n  game?: Game;\n  color?: PieceColor;\n}\n\nexport const GameControlPanelUserName: FC<GameControlPanelUserNameProps> = ({\n  game,\n  color = \"white\",\n}) => {\n  if (!game) {\n    return null;\n  }\n\n  return (\n    <div>\n      {game[color] ? game[color]!.fullName : `AI level ${game.aiLevel}`}\n    </div>\n  );\n};\n","import React, { FC, useCallback } from \"react\";\n\nexport interface GameControlPanelTopToolbarProps {\n  isFirstMove?: boolean;\n  isLastMove?: boolean;\n  hasPrevMove?: boolean;\n  hasNextMove?: boolean;\n  onFlipBoard?(): void;\n  onRewindToPrevMove?(): void;\n  onRewindToNextMove?(): void;\n  onRewindToFirstMove?(): void;\n  onRewindToLastMove?(): void;\n}\n\nexport const GameControlPanelTopToolbar: FC<GameControlPanelTopToolbarProps> = ({\n  isFirstMove = false,\n  isLastMove = false,\n  hasPrevMove = false,\n  hasNextMove = false,\n  onFlipBoard,\n  onRewindToPrevMove,\n  onRewindToNextMove,\n  onRewindToFirstMove,\n  onRewindToLastMove,\n}) => {\n  const handleFlipBoard = useCallback(() => {\n    if (onFlipBoard) {\n      onFlipBoard();\n    }\n  }, [onFlipBoard]);\n  const handleRewindToPrevMove = useCallback(() => {\n    if (onRewindToPrevMove) {\n      onRewindToPrevMove();\n    }\n  }, [onRewindToPrevMove]);\n  const handleRewindToNextMove = useCallback(() => {\n    if (onRewindToNextMove) {\n      onRewindToNextMove();\n    }\n  }, [onRewindToNextMove]);\n  const handleRewindToFirstMove = useCallback(() => {\n    if (onRewindToFirstMove) {\n      onRewindToFirstMove();\n    }\n  }, [onRewindToFirstMove]);\n  const handleRewindToLastMove = useCallback(() => {\n    if (onRewindToLastMove) {\n      onRewindToLastMove();\n    }\n  }, [onRewindToLastMove]);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        data-testid=\"flip-board-btn\"\n        onClick={handleFlipBoard}\n      >\n        Flip board\n      </button>\n      <button\n        type=\"button\"\n        data-testid=\"rewind-to-prev-move-btn\"\n        onClick={handleRewindToPrevMove}\n        disabled={!hasPrevMove}\n      >\n        Rewind to prev move\n      </button>\n      <button\n        type=\"button\"\n        data-testid=\"rewind-to-first-move-btn\"\n        onClick={handleRewindToFirstMove}\n        disabled={isFirstMove}\n      >\n        Rewind to first move\n      </button>\n      <button\n        type=\"button\"\n        data-testid=\"rewind-to-last-move-btn\"\n        onClick={handleRewindToLastMove}\n        disabled={isLastMove}\n      >\n        Rewind to last move\n      </button>\n      <button\n        type=\"button\"\n        data-testid=\"rewind-to-next-move-btn\"\n        onClick={handleRewindToNextMove}\n        disabled={!hasNextMove}\n      >\n        Rewind to next move\n      </button>\n    </>\n  );\n};\n","import React, { FC, useCallback } from \"react\";\n\nexport interface GameControlPanelBottomToolbarProps {\n  canAbortGame?: boolean;\n  onAbortGame?(): void;\n  onOfferDraw?(): void;\n  onResignGame?(): void;\n}\n\nexport const GameControlPanelBottomToolbar: FC<GameControlPanelBottomToolbarProps> = ({\n  canAbortGame = false,\n  onAbortGame,\n  onOfferDraw,\n  onResignGame,\n}) => {\n  const handleAbortGame = useCallback(() => {\n    if (onAbortGame) {\n      onAbortGame();\n    }\n  }, [onAbortGame]);\n  const handleOfferDraw = useCallback(() => {\n    if (onOfferDraw) {\n      onOfferDraw();\n    }\n  }, [onOfferDraw]);\n  const handleResignGame = useCallback(() => {\n    if (onResignGame) {\n      onResignGame();\n    }\n  }, [onResignGame]);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        data-testid=\"abort-game-btn\"\n        onClick={handleAbortGame}\n        disabled={!canAbortGame}\n      >\n        Abort\n      </button>\n      <button\n        type=\"button\"\n        data-testid=\"offer-draw-btn\"\n        onClick={handleOfferDraw}\n      >\n        Offer a draw\n      </button>\n      <button\n        type=\"button\"\n        data-testid=\"resign-game-btn\"\n        onClick={handleResignGame}\n      >\n        Resign\n      </button>\n    </>\n  );\n};\n","import React, { FC } from \"react\";\nimport Game from \"../../interfaces/Game\";\nimport { PieceColor } from \"../../types/PieceColor\";\nimport { GameClock } from \"./GameClock\";\nimport { GameMoves } from \"./GameMoves\";\nimport { GameControlPanelUserName } from \"./GameControlPanelUserName\";\nimport { GameControlPanelTopToolbar } from \"./GameControlPanelTopToolbar\";\nimport { GameControlPanelBottomToolbar } from \"./GameControlPanelBottomToolbar\";\nimport makeChessInstance from \"../../utils/makeChessInstance\";\n\nexport interface GameControlPanelProps {\n  game?: Game;\n  orientation?: PieceColor;\n  rewindToMoveIndex?: number | null;\n  canAbortGame?: boolean;\n  onRewindToMove?(moveIndex: number): void;\n  onFlipBoard?(): void;\n  onRewindToPrevMove?(): void;\n  onRewindToNextMove?(): void;\n  onRewindToFirstMove?(): void;\n  onRewindToLastMove?(): void;\n  onAbortGame?(): void;\n  onOfferDraw?(): void;\n  onResignGame?(): void;\n}\n\nexport const GameControlPanel: FC<GameControlPanelProps> = ({\n  game,\n  orientation = \"white\",\n  rewindToMoveIndex = null,\n  canAbortGame = false,\n  onRewindToMove,\n  onFlipBoard,\n  onRewindToPrevMove,\n  onRewindToNextMove,\n  onRewindToFirstMove,\n  onRewindToLastMove,\n  onAbortGame,\n  onOfferDraw,\n  onResignGame,\n}) => {\n  if (!game) {\n    return null;\n  }\n\n  const chess = makeChessInstance(game);\n\n  const movesHistory = chess.history();\n\n  const isFirstMove = movesHistory.length === 0 || rewindToMoveIndex === 0;\n\n  const isLastMove = rewindToMoveIndex === null;\n\n  const hasPrevMove = movesHistory.length > 0 && rewindToMoveIndex !== 0;\n\n  const hasNextMove = movesHistory.length > 0 && rewindToMoveIndex !== null;\n\n  return (\n    <div>\n      <GameClock time={orientation === \"white\" ? game.btime : game.wtime} />\n      <GameControlPanelUserName\n        game={game}\n        color={orientation === \"white\" ? \"black\" : \"white\"}\n      />\n      <GameControlPanelTopToolbar\n        isFirstMove={isFirstMove}\n        isLastMove={isLastMove}\n        hasPrevMove={hasPrevMove}\n        hasNextMove={hasNextMove}\n        onFlipBoard={onFlipBoard}\n        onRewindToPrevMove={onRewindToPrevMove}\n        onRewindToNextMove={onRewindToNextMove}\n        onRewindToFirstMove={onRewindToFirstMove}\n        onRewindToLastMove={onRewindToLastMove}\n      />\n      <GameMoves\n        game={game}\n        rewindToMoveIndex={rewindToMoveIndex}\n        onRewindToMove={onRewindToMove}\n      />\n      <GameControlPanelBottomToolbar\n        canAbortGame={canAbortGame}\n        onAbortGame={onAbortGame}\n        onOfferDraw={onOfferDraw}\n        onResignGame={onResignGame}\n      />\n      <GameControlPanelUserName\n        game={game}\n        color={orientation === \"white\" ? \"white\" : \"black\"}\n      />\n      <GameClock time={orientation === \"white\" ? game.wtime : game.btime} />\n    </div>\n  );\n};\n","import React, { FC } from \"react\";\nimport { ChessInstance } from \"chess.js\";\nimport {\n  Board,\n  getValidMoves,\n  Move,\n  PieceColor,\n  ValidMoves,\n} from \"ii-react-chessboard\";\nimport Game from \"../../interfaces/Game\";\nimport makeChessInstance from \"../../utils/makeChessInstance\";\nimport User from \"../../interfaces/User\";\nimport { GameMeta } from \"./GameMeta\";\nimport { GameControlPanel } from \"./GameControlPanel\";\nimport { PieceColor as AppPieceColor } from \"../../types/PieceColor\";\n\nexport interface SingleGameProps {\n  game?: Game;\n  currentUser?: User;\n  isFlipped?: boolean;\n  rewindToMoveIndex?: number | null;\n  onMove?(move: Move): void;\n  onAbortGame?(): void;\n  onFlipBoard?(): void;\n  onRewindToMove?(moveIndex: number | null): void;\n}\n\nexport const SingleGame: FC<SingleGameProps> = ({\n  game,\n  currentUser,\n  isFlipped = false,\n  rewindToMoveIndex = null,\n  onAbortGame,\n  onMove,\n  onFlipBoard,\n  onRewindToMove,\n}) => {\n  if (!game) {\n    return null;\n  }\n\n  const chessWithAllMoves: ChessInstance = makeChessInstance(game);\n\n  const chess: ChessInstance =\n    rewindToMoveIndex === null\n      ? chessWithAllMoves\n      : makeChessInstance(game, rewindToMoveIndex);\n\n  const check: boolean = chess.in_check();\n\n  const fen: string = chess.fen();\n\n  const turnColor: PieceColor =\n    game.turn === \"white\" ? PieceColor.WHITE : PieceColor.BLACK;\n\n  const validMoves: ValidMoves = getValidMoves(chess);\n\n  let viewOnly = true;\n  if (\n    currentUser &&\n    (currentUser.id === game.white?.id || currentUser.id === game.black?.id) &&\n    game.status === \"started\" &&\n    rewindToMoveIndex === null\n  ) {\n    viewOnly = false;\n  }\n\n  let movableColor: PieceColor | undefined;\n  if (currentUser && currentUser.id === game.white?.id) {\n    movableColor = PieceColor.WHITE;\n  }\n  if (currentUser && currentUser.id === game.black?.id) {\n    movableColor = PieceColor.BLACK;\n  }\n\n  let orientation = PieceColor.WHITE;\n  if (currentUser && currentUser.id === game.black?.id) {\n    orientation = PieceColor.BLACK;\n  }\n  if (isFlipped) {\n    orientation =\n      orientation === PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\n  }\n\n  const movesHistory = chessWithAllMoves.history({ verbose: true });\n\n  let lastMoveSquares: string[] | undefined;\n  if (rewindToMoveIndex === null) {\n    if (movesHistory.length) {\n      const lastMove = movesHistory[movesHistory.length - 1];\n      lastMoveSquares = [lastMove.from, lastMove.to];\n    }\n  } else {\n    const lastMove = movesHistory[rewindToMoveIndex];\n    lastMoveSquares = [lastMove.from, lastMove.to];\n  }\n\n  let canAbortGame = false;\n  if (\n    currentUser &&\n    (currentUser.id === game.white?.id || currentUser.id === game.black?.id) &&\n    game.status === \"started\" &&\n    movesHistory.length < 3\n  ) {\n    canAbortGame = true;\n  }\n\n  // @todo. use useCallback hook\n  const handleRewindToMove = (moveIndex: number) => {\n    if (onRewindToMove) {\n      if (moveIndex === movesHistory.length - 1) {\n        onRewindToMove(null);\n      } else {\n        onRewindToMove(moveIndex);\n      }\n    }\n  };\n\n  // @todo. use useCallback hook\n  const handleRewindToFirstMove = () => {\n    if (onRewindToMove) {\n      onRewindToMove(0);\n    }\n  };\n\n  // @todo. use useCallback hook\n  const handleRewindToLastMove = () => {\n    if (onRewindToMove) {\n      onRewindToMove(null);\n    }\n  };\n\n  // @todo. use useCallback hook\n  const handleRewindToPrevMove = () => {\n    if (onRewindToMove) {\n      if (rewindToMoveIndex === null) {\n        onRewindToMove(movesHistory.length - 2);\n      } else {\n        onRewindToMove(rewindToMoveIndex - 1);\n      }\n    }\n  };\n\n  // @todo. use useCallback hook\n  const handleRewindToNextMove = () => {\n    if (onRewindToMove) {\n      if (rewindToMoveIndex === movesHistory.length - 2) {\n        onRewindToMove(null);\n      } else {\n        onRewindToMove((rewindToMoveIndex as number) + 1);\n      }\n    }\n  };\n\n  return (\n    <>\n      <GameMeta game={game} />\n      <GameControlPanel\n        game={game}\n        orientation={orientation as AppPieceColor}\n        rewindToMoveIndex={rewindToMoveIndex}\n        canAbortGame={canAbortGame}\n        onFlipBoard={onFlipBoard}\n        onAbortGame={onAbortGame}\n        onRewindToMove={handleRewindToMove}\n        onRewindToFirstMove={handleRewindToFirstMove}\n        onRewindToLastMove={handleRewindToLastMove}\n        onRewindToPrevMove={handleRewindToPrevMove}\n        onRewindToNextMove={handleRewindToNextMove}\n      />\n      <Board\n        allowMarkers\n        check={check}\n        clickable\n        draggable\n        orientation={orientation}\n        position={fen}\n        turnColor={turnColor}\n        lastMoveSquares={lastMoveSquares}\n        movableColor={movableColor}\n        validMoves={validMoves}\n        viewOnly={viewOnly}\n        onMove={onMove}\n      />\n    </>\n  );\n};\n","import React, { FC, useCallback, useEffect } from \"react\";\nimport { denormalize } from \"normalizr\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Move } from \"ii-react-chessboard\";\nimport { SingleGame } from \"./SingleGame\";\nimport { AppDispatch } from \"../../app/store\";\nimport { RootState } from \"../../app/rootReducer\";\nimport gameSchema from \"../../normalizr/schemas/gameSchema\";\nimport {\n  abortGame,\n  defaultSingleGameItemState,\n  fetchGame,\n  flipBoard,\n  rewindToMove,\n} from \"./singleGameSlice\";\nimport { makeMove } from \"../move/moveSlice\";\nimport User from \"../../interfaces/User\";\nimport userSchema from \"../../normalizr/schemas/userSchema\";\n\nexport interface SingleGameContainerProps {\n  id: number;\n}\n\nexport const SingleGameContainer: FC<SingleGameContainerProps> = ({ id }) => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const game = useSelector((state: RootState) =>\n    denormalize(id, gameSchema, state.entities)\n  );\n\n  const currentUser: User | undefined = useSelector((state: RootState) => {\n    if (state.currentUser.userId) {\n      return denormalize(state.currentUser.userId, userSchema, state.entities);\n    }\n    return undefined;\n  });\n\n  const singleGameItemState =\n    useSelector((state: RootState) => state.singleGame[id]) ||\n    defaultSingleGameItemState;\n\n  useEffect(() => {\n    dispatch(fetchGame(id));\n  }, [dispatch, id]);\n\n  const handleAbortGame = useCallback(() => {\n    dispatch(abortGame(id));\n  }, [dispatch, id]);\n\n  const handleMove = useCallback(\n    (move: Move) => {\n      dispatch(makeMove(id, `${move.from}${move.to}`));\n    },\n    [dispatch, id]\n  );\n  const handleFlipBoard = useCallback(() => {\n    dispatch(flipBoard(id));\n  }, [dispatch, id]);\n\n  const handleRewindToMove = useCallback(\n    (moveIndex: number | null) => {\n      dispatch(\n        rewindToMove({\n          moveIndex,\n          gameId: id,\n        })\n      );\n    },\n    [dispatch, id]\n  );\n\n  if (game) {\n    return (\n      <SingleGame\n        game={game}\n        currentUser={currentUser}\n        rewindToMoveIndex={singleGameItemState.rewindToMoveIndex}\n        onAbortGame={handleAbortGame}\n        onMove={handleMove}\n        onFlipBoard={handleFlipBoard}\n        onRewindToMove={handleRewindToMove}\n        isFlipped={singleGameItemState.isFlipped}\n      />\n    );\n  }\n  return null;\n};\n","import React, { FC } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { SingleGameContainer } from \"../features/single-game/SingleGameContainer\";\n\ninterface GamePageParams {\n  id: string;\n}\n\nconst GamePage: FC<unknown> = () => {\n  const { id } = useParams<GamePageParams>();\n\n  return <SingleGameContainer id={Number(id)} />;\n};\n\nexport default GamePage;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport React, { FC, FormEvent } from \"react\";\nimport { Formik, FormikHelpers } from \"formik\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\nimport * as Yup from \"yup\";\nimport LoginData from \"../../interfaces/LoginData\";\n\nconst loginSchema = Yup.object().shape({\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n  password: Yup.string()\n    .min(6, \"Password length must be >= 6\")\n    .required(\"Required\"),\n});\n\nexport interface LoginFormProps {\n  onSubmit?(\n    values: LoginData,\n    formikHelpers: FormikHelpers<LoginData>\n  ): void | Promise<any>;\n}\n\nexport const LoginForm: FC<LoginFormProps> = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{ email: \"\", password: \"\" }}\n      validationSchema={loginSchema}\n      onSubmit={(values, formikHelpers): Promise<any> | void => {\n        if (onSubmit) {\n          return onSubmit(values as LoginData, formikHelpers);\n        }\n        return undefined;\n      }}\n    >\n      {({\n        errors,\n        values,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        status,\n        setStatus,\n        /* and other goodies */\n      }) => (\n        <Form\n          noValidate\n          onSubmit={(e) => handleSubmit(e as FormEvent<HTMLFormElement>)}\n          onChange={() => setStatus(\"\")}\n        >\n          {!!status && <Alert variant=\"danger\">{status}</Alert>}\n          <Form.Group>\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Enter email\"\n              onBlur={handleBlur}\n              value={values.email}\n              onChange={handleChange}\n              isValid={touched.email && !errors.email}\n              isInvalid={touched.email && !!errors.email}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.email}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n              isValid={touched.password && !errors.password}\n              isInvalid={touched.password && !!errors.password}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.password}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n            Login\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport React, { FC, FormEvent } from \"react\";\nimport { Formik } from \"formik\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\nimport * as Yup from \"yup\";\nimport { FormikHelpers } from \"formik/dist/types\";\n\nconst registrationSchema = Yup.object().shape({\n  fullName: Yup.string().required(\"Required\"),\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n  password: Yup.string()\n    .min(6, \"Password length must be >= 6\")\n    .required(\"Required\"),\n  confirmPassword: Yup.string()\n    .equals([Yup.ref(\"password\")], \"Please repeat the password\")\n    .required(\"Required\"),\n});\n\nexport interface RegistrationFormData {\n  fullName: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nexport interface RegistrationFormProps {\n  onSubmit?(\n    values: RegistrationFormData,\n    formikHelpers: FormikHelpers<RegistrationFormData>\n  ): void | Promise<any>;\n}\n\nexport const RegistrationForm: FC<RegistrationFormProps> = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{\n        fullName: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n      }}\n      validationSchema={registrationSchema}\n      onSubmit={(values, formikHelpers): Promise<any> | void => {\n        if (onSubmit) {\n          return onSubmit(values as RegistrationFormData, formikHelpers);\n        }\n        return undefined;\n      }}\n    >\n      {({\n        errors,\n        values,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        status,\n        setStatus,\n        /* and other goodies */\n      }) => (\n        <Form\n          noValidate\n          onSubmit={(e) => handleSubmit(e as FormEvent<HTMLFormElement>)}\n          onChange={() => setStatus(\"\")}\n        >\n          {!!status && <Alert variant=\"danger\">{status}</Alert>}\n\n          <Form.Group>\n            <Form.Label>Full name</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"fullName\"\n              placeholder=\"Enter full name\"\n              onBlur={handleBlur}\n              value={values.fullName}\n              onChange={handleChange}\n              isValid={touched.fullName && !errors.fullName}\n              isInvalid={touched.fullName && !!errors.fullName}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.fullName}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Enter email\"\n              onBlur={handleBlur}\n              value={values.email}\n              onChange={handleChange}\n              isValid={touched.email && !errors.email}\n              isInvalid={touched.email && !!errors.email}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.email}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n              isValid={touched.password && !errors.password}\n              isInvalid={touched.password && !!errors.password}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.password}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"confirmPassword\"\n              placeholder=\"Password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.confirmPassword}\n              isValid={touched.confirmPassword && !errors.confirmPassword}\n              isInvalid={touched.confirmPassword && !!errors.confirmPassword}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {errors.confirmPassword}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n            Register\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import React, { FC } from \"react\";\nimport { Tab, Tabs } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { FormikHelpers } from \"formik\";\nimport { LoginForm } from \"./LoginForm\";\nimport { RegistrationForm, RegistrationFormData } from \"./RegistrationForm\";\nimport LoginData from \"../../interfaces/LoginData\";\nimport { login, register } from \"../current-user/currentUserSlice\";\nimport { AppDispatch } from \"../../app/store\";\n\nconst LoginTabsContainer: FC<unknown> = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const doLogin = React.useCallback(\n    (values: LoginData, formikHelpers: FormikHelpers<LoginData>) => {\n      return dispatch(login(values)).catch((err) => {\n        if (err.statusCode === 401) {\n          formikHelpers.setStatus(\"Incorrect email or password\");\n        } else {\n          formikHelpers.setStatus(\"Internal server error\");\n        }\n      });\n    },\n    [dispatch]\n  );\n\n  const doSignUp = React.useCallback(\n    (\n      values: RegistrationFormData,\n      formikHelpers: FormikHelpers<RegistrationFormData>\n    ) => {\n      return dispatch(\n        register({\n          fullName: values.fullName,\n          email: values.email,\n          password: values.password,\n        })\n      ).catch((err) => {\n        if (err.statusCode === 409) {\n          formikHelpers.setStatus(\n            \"The provided email address is already in use\"\n          );\n        } else {\n          formikHelpers.setStatus(\"Internal server error\");\n        }\n      });\n    },\n    [dispatch]\n  );\n\n  return (\n    <Tabs transition={false}>\n      <Tab eventKey=\"home\" title=\"Login\">\n        <LoginForm onSubmit={doLogin} />\n      </Tab>\n      <Tab eventKey=\"profile\" title=\"Register\">\n        <RegistrationForm onSubmit={doSignUp} />\n      </Tab>\n    </Tabs>\n  );\n};\n\nexport default LoginTabsContainer;\n","import React, { FC, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { denormalize } from \"normalizr\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport HomePage from \"../pages/HomePage\";\nimport GamePage from \"../pages/GamePage\";\nimport LoginTabsContainer from \"../features/auth-modal/LoginTabsContainer\";\nimport { RootState } from \"./rootReducer\";\nimport {\n  fetchCurrentUser,\n  logout,\n} from \"../features/current-user/currentUserSlice\";\nimport {\n  showAuthModal,\n  hideAuthModal,\n} from \"../features/auth-modal/authModalSlice\";\nimport User from \"../interfaces/User\";\nimport userSchema from \"../normalizr/schemas/userSchema\";\nimport { watchGames } from \"../features/data-subscription/dataSubscriptionSlice\";\nimport { startGameClock } from \"../features/game-clock/gameClockSlice\";\n\nconst App: FC = () => {\n  const dispatch = useDispatch();\n\n  const currentUser: User | null = useSelector((state: RootState) => {\n    if (state.currentUser.userId) {\n      return denormalize(state.currentUser.userId, userSchema, state.entities);\n    }\n    return null;\n  });\n  const { isAuthModalVisible } = useSelector(\n    (state: RootState) => state.authModal\n  );\n\n  useEffect(() => {\n    dispatch(fetchCurrentUser());\n    dispatch(watchGames());\n    dispatch(startGameClock());\n  }, [dispatch]);\n\n  return (\n    <Router>\n      {currentUser ? (\n        <>\n          <div>Hi, {currentUser.fullName}</div>\n          <Button variant=\"primary\" onClick={() => dispatch(logout())}>\n            Logout\n          </Button>\n        </>\n      ) : (\n        <Button variant=\"primary\" onClick={() => dispatch(showAuthModal())}>\n          Login / Register\n        </Button>\n      )}\n\n      <Modal\n        show={isAuthModalVisible}\n        onHide={() => dispatch(hideAuthModal())}\n        animation={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Login</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <LoginTabsContainer />\n        </Modal.Body>\n      </Modal>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/game/:id\">\n            <GamePage />\n          </Route>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable no-param-reassign */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  getCurrentUserSuccess,\n  loginSuccess,\n  registerSuccess,\n} from \"../current-user/currentUserSlice\";\nimport { getOngoingGamesSuccess } from \"../ongoing-games/ongoingGamesSlice\";\nimport {\n  getSingleGameSuccess,\n  abortGameSuccess,\n} from \"../single-game/singleGameSlice\";\nimport { challengeAiSuccess } from \"../challenge/challengeSlice\";\nimport { oneSecondPassed } from \"../game-clock/gameClockSlice\";\nimport {\n  updateGameBySubscription,\n  createGameBySubscription,\n} from \"../data-subscription/dataSubscriptionSlice\";\nimport {\n  makeMoveRequest,\n  makeMoveSuccess,\n  MoveRequestPayload,\n} from \"../move/moveSlice\";\nimport NormalizedUserEntity from \"../../normalizr/interfaces/NormalizedUserEntity\";\nimport NormalizedGameEntity from \"../../normalizr/interfaces/NormalizedGameEntity\";\nimport makeChessInstance from \"../../utils/makeChessInstance\";\n\nexport interface EntitiesState {\n  users: Record<string, NormalizedUserEntity>;\n  games: Record<string, NormalizedGameEntity>;\n}\n\nconst initialState: EntitiesState = {\n  users: {},\n  games: {},\n};\n\nconst getNormalizedDataReducer = (\n  state: EntitiesState,\n  action: PayloadAction<{\n    entities: Partial<EntitiesState>;\n  }>\n) => {\n  Object.assign(state.users, action.payload.entities.users);\n  Object.assign(state.games, action.payload.entities.games);\n};\n\nconst entitiesSlice = createSlice({\n  name: \"entities\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [getCurrentUserSuccess.type]: (\n      state: EntitiesState,\n      action: PayloadAction<null | {\n        entities: Partial<EntitiesState>;\n      }>\n    ) => {\n      if (action.payload) {\n        getNormalizedDataReducer(state, {\n          type: action.type,\n          payload: action.payload,\n        });\n      }\n    },\n    [loginSuccess.type]: getNormalizedDataReducer,\n    [registerSuccess.type]: getNormalizedDataReducer,\n    [getOngoingGamesSuccess.type]: getNormalizedDataReducer,\n    [getSingleGameSuccess.type]: getNormalizedDataReducer,\n    [abortGameSuccess.type]: getNormalizedDataReducer,\n    [challengeAiSuccess.type]: getNormalizedDataReducer,\n    [updateGameBySubscription.type]: getNormalizedDataReducer,\n    [createGameBySubscription.type]: getNormalizedDataReducer,\n    [makeMoveRequest.type]: (\n      state: EntitiesState,\n      action: PayloadAction<MoveRequestPayload>\n    ) => {\n      state.games[action.payload.gameId].turn =\n        state.games[action.payload.gameId].turn === \"white\" ? \"black\" : \"white\";\n      state.games[action.payload.gameId].moves = `${\n        state.games[action.payload.gameId].moves\n      } ${action.payload.move}`.trim();\n    },\n    [makeMoveSuccess.type]: getNormalizedDataReducer,\n    [oneSecondPassed.type]: (state: EntitiesState) => {\n      const gameIds = Object.keys(state.games);\n\n      gameIds.forEach((gameId) => {\n        const game = state.games[gameId];\n\n        if (game.status === \"started\") {\n          const chess = makeChessInstance(game);\n\n          if (chess.history().length > 1) {\n            const timePropName = game.turn === \"white\" ? \"wtime\" : \"btime\";\n\n            game[timePropName] -= 1000;\n            if (game[timePropName] < 0) {\n              game[timePropName] = 0;\n            }\n\n            if (game[timePropName] === 0) {\n              game.status = \"outoftime\";\n              game.winner = game.turn === \"white\" ? \"black\" : \"white\";\n            }\n          }\n        }\n      });\n    },\n  },\n});\n\nexport default entitiesSlice.reducer;\n","/* eslint-disable import/no-cycle */\n\nimport { combineReducers } from \"@reduxjs/toolkit\";\nimport ongoingGamesReducer from \"../features/ongoing-games/ongoingGamesSlice\";\nimport currentUserReducer from \"../features/current-user/currentUserSlice\";\nimport authModalReducer from \"../features/auth-modal/authModalSlice\";\nimport challengeAiModalReducer from \"../features/challenge-ai-modal/challengeAiModalSlice\";\nimport entitiesReducer from \"../features/entities/entitiesSlice\";\nimport singleGameReducer from \"../features/single-game/singleGameSlice\";\n// import dataSubscriptionReducer from \"../redux/slices/dataSubscriptionSlice\";\n\nconst rootReducer = combineReducers({\n  authModal: authModalReducer,\n  challengeAiModal: challengeAiModalReducer,\n  // challenge: challengeReducer,\n  currentUser: currentUserReducer,\n  ongoingGames: ongoingGamesReducer,\n  entities: entitiesReducer,\n  // dataSubscription: dataSubscriptionReducer,\n  singleGame: singleGameReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","/* eslint-disable global-require */\n/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable import/no-cycle */\n\nimport { Action, configureStore } from \"@reduxjs/toolkit\";\nimport { ThunkAction } from \"redux-thunk\";\nimport rootReducer, { RootState } from \"./rootReducer\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nif (process.env.NODE_ENV === \"development\" && module.hot) {\n  module.hot.accept(\"./rootReducer\", () => {\n    const newRootReducer = require(\"./rootReducer\").default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppThunk<R> = ThunkAction<R, RootState, unknown, Action<string>>;\n\nexport default store;\n","/* eslint-disable global-require */\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./app/store\";\n\nconst render = () => {\n  const App = require(\"./app/App\").default;\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n};\n\nrender();\n\nif (process.env.NODE_ENV === \"development\" && module.hot) {\n  module.hot.accept(\"./app/App\", render);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { Chess, ChessInstance } from \"chess.js\";\nimport Game from \"../interfaces/Game\";\n\nconst startPositionFen =\n  \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n\nexport default (\n  game: Pick<Game, \"initialFen\" | \"moves\">,\n  rewindToMoveIndex: number | null = null\n): ChessInstance => {\n  let { initialFen } = game;\n  if (initialFen === \"startpos\") {\n    initialFen = startPositionFen;\n  }\n\n  const chess = new Chess(initialFen);\n\n  if (game.moves) {\n    game.moves.split(\" \").forEach((move, index) => {\n      if (rewindToMoveIndex !== null && index > rewindToMoveIndex) {\n        return;\n      }\n\n      const result = chess.move(move, {\n        sloppy: true,\n      });\n\n      if (!result) {\n        throw Error(`incorrect move: ${move}`);\n      }\n    });\n  }\n\n  return chess;\n};\n","import { schema } from \"normalizr\";\n\nconst userSchema = new schema.Entity(\"users\");\n\nexport default userSchema;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n/* eslint-disable prefer-object-spread */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { JWR } from \"sails.io.js\";\nimport { normalize } from \"normalizr\";\nimport { AppThunk } from \"../../app/store\";\nimport Game from \"../../interfaces/Game\";\nimport ioClient from \"../../services/ioClient\";\nimport gameSchema from \"../../normalizr/schemas/gameSchema\";\nimport ItemErrorPayload from \"../../interfaces/ItemErrorPayload\";\nimport NormalizedData from \"../../normalizr/interfaces/NormalizedData\";\n\nexport interface RewindToMovePayload {\n  gameId: number;\n  moveIndex: number | null;\n}\n\ninterface SingleGameItemState {\n  isLoading: boolean;\n  error: string | null;\n  isFlipped: boolean;\n  rewindToMoveIndex: number | null;\n}\n\ninterface SingleGameState {\n  [gameId: string]: SingleGameItemState;\n}\n\nexport const defaultSingleGameItemState: SingleGameItemState = {\n  isLoading: true,\n  error: null,\n  isFlipped: false,\n  rewindToMoveIndex: null,\n};\n\nconst initialState: SingleGameState = {};\n\nconst singleGameSlice = createSlice({\n  name: \"singleGame\",\n  initialState,\n  reducers: {\n    getSingleGameRequest(state, action: PayloadAction<number>) {\n      state[action.payload] = Object.assign(\n        {},\n        defaultSingleGameItemState,\n        state[action.payload],\n        {\n          isLoading: true,\n          error: null,\n        }\n      );\n    },\n    getSingleGameSuccess(state, action: PayloadAction<NormalizedData<number>>) {\n      state[action.payload.result] = Object.assign(\n        {},\n        defaultSingleGameItemState,\n        state[action.payload.result],\n        {\n          isLoading: false,\n          error: null,\n        }\n      );\n    },\n    getSingleGameError(state, action: PayloadAction<ItemErrorPayload>) {\n      state[action.payload.itemId] = Object.assign(\n        {},\n        defaultSingleGameItemState,\n        state[action.payload.itemId],\n        {\n          isLoading: false,\n          error: action.payload.error,\n        }\n      );\n    },\n    abortGameRequest(_state, _action: PayloadAction<number>) {},\n    abortGameSuccess(_state, _action: PayloadAction<NormalizedData<number>>) {},\n    abortGameError(_state, _action: PayloadAction<ItemErrorPayload>) {},\n    flipBoard(state, action: PayloadAction<number>) {\n      state[action.payload].isFlipped = !state[action.payload].isFlipped;\n    },\n    rewindToMove(state, action: PayloadAction<RewindToMovePayload>) {\n      state[action.payload.gameId].rewindToMoveIndex = action.payload.moveIndex;\n    },\n  },\n  extraReducers: {},\n});\n\nexport const {\n  getSingleGameRequest,\n  getSingleGameSuccess,\n  getSingleGameError,\n  flipBoard,\n  rewindToMove,\n  abortGameRequest,\n  abortGameSuccess,\n  abortGameError,\n} = singleGameSlice.actions;\n\nexport default singleGameSlice.reducer;\n\nexport const fetchGame = (id: number): AppThunk<Promise<Game>> => (\n  dispatch\n) => {\n  dispatch(getSingleGameRequest(id));\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(`/game/${id}`, (body: unknown, jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        const normalizedGame = normalize(body as Game, gameSchema);\n        dispatch(getSingleGameSuccess(normalizedGame));\n        resolve(body as Game);\n      } else {\n        dispatch(\n          getSingleGameError({\n            itemId: id,\n            error: body as string,\n          })\n        );\n        reject(jwr);\n      }\n    });\n  });\n};\n\nexport const abortGame = (id: number): AppThunk<Promise<Game>> => (\n  dispatch\n) => {\n  dispatch(abortGameRequest(id));\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      `/api/v1/board/game/${id}/abort`,\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedGame = normalize(body as Game, gameSchema);\n          dispatch(abortGameSuccess(normalizedGame));\n          resolve(body as Game);\n        } else {\n          dispatch(\n            abortGameError({\n              itemId: id,\n              error: body as string,\n            })\n          );\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"levelButtonGroup\":\"ChallengeAiForm_levelButtonGroup__1lnm_\",\"colorSubmits\":\"ChallengeAiForm_colorSubmits__1pM28\",\"colorSubmitsButton\":\"ChallengeAiForm_colorSubmitsButton__2P6Lx\",\"whiteButton\":\"ChallengeAiForm_whiteButton__2nTjs\",\"blackButton\":\"ChallengeAiForm_blackButton__1LVeL\",\"randomButton\":\"ChallengeAiForm_randomButton__1S07l\"};","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { JWR } from \"sails.io.js\";\nimport { normalize } from \"normalizr\";\nimport NormalizedData from \"../../normalizr/interfaces/NormalizedData\";\nimport { ChallengeAiData } from \"../../interfaces/ChallengeAiData\";\nimport { AppThunk } from \"../../app/store\";\nimport Game from \"../../interfaces/Game\";\nimport ioClient from \"../../services/ioClient\";\nimport gameSchema from \"../../normalizr/schemas/gameSchema\";\n\ninterface ChallengeState {}\n\nconst initialState: ChallengeState = {};\n\nconst challengeSlice = createSlice({\n  name: \"challenge\",\n  initialState,\n  reducers: {\n    challengeAiRequest() {},\n    challengeAiSuccess(\n      _state,\n      _action: PayloadAction<NormalizedData<number>>\n    ) {},\n    challengeAiError(_state, _action: PayloadAction<string>) {},\n  },\n  extraReducers: {},\n});\n\nexport const {\n  challengeAiRequest,\n  challengeAiSuccess,\n  challengeAiError,\n} = challengeSlice.actions;\n\nexport default challengeSlice.reducer;\n\nexport const challengeAi = (data: ChallengeAiData): AppThunk<Promise<Game>> => (\n  dispatch\n) => {\n  dispatch(challengeAiRequest());\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      `/api/v1/challenge/ai`,\n      data,\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedGame = normalize(body as Game, gameSchema);\n\n          dispatch(challengeAiSuccess(normalizedGame));\n          resolve(body as Game);\n        } else {\n          dispatch(challengeAiError(body as string));\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { normalize } from \"normalizr\";\nimport NormalizedData from \"../../normalizr/interfaces/NormalizedData\";\nimport { AppThunk } from \"../../app/store\";\nimport ioClient from \"../../services/ioClient\";\nimport { SubscriptionData } from \"../../interfaces/SubscriptionData\";\nimport gameSchema from \"../../normalizr/schemas/gameSchema\";\n\ninterface DataSubscriptionState {}\n\nconst initialState: DataSubscriptionState = {};\n\nconst dataSubscriptionSlice = createSlice({\n  name: \"dataSubscription\",\n  initialState,\n  reducers: {\n    updateGameBySubscription(\n      _state,\n      _action: PayloadAction<NormalizedData<number>>\n    ) {},\n    createGameBySubscription(\n      _state,\n      _action: PayloadAction<NormalizedData<number>>\n    ) {},\n  },\n  extraReducers: {},\n});\n\nexport const {\n  updateGameBySubscription,\n  createGameBySubscription,\n} = dataSubscriptionSlice.actions;\n\nexport default dataSubscriptionSlice.reducer;\n\nexport const watchGames = (): AppThunk<void> => (dispatch) => {\n  ioClient.socket.on(\"game\", (subscriptionData: SubscriptionData) => {\n    if (subscriptionData.verb === \"updated\") {\n      const game = {\n        ...subscriptionData.previous,\n        ...subscriptionData.data,\n      };\n\n      const normalizedGame = normalize(game, gameSchema);\n\n      dispatch(updateGameBySubscription(normalizedGame));\n    } else if (subscriptionData.verb === \"created\") {\n      const normalizedGame = normalize(subscriptionData.data, gameSchema);\n\n      dispatch(createGameBySubscription(normalizedGame));\n    }\n  });\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { JWR } from \"sails.io.js\";\nimport { normalize } from \"normalizr\";\nimport { AppThunk } from \"../../app/store\";\nimport Game from \"../../interfaces/Game\";\nimport ioClient from \"../../services/ioClient\";\nimport gameSchema from \"../../normalizr/schemas/gameSchema\";\nimport NormalizedData from \"../../normalizr/interfaces/NormalizedData\";\nimport { challengeAiSuccess } from \"../challenge/challengeSlice\";\nimport {\n  createGameBySubscription,\n  updateGameBySubscription,\n} from \"../data-subscription/dataSubscriptionSlice\";\n\ninterface OngoingGamesState {\n  items: number[];\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: OngoingGamesState = {\n  items: [],\n  isLoading: true,\n  error: null,\n};\n\nconst ongoingGamesSlice = createSlice({\n  name: \"ongoingGames\",\n  initialState,\n  reducers: {\n    getOngoingGamesRequest(state) {\n      state.isLoading = true;\n      state.error = null;\n    },\n    getOngoingGamesSuccess(\n      state,\n      action: PayloadAction<NormalizedData<number[]>>\n    ) {\n      state.items = action.payload.result;\n      state.isLoading = false;\n      state.error = null;\n    },\n    getOngoingGamesError(state, action: PayloadAction<string>) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n  },\n  extraReducers: {\n    [challengeAiSuccess.type]: (\n      state,\n      action: PayloadAction<NormalizedData<number>>\n    ) => {\n      if (!state.items.includes(action.payload.result)) {\n        state.items.unshift(action.payload.result);\n      }\n    },\n    [createGameBySubscription.type]: (\n      state,\n      action: PayloadAction<NormalizedData<number>>\n    ) => {\n      if (!state.items.includes(action.payload.result)) {\n        state.items.unshift(action.payload.result);\n      }\n    },\n    [updateGameBySubscription.type]: (\n      state,\n      action: PayloadAction<NormalizedData<number>>\n    ) => {\n      if (!state.items.includes(action.payload.result)) {\n        state.items.unshift(action.payload.result);\n      }\n    },\n  },\n});\n\nexport const {\n  getOngoingGamesRequest,\n  getOngoingGamesSuccess,\n  getOngoingGamesError,\n} = ongoingGamesSlice.actions;\n\nexport default ongoingGamesSlice.reducer;\n\nexport const fetchOngoingGames = (): AppThunk<Promise<Game[]>> => (\n  dispatch\n) => {\n  dispatch(getOngoingGamesRequest());\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.get(\"/api/v1/game/playing\", (body: unknown, jwr: JWR) => {\n      if (jwr.statusCode === 200) {\n        const normalizedGames = normalize(body as Game[], [gameSchema]);\n        dispatch(getOngoingGamesSuccess(normalizedGames));\n\n        resolve(body as Game[]);\n      } else {\n        dispatch(getOngoingGamesError(body as string));\n        reject(jwr);\n      }\n    });\n  });\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport {\n  loginSuccess,\n  registerSuccess,\n} from \"../current-user/currentUserSlice\";\n\ninterface AuthModalState {\n  isAuthModalVisible: boolean;\n}\n\nconst initialState: AuthModalState = {\n  isAuthModalVisible: false,\n};\n\nconst authModalSlice = createSlice({\n  name: \"authModal\",\n  initialState,\n  reducers: {\n    showAuthModal(state) {\n      state.isAuthModalVisible = true;\n    },\n    hideAuthModal(state) {\n      state.isAuthModalVisible = false;\n    },\n  },\n  extraReducers: {\n    [loginSuccess.type]: (state) => {\n      state.isAuthModalVisible = false;\n    },\n    [registerSuccess.type]: (state) => {\n      state.isAuthModalVisible = false;\n    },\n  },\n});\n\nexport const { showAuthModal, hideAuthModal } = authModalSlice.actions;\n\nexport default authModalSlice.reducer;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { challengeAiSuccess } from \"../challenge/challengeSlice\";\n\ninterface ChallengeAiModalState {\n  isChallengeAiModalVisible: boolean;\n}\n\nconst initialState: ChallengeAiModalState = {\n  isChallengeAiModalVisible: false,\n};\n\nconst challengeAiModalSlice = createSlice({\n  name: \"challengeAiModal\",\n  initialState,\n  reducers: {\n    showChallengeAiModal(state) {\n      state.isChallengeAiModalVisible = true;\n    },\n    hideChallengeAiModal(state) {\n      state.isChallengeAiModalVisible = false;\n    },\n  },\n  extraReducers: {\n    [challengeAiSuccess.type]: (state) => {\n      state.isChallengeAiModalVisible = false;\n    },\n  },\n});\n\nexport const {\n  showChallengeAiModal,\n  hideChallengeAiModal,\n} = challengeAiModalSlice.actions;\n\nexport default challengeAiModalSlice.reducer;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable import/no-cycle */\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { JWR } from \"sails.io.js\";\nimport { normalize } from \"normalizr\";\nimport NormalizedData from \"../../normalizr/interfaces/NormalizedData\";\nimport { AppThunk } from \"../../app/store\";\nimport Game from \"../../interfaces/Game\";\nimport ioClient from \"../../services/ioClient\";\nimport gameSchema from \"../../normalizr/schemas/gameSchema\";\n\ninterface MoveState {}\n\nconst initialState: MoveState = {};\n\nconst moveSlice = createSlice({\n  name: \"move\",\n  initialState,\n  reducers: {\n    makeMoveRequest(_state, _action: PayloadAction<MoveRequestPayload>) {},\n    makeMoveSuccess(_state, _action: PayloadAction<NormalizedData<number>>) {},\n    makeMoveError(_state, _action: PayloadAction<string>) {},\n  },\n  extraReducers: {},\n});\n\nexport const {\n  makeMoveRequest,\n  makeMoveSuccess,\n  makeMoveError,\n} = moveSlice.actions;\n\nexport default moveSlice.reducer;\n\nexport interface MoveRequestPayload {\n  gameId: number;\n  move: string;\n}\n\nexport const makeMove = (\n  gameId: number,\n  move: string\n): AppThunk<Promise<Game>> => (dispatch) => {\n  dispatch(\n    makeMoveRequest({\n      gameId,\n      move,\n    })\n  );\n\n  return new Promise((resolve, reject) => {\n    ioClient.socket.post(\n      `/api/v1/board/game/${gameId}/move/${move}`,\n      {},\n      (body: unknown, jwr: JWR) => {\n        if (jwr.statusCode === 200) {\n          const normalizedGame = normalize(body as Game, gameSchema);\n\n          dispatch(makeMoveSuccess(normalizedGame));\n          resolve(body as Game);\n        } else {\n          dispatch(makeMoveError(body as string));\n          reject(jwr);\n        }\n      }\n    );\n  });\n};\n"],"sourceRoot":""}